{"version":3,"file":"/packages/router:tests.js","sources":["router/tests/router_server_tests.js","router/tests/router_common_tests.js"],"names":[],"mappings":";;;;;;;;AAAA,+C;AACA,E;AACA,2C;;AAEA,2C;AACA,uB;;AAEA,oD;AACA,+C;AACA,kB;AACA,K;;AAEA,6D;AACA,4B;AACA,K;;AAEA,+D;AACA,mC;;AAEA,kE;AACA,iC;AACA,mC;AACA,G;;AAEA,yD;AACA,yD;AACA,c;AACA,I;;AAEA,2E;AACA,sC;AACA,G;;;AAGA,oE;AACA,qB;AACA,2D;AACA,mC;AACA,8B;AACA,yB;AACA,2B;AACA,K;;AAEA,iE;AACA,mC;AACA,mC;AACA,iD;;AAEA,yD;AACA,iE;AACA,mC;AACA,mC;AACA,iD;;AAEA,iE;AACA,mC;AACA,mC;;AAEA,iE;AACA,mC;;AAEA,iE;AACA,mC;;AAEA,iE;AACA,mC;AACA,G;;;AAGA,0D;AACA,mD;AACA,6H;AACA,2B;AACA,2B;AACA,mC;AACA,U;;AAEA,sB;AACA,K;;AAEA,mE;AACA,6C;AACA,G;;;AAGA,6E;AACA,sC;AACA,0D;AACA,mC;AACA,2D;AACA,mC;AACA,G;;;AAGA,0E;AACA,6C;AACA,kD;AACA,0D;AACA,mC;AACA,2D;AACA,uC;AACA,0D;AACA,0C;AACA,sC;AACA,G;;;;;;;;;;;;;;;;;;;ACxGA,6C;AACA,qD;AACA,E;AACA,kB;AACA,0D;AACA,8B;AACA,E;AACA,c;AACA,0D;AACA,yB;AACA,E;AACA,4D;AACA,qD;AACA,G","sourcesContent":["// XXX: is it OK to assume localhost:3000 here?\n//\n// it seems that stream does in it's tests.\n\n// Force serving before Meteor fully starts\nMeteor.Router._start();\n\nTinytest.add(\"Simple Router.serve\", function(test) {\n  Meteor.Router.add('/server/foo', function() {\n    return 'data';\n  });\n\n  Meteor.Router.add(/server\\/page\\/(\\d+)/, function(number) {\n    return [number, 'page'];\n  });\n\n  var resp = Meteor.http.get(Meteor.absoluteUrl('server/foo'));\n  test.equal(resp.content, 'data');\n\n  var resp = Meteor.http.get(Meteor.absoluteUrl('server/page/7'));\n  test.equal(resp.statusCode, 7);\n  test.equal(resp.content, 'page');\n});\n\nTinytest.add(\"Router.serve with params\", function(test) {\n  Meteor.Router.add('/server/bar/:id.xml', function(id) {\n    return id;\n  })\n\n  var resp = Meteor.http.get(Meteor.absoluteUrl('server/bar/content.xml'));\n  test.equal(resp.content, 'content');\n});\n\n\nTinytest.add(\"Router.serve various response types\", function(test) {\n  Meteor.Router.add({\n    '/server/baz-1': [201, {'x-my-header': 'Baz'}, 'data'],\n    '/server/baz-2': [202, 'data'],\n    '/server/baz-3': ['data'],\n    '/server/baz-4': 203,\n    '/server/baz-5': 'data'\n  });\n\n  var resp = Meteor.http.get(Meteor.absoluteUrl('server/baz-1'));\n  test.equal(resp.statusCode, 201);\n  test.equal(resp.content, 'data');\n  test.equal(resp.headers['x-my-header'], 'Baz');\n\n  // grab it again to make sure we aren't messing with it\n  var resp = Meteor.http.get(Meteor.absoluteUrl('server/baz-1'));\n  test.equal(resp.statusCode, 201);\n  test.equal(resp.content, 'data');\n  test.equal(resp.headers['x-my-header'], 'Baz');\n\n  var resp = Meteor.http.get(Meteor.absoluteUrl('server/baz-2'));\n  test.equal(resp.statusCode, 202);\n  test.equal(resp.content, 'data');\n\n  var resp = Meteor.http.get(Meteor.absoluteUrl('server/baz-3'));\n  test.equal(resp.content, 'data');\n\n  var resp = Meteor.http.get(Meteor.absoluteUrl('server/baz-4'));\n  test.equal(resp.statusCode, 203);\n\n  var resp = Meteor.http.get(Meteor.absoluteUrl('server/baz-5'));\n  test.equal(resp.content, 'data');\n});\n\n\nTinytest.add(\"Router.serve with futures\", function(test) {\n  Meteor.Router.add('/server/delayed', function() {\n    var Future = (typeof(Npm) == \"undefined\") ? __meteor_bootstrap__.require(\"fibers/future\") : Npm.require(\"fibers/future\");\n    var fut = new Future();\n    setTimeout(function() {\n      fut.return('foo-in-timeout');\n    }, 1);\n\n    return fut.wait();\n  });\n\n  var resp = Meteor.http.get(Meteor.absoluteUrl('server/delayed'));\n  test.equal(resp.content, 'foo-in-timeout');\n});\n\n\nTinytest.add(\"Router.serve without http method restriction\", function(test) {\n  Meteor.Router.add('/bat-1', 'data');\n  var resp = Meteor.http.get(Meteor.absoluteUrl('bat-1'));\n  test.equal(resp.content, 'data');\n  var resp = Meteor.http.post(Meteor.absoluteUrl('bat-1'));\n  test.equal(resp.content, 'data');\n});\n\n\nTinytest.add(\"Router.serve with http method restriction\", function(test) {\n  Meteor.Router.add('/bat-2', 'GET', 'data');\n  Meteor.Router.add('/bat-2', 'POST', 'postdata');\n  var resp = Meteor.http.get(Meteor.absoluteUrl('bat-2'));\n  test.equal(resp.content, 'data');\n  var resp = Meteor.http.post(Meteor.absoluteUrl('bat-2'));\n  test.equal(resp.content, 'postdata');\n  var resp = Meteor.http.put(Meteor.absoluteUrl('bat-2'));\n  test.notEqual(resp.content, 'postdata');\n  test.notEqual(resp.content, 'data');\n});\n","Tinytest.add(\"Route basics\", function(test) {\n  var route = new Meteor.Router.Route('/posts/:_id');\n  \n  var params = {};\n  test.equal(route.match('/posts/7', null, params), true);\n  test.equal(params._id, '7');\n  \n  params = {};\n  test.equal(route.match('/posts/', null, params), false);\n  test.equal(params, {});\n  \n  test.equal(route.pathWithContext({_id: 10}), '/posts/10');\n  test.equal(route.pathWithContext(10), '/posts/10');\n});"]}