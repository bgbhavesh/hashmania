(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/react/lib/react-with-addons-0.8.0.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * React (with addons) v0.8.0                                                                                          // 2
 */                                                                                                                    // 3
!function(e){"object"==typeof exports?module.exports=e():"function"==typeof define&&define.amd?define(e):"undefined"!=typeof window?window.React=e():"undefined"!=typeof global?global.React=e():"undefined"!=typeof self&&(self.React=e())}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/**                                                                                                                    // 5
 * Copyright 2013 Facebook, Inc.                                                                                       // 6
 *                                                                                                                     // 7
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 8
 * you may not use this file except in compliance with the License.                                                    // 9
 * You may obtain a copy of the License at                                                                             // 10
 *                                                                                                                     // 11
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 12
 *                                                                                                                     // 13
 * Unless required by applicable law or agreed to in writing, software                                                 // 14
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 15
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 16
 * See the License for the specific language governing permissions and                                                 // 17
 * limitations under the License.                                                                                      // 18
 *                                                                                                                     // 19
 * @providesModule $                                                                                                   // 20
 * @typechecks                                                                                                         // 21
 */                                                                                                                    // 22
                                                                                                                       // 23
var ge = require("./ge");                                                                                              // 24
var ex = require("./ex");                                                                                              // 25
                                                                                                                       // 26
/**                                                                                                                    // 27
 * Find a node by ID.                                                                                                  // 28
 *                                                                                                                     // 29
 * If your application code depends on the existence of the element, use $,                                            // 30
 * which will throw if the element doesn't exist.                                                                      // 31
 *                                                                                                                     // 32
 * If you're not sure whether or not the element exists, use ge instead, and                                           // 33
 * manually check for the element's existence in your application code.                                                // 34
 *                                                                                                                     // 35
 * @param {string|DOMDocument|DOMElement|DOMTextNode|Comment} id                                                       // 36
 * @return {DOMDocument|DOMElement|DOMTextNode|Comment}                                                                // 37
 */                                                                                                                    // 38
function $(id) {                                                                                                       // 39
  var element = ge(id);                                                                                                // 40
  if (!element) {                                                                                                      // 41
    throw new Error(ex(                                                                                                // 42
      'Tried to get element with id of "%s" but it is not present on the page.',                                       // 43
      id                                                                                                               // 44
    ));                                                                                                                // 45
  }                                                                                                                    // 46
  return element;                                                                                                      // 47
}                                                                                                                      // 48
                                                                                                                       // 49
module.exports = $;                                                                                                    // 50
                                                                                                                       // 51
},{"./ex":96,"./ge":100}],2:[function(require,module,exports){                                                         // 52
/**                                                                                                                    // 53
 * Copyright 2013 Facebook, Inc.                                                                                       // 54
 *                                                                                                                     // 55
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 56
 * you may not use this file except in compliance with the License.                                                    // 57
 * You may obtain a copy of the License at                                                                             // 58
 *                                                                                                                     // 59
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 60
 *                                                                                                                     // 61
 * Unless required by applicable law or agreed to in writing, software                                                 // 62
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 63
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 64
 * See the License for the specific language governing permissions and                                                 // 65
 * limitations under the License.                                                                                      // 66
 *                                                                                                                     // 67
 * @providesModule CSSCore                                                                                             // 68
 * @typechecks                                                                                                         // 69
 */                                                                                                                    // 70
                                                                                                                       // 71
var invariant = require("./invariant");                                                                                // 72
                                                                                                                       // 73
/**                                                                                                                    // 74
 * The CSSCore module specifies the API (and implements most of the methods)                                           // 75
 * that should be used when dealing with the display of elements (via their                                            // 76
 * CSS classes and visibility on screeni. It is an API focused on mutating the                                         // 77
 * display and not reading it as no logical state should be encoded in the                                             // 78
 * display of elements.                                                                                                // 79
 */                                                                                                                    // 80
                                                                                                                       // 81
/**                                                                                                                    // 82
 * Tests whether the element has the class specified.                                                                  // 83
 *                                                                                                                     // 84
 * Note: This function is not exported in CSSCore because CSS classNames should                                        // 85
 * not store any logical information about the element. Use DataStore to store                                         // 86
 * information on an element.                                                                                          // 87
 *                                                                                                                     // 88
 * @param {DOMElement} element the element to set the class on                                                         // 89
 * @param {string} className the CSS className                                                                         // 90
 * @returns {boolean} true if the element has the class, false if not                                                  // 91
 */                                                                                                                    // 92
function hasClass(element, className) {                                                                                // 93
  if (element.classList) {                                                                                             // 94
    return !!className && element.classList.contains(className);                                                       // 95
  }                                                                                                                    // 96
  return (' ' + element.className + ' ').indexOf(' ' + className + ' ') > -1;                                          // 97
}                                                                                                                      // 98
                                                                                                                       // 99
var CSSCore = {                                                                                                        // 100
                                                                                                                       // 101
  /**                                                                                                                  // 102
   * Adds the class passed in to the element if it doesn't already have it.                                            // 103
   *                                                                                                                   // 104
   * @param {DOMElement} element the element to set the class on                                                       // 105
   * @param {string} className the CSS className                                                                       // 106
   * @return {DOMElement} the element passed in                                                                        // 107
   */                                                                                                                  // 108
  addClass: function(element, className) {                                                                             // 109
    ("production" !== "development" ? invariant(                                                                       // 110
      !/\s/.test(className),                                                                                           // 111
      'CSSCore.addClass takes only a single class name. "%s" contains ' +                                              // 112
      'multiple classes.', className                                                                                   // 113
    ) : invariant(!/\s/.test(className)));                                                                             // 114
                                                                                                                       // 115
    if (className) {                                                                                                   // 116
      if (element.classList) {                                                                                         // 117
        element.classList.add(className);                                                                              // 118
      } else if (!hasClass(element, className)) {                                                                      // 119
        element.className = element.className + ' ' + className;                                                       // 120
      }                                                                                                                // 121
    }                                                                                                                  // 122
    return element;                                                                                                    // 123
  },                                                                                                                   // 124
                                                                                                                       // 125
  /**                                                                                                                  // 126
   * Removes the class passed in from the element                                                                      // 127
   *                                                                                                                   // 128
   * @param {DOMElement} element the element to set the class on                                                       // 129
   * @param {string} className the CSS className                                                                       // 130
   * @return {DOMElement} the element passed in                                                                        // 131
   */                                                                                                                  // 132
  removeClass: function(element, className) {                                                                          // 133
    ("production" !== "development" ? invariant(                                                                       // 134
      !/\s/.test(className),                                                                                           // 135
      'CSSCore.removeClass takes only a single class name. "%s" contains ' +                                           // 136
      'multiple classes.', className                                                                                   // 137
    ) : invariant(!/\s/.test(className)));                                                                             // 138
                                                                                                                       // 139
    if (className) {                                                                                                   // 140
      if (element.classList) {                                                                                         // 141
        element.classList.remove(className);                                                                           // 142
      } else if (hasClass(element, className)) {                                                                       // 143
        element.className = element.className                                                                          // 144
          .replace(new RegExp('(^|\\s)' + className + '(?:\\s|$)', 'g'), '$1')                                         // 145
          .replace(/\s+/g, ' ') // multiple spaces to one                                                              // 146
          .replace(/^\s*|\s*$/g, ''); // trim the ends                                                                 // 147
      }                                                                                                                // 148
    }                                                                                                                  // 149
    return element;                                                                                                    // 150
  },                                                                                                                   // 151
                                                                                                                       // 152
  /**                                                                                                                  // 153
   * Helper to add or remove a class from an element based on a condition.                                             // 154
   *                                                                                                                   // 155
   * @param {DOMElement} element the element to set the class on                                                       // 156
   * @param {string} className the CSS className                                                                       // 157
   * @param {*} bool condition to whether to add or remove the class                                                   // 158
   * @return {DOMElement} the element passed in                                                                        // 159
   */                                                                                                                  // 160
  conditionClass: function(element, className, bool) {                                                                 // 161
    return (bool ? CSSCore.addClass : CSSCore.removeClass)(element, className);                                        // 162
  }                                                                                                                    // 163
};                                                                                                                     // 164
                                                                                                                       // 165
module.exports = CSSCore;                                                                                              // 166
                                                                                                                       // 167
},{"./invariant":109}],3:[function(require,module,exports){                                                            // 168
/**                                                                                                                    // 169
 * Copyright 2013 Facebook, Inc.                                                                                       // 170
 *                                                                                                                     // 171
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 172
 * you may not use this file except in compliance with the License.                                                    // 173
 * You may obtain a copy of the License at                                                                             // 174
 *                                                                                                                     // 175
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 176
 *                                                                                                                     // 177
 * Unless required by applicable law or agreed to in writing, software                                                 // 178
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 179
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 180
 * See the License for the specific language governing permissions and                                                 // 181
 * limitations under the License.                                                                                      // 182
 *                                                                                                                     // 183
 * @providesModule CSSProperty                                                                                         // 184
 */                                                                                                                    // 185
                                                                                                                       // 186
"use strict";                                                                                                          // 187
                                                                                                                       // 188
/**                                                                                                                    // 189
 * CSS properties which accept numbers but are not in units of "px".                                                   // 190
 */                                                                                                                    // 191
var isUnitlessNumber = {                                                                                               // 192
  fillOpacity: true,                                                                                                   // 193
  fontWeight: true,                                                                                                    // 194
  lineHeight: true,                                                                                                    // 195
  opacity: true,                                                                                                       // 196
  orphans: true,                                                                                                       // 197
  zIndex: true,                                                                                                        // 198
  zoom: true                                                                                                           // 199
};                                                                                                                     // 200
                                                                                                                       // 201
/**                                                                                                                    // 202
 * Most style properties can be unset by doing .style[prop] = '' but IE8                                               // 203
 * doesn't like doing that with shorthand properties so for the properties that                                        // 204
 * IE8 breaks on, which are listed here, we instead unset each of the                                                  // 205
 * individual properties. See http://bugs.jquery.com/ticket/12385.                                                     // 206
 * The 4-value 'clock' properties like margin, padding, border-width seem to                                           // 207
 * behave without any problems. Curiously, list-style works too without any                                            // 208
 * special prodding.                                                                                                   // 209
 */                                                                                                                    // 210
var shorthandPropertyExpansions = {                                                                                    // 211
  background: {                                                                                                        // 212
    backgroundImage: true,                                                                                             // 213
    backgroundPosition: true,                                                                                          // 214
    backgroundRepeat: true,                                                                                            // 215
    backgroundColor: true                                                                                              // 216
  },                                                                                                                   // 217
  border: {                                                                                                            // 218
    borderWidth: true,                                                                                                 // 219
    borderStyle: true,                                                                                                 // 220
    borderColor: true                                                                                                  // 221
  },                                                                                                                   // 222
  borderBottom: {                                                                                                      // 223
    borderBottomWidth: true,                                                                                           // 224
    borderBottomStyle: true,                                                                                           // 225
    borderBottomColor: true                                                                                            // 226
  },                                                                                                                   // 227
  borderLeft: {                                                                                                        // 228
    borderLeftWidth: true,                                                                                             // 229
    borderLeftStyle: true,                                                                                             // 230
    borderLeftColor: true                                                                                              // 231
  },                                                                                                                   // 232
  borderRight: {                                                                                                       // 233
    borderRightWidth: true,                                                                                            // 234
    borderRightStyle: true,                                                                                            // 235
    borderRightColor: true                                                                                             // 236
  },                                                                                                                   // 237
  borderTop: {                                                                                                         // 238
    borderTopWidth: true,                                                                                              // 239
    borderTopStyle: true,                                                                                              // 240
    borderTopColor: true                                                                                               // 241
  },                                                                                                                   // 242
  font: {                                                                                                              // 243
    fontStyle: true,                                                                                                   // 244
    fontVariant: true,                                                                                                 // 245
    fontWeight: true,                                                                                                  // 246
    fontSize: true,                                                                                                    // 247
    lineHeight: true,                                                                                                  // 248
    fontFamily: true                                                                                                   // 249
  }                                                                                                                    // 250
};                                                                                                                     // 251
                                                                                                                       // 252
var CSSProperty = {                                                                                                    // 253
  isUnitlessNumber: isUnitlessNumber,                                                                                  // 254
  shorthandPropertyExpansions: shorthandPropertyExpansions                                                             // 255
};                                                                                                                     // 256
                                                                                                                       // 257
module.exports = CSSProperty;                                                                                          // 258
                                                                                                                       // 259
},{}],4:[function(require,module,exports){                                                                             // 260
/**                                                                                                                    // 261
 * Copyright 2013 Facebook, Inc.                                                                                       // 262
 *                                                                                                                     // 263
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 264
 * you may not use this file except in compliance with the License.                                                    // 265
 * You may obtain a copy of the License at                                                                             // 266
 *                                                                                                                     // 267
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 268
 *                                                                                                                     // 269
 * Unless required by applicable law or agreed to in writing, software                                                 // 270
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 271
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 272
 * See the License for the specific language governing permissions and                                                 // 273
 * limitations under the License.                                                                                      // 274
 *                                                                                                                     // 275
 * @providesModule CSSPropertyOperations                                                                               // 276
 * @typechecks static-only                                                                                             // 277
 */                                                                                                                    // 278
                                                                                                                       // 279
"use strict";                                                                                                          // 280
                                                                                                                       // 281
var CSSProperty = require("./CSSProperty");                                                                            // 282
                                                                                                                       // 283
var dangerousStyleValue = require("./dangerousStyleValue");                                                            // 284
var escapeTextForBrowser = require("./escapeTextForBrowser");                                                          // 285
var hyphenate = require("./hyphenate");                                                                                // 286
var memoizeStringOnly = require("./memoizeStringOnly");                                                                // 287
                                                                                                                       // 288
var processStyleName = memoizeStringOnly(function(styleName) {                                                         // 289
  return escapeTextForBrowser(hyphenate(styleName));                                                                   // 290
});                                                                                                                    // 291
                                                                                                                       // 292
/**                                                                                                                    // 293
 * Operations for dealing with CSS properties.                                                                         // 294
 */                                                                                                                    // 295
var CSSPropertyOperations = {                                                                                          // 296
                                                                                                                       // 297
  /**                                                                                                                  // 298
   * Serializes a mapping of style properties for use as inline styles:                                                // 299
   *                                                                                                                   // 300
   *   > createMarkupForStyles({width: '200px', height: 0})                                                            // 301
   *   "width:200px;height:0;"                                                                                         // 302
   *                                                                                                                   // 303
   * Undefined values are ignored so that declarative programming is easier.                                           // 304
   *                                                                                                                   // 305
   * @param {object} styles                                                                                            // 306
   * @return {?string}                                                                                                 // 307
   */                                                                                                                  // 308
  createMarkupForStyles: function(styles) {                                                                            // 309
    var serialized = '';                                                                                               // 310
    for (var styleName in styles) {                                                                                    // 311
      if (!styles.hasOwnProperty(styleName)) {                                                                         // 312
        continue;                                                                                                      // 313
      }                                                                                                                // 314
      var styleValue = styles[styleName];                                                                              // 315
      if (styleValue != null) {                                                                                        // 316
        serialized += processStyleName(styleName) + ':';                                                               // 317
        serialized += dangerousStyleValue(styleName, styleValue) + ';';                                                // 318
      }                                                                                                                // 319
    }                                                                                                                  // 320
    return serialized || null;                                                                                         // 321
  },                                                                                                                   // 322
                                                                                                                       // 323
  /**                                                                                                                  // 324
   * Sets the value for multiple styles on a node.  If a value is specified as                                         // 325
   * '' (empty string), the corresponding style property will be unset.                                                // 326
   *                                                                                                                   // 327
   * @param {DOMElement} node                                                                                          // 328
   * @param {object} styles                                                                                            // 329
   */                                                                                                                  // 330
  setValueForStyles: function(node, styles) {                                                                          // 331
    var style = node.style;                                                                                            // 332
    for (var styleName in styles) {                                                                                    // 333
      if (!styles.hasOwnProperty(styleName)) {                                                                         // 334
        continue;                                                                                                      // 335
      }                                                                                                                // 336
      var styleValue = dangerousStyleValue(styleName, styles[styleName]);                                              // 337
      if (styleValue) {                                                                                                // 338
        style[styleName] = styleValue;                                                                                 // 339
      } else {                                                                                                         // 340
        var expansion = CSSProperty.shorthandPropertyExpansions[styleName];                                            // 341
        if (expansion) {                                                                                               // 342
          // Shorthand property that IE8 won't like unsetting, so unset each                                           // 343
          // component to placate it                                                                                   // 344
          for (var individualStyleName in expansion) {                                                                 // 345
            style[individualStyleName] = '';                                                                           // 346
          }                                                                                                            // 347
        } else {                                                                                                       // 348
          style[styleName] = '';                                                                                       // 349
        }                                                                                                              // 350
      }                                                                                                                // 351
    }                                                                                                                  // 352
  }                                                                                                                    // 353
                                                                                                                       // 354
};                                                                                                                     // 355
                                                                                                                       // 356
module.exports = CSSPropertyOperations;                                                                                // 357
                                                                                                                       // 358
},{"./CSSProperty":3,"./dangerousStyleValue":93,"./escapeTextForBrowser":95,"./hyphenate":108,"./memoizeStringOnly":117}],5:[function(require,module,exports){
/**                                                                                                                    // 360
 * Copyright 2013 Facebook, Inc.                                                                                       // 361
 *                                                                                                                     // 362
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 363
 * you may not use this file except in compliance with the License.                                                    // 364
 * You may obtain a copy of the License at                                                                             // 365
 *                                                                                                                     // 366
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 367
 *                                                                                                                     // 368
 * Unless required by applicable law or agreed to in writing, software                                                 // 369
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 370
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 371
 * See the License for the specific language governing permissions and                                                 // 372
 * limitations under the License.                                                                                      // 373
 *                                                                                                                     // 374
 * @providesModule CallbackRegistry                                                                                    // 375
 * @typechecks static-only                                                                                             // 376
 */                                                                                                                    // 377
                                                                                                                       // 378
"use strict";                                                                                                          // 379
                                                                                                                       // 380
var listenerBank = {};                                                                                                 // 381
                                                                                                                       // 382
/**                                                                                                                    // 383
 * Stores "listeners" by `registrationName`/`id`. There should be at most one                                          // 384
 * "listener" per `registrationName`/`id` in the `listenerBank`.                                                       // 385
 *                                                                                                                     // 386
 * Access listeners via `listenerBank[registrationName][id]`.                                                          // 387
 *                                                                                                                     // 388
 * @class CallbackRegistry                                                                                             // 389
 * @internal                                                                                                           // 390
 */                                                                                                                    // 391
var CallbackRegistry = {                                                                                               // 392
                                                                                                                       // 393
  /**                                                                                                                  // 394
   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.                                         // 395
   *                                                                                                                   // 396
   * @param {string} id ID of the DOM element.                                                                         // 397
   * @param {string} registrationName Name of listener (e.g. `onClick`).                                               // 398
   * @param {?function} listener The callback to store.                                                                // 399
   */                                                                                                                  // 400
  putListener: function(id, registrationName, listener) {                                                              // 401
    var bankForRegistrationName =                                                                                      // 402
      listenerBank[registrationName] || (listenerBank[registrationName] = {});                                         // 403
    bankForRegistrationName[id] = listener;                                                                            // 404
  },                                                                                                                   // 405
                                                                                                                       // 406
  /**                                                                                                                  // 407
   * @param {string} id ID of the DOM element.                                                                         // 408
   * @param {string} registrationName Name of listener (e.g. `onClick`).                                               // 409
   * @return {?function} The stored callback.                                                                          // 410
   */                                                                                                                  // 411
  getListener: function(id, registrationName) {                                                                        // 412
    var bankForRegistrationName = listenerBank[registrationName];                                                      // 413
    return bankForRegistrationName && bankForRegistrationName[id];                                                     // 414
  },                                                                                                                   // 415
                                                                                                                       // 416
  /**                                                                                                                  // 417
   * Deletes a listener from the registration bank.                                                                    // 418
   *                                                                                                                   // 419
   * @param {string} id ID of the DOM element.                                                                         // 420
   * @param {string} registrationName Name of listener (e.g. `onClick`).                                               // 421
   */                                                                                                                  // 422
  deleteListener: function(id, registrationName) {                                                                     // 423
    var bankForRegistrationName = listenerBank[registrationName];                                                      // 424
    if (bankForRegistrationName) {                                                                                     // 425
      delete bankForRegistrationName[id];                                                                              // 426
    }                                                                                                                  // 427
  },                                                                                                                   // 428
                                                                                                                       // 429
  /**                                                                                                                  // 430
   * Deletes all listeners for the DOM element with the supplied ID.                                                   // 431
   *                                                                                                                   // 432
   * @param {string} id ID of the DOM element.                                                                         // 433
   */                                                                                                                  // 434
  deleteAllListeners: function(id) {                                                                                   // 435
    for (var registrationName in listenerBank) {                                                                       // 436
      delete listenerBank[registrationName][id];                                                                       // 437
    }                                                                                                                  // 438
  },                                                                                                                   // 439
                                                                                                                       // 440
  /**                                                                                                                  // 441
   * This is needed for tests only. Do not use!                                                                        // 442
   */                                                                                                                  // 443
  __purge: function() {                                                                                                // 444
    listenerBank = {};                                                                                                 // 445
  }                                                                                                                    // 446
                                                                                                                       // 447
};                                                                                                                     // 448
                                                                                                                       // 449
module.exports = CallbackRegistry;                                                                                     // 450
                                                                                                                       // 451
},{}],6:[function(require,module,exports){                                                                             // 452
/**                                                                                                                    // 453
 * Copyright 2013 Facebook, Inc.                                                                                       // 454
 *                                                                                                                     // 455
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 456
 * you may not use this file except in compliance with the License.                                                    // 457
 * You may obtain a copy of the License at                                                                             // 458
 *                                                                                                                     // 459
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 460
 *                                                                                                                     // 461
 * Unless required by applicable law or agreed to in writing, software                                                 // 462
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 463
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 464
 * See the License for the specific language governing permissions and                                                 // 465
 * limitations under the License.                                                                                      // 466
 *                                                                                                                     // 467
 * @providesModule ChangeEventPlugin                                                                                   // 468
 */                                                                                                                    // 469
                                                                                                                       // 470
"use strict";                                                                                                          // 471
                                                                                                                       // 472
var EventConstants = require("./EventConstants");                                                                      // 473
var EventPluginHub = require("./EventPluginHub");                                                                      // 474
var EventPropagators = require("./EventPropagators");                                                                  // 475
var ExecutionEnvironment = require("./ExecutionEnvironment");                                                          // 476
var SyntheticEvent = require("./SyntheticEvent");                                                                      // 477
                                                                                                                       // 478
var isEventSupported = require("./isEventSupported");                                                                  // 479
var isTextInputElement = require("./isTextInputElement");                                                              // 480
var keyOf = require("./keyOf");                                                                                        // 481
                                                                                                                       // 482
var topLevelTypes = EventConstants.topLevelTypes;                                                                      // 483
                                                                                                                       // 484
var eventTypes = {                                                                                                     // 485
  change: {                                                                                                            // 486
    phasedRegistrationNames: {                                                                                         // 487
      bubbled: keyOf({onChange: null}),                                                                                // 488
      captured: keyOf({onChangeCapture: null})                                                                         // 489
    }                                                                                                                  // 490
  }                                                                                                                    // 491
};                                                                                                                     // 492
                                                                                                                       // 493
/**                                                                                                                    // 494
 * For IE shims                                                                                                        // 495
 */                                                                                                                    // 496
var activeElement = null;                                                                                              // 497
var activeElementID = null;                                                                                            // 498
var activeElementValue = null;                                                                                         // 499
var activeElementValueProp = null;                                                                                     // 500
                                                                                                                       // 501
/**                                                                                                                    // 502
 * SECTION: handle `change` event                                                                                      // 503
 */                                                                                                                    // 504
function shouldUseChangeEvent(elem) {                                                                                  // 505
  return (                                                                                                             // 506
    elem.nodeName === 'SELECT' ||                                                                                      // 507
    (elem.nodeName === 'INPUT' && elem.type === 'file')                                                                // 508
  );                                                                                                                   // 509
}                                                                                                                      // 510
                                                                                                                       // 511
var doesChangeEventBubble = false;                                                                                     // 512
if (ExecutionEnvironment.canUseDOM) {                                                                                  // 513
  // See `handleChange` comment below                                                                                  // 514
  doesChangeEventBubble = isEventSupported('change') && (                                                              // 515
    !('documentMode' in document) || document.documentMode > 8                                                         // 516
  );                                                                                                                   // 517
}                                                                                                                      // 518
                                                                                                                       // 519
function manualDispatchChangeEvent(nativeEvent) {                                                                      // 520
  var event = SyntheticEvent.getPooled(                                                                                // 521
    eventTypes.change,                                                                                                 // 522
    activeElementID,                                                                                                   // 523
    nativeEvent                                                                                                        // 524
  );                                                                                                                   // 525
  EventPropagators.accumulateTwoPhaseDispatches(event);                                                                // 526
                                                                                                                       // 527
  // If change bubbled, we'd just bind to it like all the other events                                                 // 528
  // and have it go through ReactEventTopLevelCallback. Since it doesn't, we                                           // 529
  // manually listen for the change event and so we have to enqueue and                                                // 530
  // process the abstract event manually.                                                                              // 531
  EventPluginHub.enqueueEvents(event);                                                                                 // 532
  EventPluginHub.processEventQueue();                                                                                  // 533
}                                                                                                                      // 534
                                                                                                                       // 535
function startWatchingForChangeEventIE8(target, targetID) {                                                            // 536
  activeElement = target;                                                                                              // 537
  activeElementID = targetID;                                                                                          // 538
  activeElement.attachEvent('onchange', manualDispatchChangeEvent);                                                    // 539
}                                                                                                                      // 540
                                                                                                                       // 541
function stopWatchingForChangeEventIE8() {                                                                             // 542
  if (!activeElement) {                                                                                                // 543
    return;                                                                                                            // 544
  }                                                                                                                    // 545
  activeElement.detachEvent('onchange', manualDispatchChangeEvent);                                                    // 546
  activeElement = null;                                                                                                // 547
  activeElementID = null;                                                                                              // 548
}                                                                                                                      // 549
                                                                                                                       // 550
function getTargetIDForChangeEvent(                                                                                    // 551
    topLevelType,                                                                                                      // 552
    topLevelTarget,                                                                                                    // 553
    topLevelTargetID) {                                                                                                // 554
  if (topLevelType === topLevelTypes.topChange) {                                                                      // 555
    return topLevelTargetID;                                                                                           // 556
  }                                                                                                                    // 557
}                                                                                                                      // 558
function handleEventsForChangeEventIE8(                                                                                // 559
    topLevelType,                                                                                                      // 560
    topLevelTarget,                                                                                                    // 561
    topLevelTargetID) {                                                                                                // 562
  if (topLevelType === topLevelTypes.topFocus) {                                                                       // 563
    // stopWatching() should be a noop here but we call it just in case we                                             // 564
    // missed a blur event somehow.                                                                                    // 565
    stopWatchingForChangeEventIE8();                                                                                   // 566
    startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);                                                  // 567
  } else if (topLevelType === topLevelTypes.topBlur) {                                                                 // 568
    stopWatchingForChangeEventIE8();                                                                                   // 569
  }                                                                                                                    // 570
}                                                                                                                      // 571
                                                                                                                       // 572
                                                                                                                       // 573
/**                                                                                                                    // 574
 * SECTION: handle `input` event                                                                                       // 575
 */                                                                                                                    // 576
var isInputEventSupported = false;                                                                                     // 577
if (ExecutionEnvironment.canUseDOM) {                                                                                  // 578
  // IE9 claims to support the input event but fails to trigger it when                                                // 579
  // deleting text, so we ignore its input events                                                                      // 580
  isInputEventSupported = isEventSupported('input') && (                                                               // 581
    !('documentMode' in document) || document.documentMode > 9                                                         // 582
  );                                                                                                                   // 583
}                                                                                                                      // 584
                                                                                                                       // 585
/**                                                                                                                    // 586
 * (For old IE.) Replacement getter/setter for the `value` property that gets                                          // 587
 * set on the active element.                                                                                          // 588
 */                                                                                                                    // 589
var newValueProp =  {                                                                                                  // 590
  get: function() {                                                                                                    // 591
    return activeElementValueProp.get.call(this);                                                                      // 592
  },                                                                                                                   // 593
  set: function(val) {                                                                                                 // 594
    // Cast to a string so we can do equality checks.                                                                  // 595
    activeElementValue = '' + val;                                                                                     // 596
    activeElementValueProp.set.call(this, val);                                                                        // 597
  }                                                                                                                    // 598
};                                                                                                                     // 599
                                                                                                                       // 600
/**                                                                                                                    // 601
 * (For old IE.) Starts tracking propertychange events on the passed-in element                                        // 602
 * and override the value property so that we can distinguish user events from                                         // 603
 * value changes in JS.                                                                                                // 604
 */                                                                                                                    // 605
function startWatchingForValueChange(target, targetID) {                                                               // 606
  activeElement = target;                                                                                              // 607
  activeElementID = targetID;                                                                                          // 608
  activeElementValue = target.value;                                                                                   // 609
  activeElementValueProp = Object.getOwnPropertyDescriptor(                                                            // 610
    target.constructor.prototype,                                                                                      // 611
    'value'                                                                                                            // 612
  );                                                                                                                   // 613
                                                                                                                       // 614
  Object.defineProperty(activeElement, 'value', newValueProp);                                                         // 615
  activeElement.attachEvent('onpropertychange', handlePropertyChange);                                                 // 616
}                                                                                                                      // 617
                                                                                                                       // 618
/**                                                                                                                    // 619
 * (For old IE.) Removes the event listeners from the currently-tracked element,                                       // 620
 * if any exists.                                                                                                      // 621
 */                                                                                                                    // 622
function stopWatchingForValueChange() {                                                                                // 623
  if (!activeElement) {                                                                                                // 624
    return;                                                                                                            // 625
  }                                                                                                                    // 626
                                                                                                                       // 627
  // delete restores the original property definition                                                                  // 628
  delete activeElement.value;                                                                                          // 629
  activeElement.detachEvent('onpropertychange', handlePropertyChange);                                                 // 630
                                                                                                                       // 631
  activeElement = null;                                                                                                // 632
  activeElementID = null;                                                                                              // 633
  activeElementValue = null;                                                                                           // 634
  activeElementValueProp = null;                                                                                       // 635
}                                                                                                                      // 636
                                                                                                                       // 637
/**                                                                                                                    // 638
 * (For old IE.) Handles a propertychange event, sending a `change` event if                                           // 639
 * the value of the active element has changed.                                                                        // 640
 */                                                                                                                    // 641
function handlePropertyChange(nativeEvent) {                                                                           // 642
  if (nativeEvent.propertyName !== 'value') {                                                                          // 643
    return;                                                                                                            // 644
  }                                                                                                                    // 645
  var value = nativeEvent.srcElement.value;                                                                            // 646
  if (value === activeElementValue) {                                                                                  // 647
    return;                                                                                                            // 648
  }                                                                                                                    // 649
  activeElementValue = value;                                                                                          // 650
                                                                                                                       // 651
  manualDispatchChangeEvent(nativeEvent);                                                                              // 652
}                                                                                                                      // 653
                                                                                                                       // 654
/**                                                                                                                    // 655
 * If a `change` event should be fired, returns the target's ID.                                                       // 656
 */                                                                                                                    // 657
function getTargetIDForInputEvent(                                                                                     // 658
    topLevelType,                                                                                                      // 659
    topLevelTarget,                                                                                                    // 660
    topLevelTargetID) {                                                                                                // 661
  if (topLevelType === topLevelTypes.topInput) {                                                                       // 662
    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly                                           // 663
    // what we want so fall through here and trigger an abstract event                                                 // 664
    return topLevelTargetID;                                                                                           // 665
  }                                                                                                                    // 666
}                                                                                                                      // 667
                                                                                                                       // 668
// For IE8 and IE9.                                                                                                    // 669
function handleEventsForInputEventIE(                                                                                  // 670
    topLevelType,                                                                                                      // 671
    topLevelTarget,                                                                                                    // 672
    topLevelTargetID) {                                                                                                // 673
  if (topLevelType === topLevelTypes.topFocus) {                                                                       // 674
    // In IE8, we can capture almost all .value changes by adding a                                                    // 675
    // propertychange handler and looking for events with propertyName                                                 // 676
    // equal to 'value'                                                                                                // 677
    // In IE9, propertychange fires for most input events but is buggy and                                             // 678
    // doesn't fire when text is deleted, but conveniently, selectionchange                                            // 679
    // appears to fire in all of the remaining cases so we catch those and                                             // 680
    // forward the event if the value has changed                                                                      // 681
    // In either case, we don't want to call the event handler if the value                                            // 682
    // is changed from JS so we redefine a setter for `.value` that updates                                            // 683
    // our activeElementValue variable, allowing us to ignore those changes                                            // 684
    //                                                                                                                 // 685
    // stopWatching() should be a noop here but we call it just in case we                                             // 686
    // missed a blur event somehow.                                                                                    // 687
    stopWatchingForValueChange();                                                                                      // 688
    startWatchingForValueChange(topLevelTarget, topLevelTargetID);                                                     // 689
  } else if (topLevelType === topLevelTypes.topBlur) {                                                                 // 690
    stopWatchingForValueChange();                                                                                      // 691
  }                                                                                                                    // 692
}                                                                                                                      // 693
                                                                                                                       // 694
// For IE8 and IE9.                                                                                                    // 695
function getTargetIDForInputEventIE(                                                                                   // 696
    topLevelType,                                                                                                      // 697
    topLevelTarget,                                                                                                    // 698
    topLevelTargetID) {                                                                                                // 699
  if (topLevelType === topLevelTypes.topSelectionChange ||                                                             // 700
      topLevelType === topLevelTypes.topKeyUp ||                                                                       // 701
      topLevelType === topLevelTypes.topKeyDown) {                                                                     // 702
    // On the selectionchange event, the target is just document which isn't                                           // 703
    // helpful for us so just check activeElement instead.                                                             // 704
    //                                                                                                                 // 705
    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire                                          // 706
    // propertychange on the first input event after setting `value` from a                                            // 707
    // script and fires only keydown, keypress, keyup. Catching keyup usually                                          // 708
    // gets it and catching keydown lets us fire an event for the first                                                // 709
    // keystroke if user does a key repeat (it'll be a little delayed: right                                           // 710
    // before the second keystroke). Other input methods (e.g., paste) seem to                                         // 711
    // fire selectionchange normally.                                                                                  // 712
    if (activeElement && activeElement.value !== activeElementValue) {                                                 // 713
      activeElementValue = activeElement.value;                                                                        // 714
      return activeElementID;                                                                                          // 715
    }                                                                                                                  // 716
  }                                                                                                                    // 717
}                                                                                                                      // 718
                                                                                                                       // 719
                                                                                                                       // 720
/**                                                                                                                    // 721
 * SECTION: handle `click` event                                                                                       // 722
 */                                                                                                                    // 723
function shouldUseClickEvent(elem) {                                                                                   // 724
  // Use the `click` event to detect changes to checkbox and radio inputs.                                             // 725
  // This approach works across all browsers, whereas `change` does not fire                                           // 726
  // until `blur` in IE8.                                                                                              // 727
  return (                                                                                                             // 728
    elem.nodeName === 'INPUT' &&                                                                                       // 729
    (elem.type === 'checkbox' || elem.type === 'radio')                                                                // 730
  );                                                                                                                   // 731
}                                                                                                                      // 732
                                                                                                                       // 733
function getTargetIDForClickEvent(                                                                                     // 734
    topLevelType,                                                                                                      // 735
    topLevelTarget,                                                                                                    // 736
    topLevelTargetID) {                                                                                                // 737
  if (topLevelType === topLevelTypes.topClick) {                                                                       // 738
    return topLevelTargetID;                                                                                           // 739
  }                                                                                                                    // 740
}                                                                                                                      // 741
                                                                                                                       // 742
/**                                                                                                                    // 743
 * This plugin creates an `onChange` event that normalizes change events                                               // 744
 * across form elements. This event fires at a time when it's possible to                                              // 745
 * change the element's value without seeing a flicker.                                                                // 746
 *                                                                                                                     // 747
 * Supported elements are:                                                                                             // 748
 * - input (see `isTextInputElement`)                                                                                  // 749
 * - textarea                                                                                                          // 750
 * - select                                                                                                            // 751
 */                                                                                                                    // 752
var ChangeEventPlugin = {                                                                                              // 753
                                                                                                                       // 754
  eventTypes: eventTypes,                                                                                              // 755
                                                                                                                       // 756
  /**                                                                                                                  // 757
   * @param {string} topLevelType Record from `EventConstants`.                                                        // 758
   * @param {DOMEventTarget} topLevelTarget The listening component root node.                                         // 759
   * @param {string} topLevelTargetID ID of `topLevelTarget`.                                                          // 760
   * @param {object} nativeEvent Native browser event.                                                                 // 761
   * @return {*} An accumulation of synthetic events.                                                                  // 762
   * @see {EventPluginHub.extractEvents}                                                                               // 763
   */                                                                                                                  // 764
  extractEvents: function(                                                                                             // 765
      topLevelType,                                                                                                    // 766
      topLevelTarget,                                                                                                  // 767
      topLevelTargetID,                                                                                                // 768
      nativeEvent) {                                                                                                   // 769
                                                                                                                       // 770
    var getTargetIDFunc, handleEventFunc;                                                                              // 771
    if (shouldUseChangeEvent(topLevelTarget)) {                                                                        // 772
      if (doesChangeEventBubble) {                                                                                     // 773
        getTargetIDFunc = getTargetIDForChangeEvent;                                                                   // 774
      } else {                                                                                                         // 775
        handleEventFunc = handleEventsForChangeEventIE8;                                                               // 776
      }                                                                                                                // 777
    } else if (isTextInputElement(topLevelTarget)) {                                                                   // 778
      if (isInputEventSupported) {                                                                                     // 779
        getTargetIDFunc = getTargetIDForInputEvent;                                                                    // 780
      } else {                                                                                                         // 781
        getTargetIDFunc = getTargetIDForInputEventIE;                                                                  // 782
        handleEventFunc = handleEventsForInputEventIE;                                                                 // 783
      }                                                                                                                // 784
    } else if (shouldUseClickEvent(topLevelTarget)) {                                                                  // 785
      getTargetIDFunc = getTargetIDForClickEvent;                                                                      // 786
    }                                                                                                                  // 787
                                                                                                                       // 788
    if (getTargetIDFunc) {                                                                                             // 789
      var targetID = getTargetIDFunc(                                                                                  // 790
        topLevelType,                                                                                                  // 791
        topLevelTarget,                                                                                                // 792
        topLevelTargetID                                                                                               // 793
      );                                                                                                               // 794
      if (targetID) {                                                                                                  // 795
        var event = SyntheticEvent.getPooled(                                                                          // 796
          eventTypes.change,                                                                                           // 797
          targetID,                                                                                                    // 798
          nativeEvent                                                                                                  // 799
        );                                                                                                             // 800
        EventPropagators.accumulateTwoPhaseDispatches(event);                                                          // 801
        return event;                                                                                                  // 802
      }                                                                                                                // 803
    }                                                                                                                  // 804
                                                                                                                       // 805
    if (handleEventFunc) {                                                                                             // 806
      handleEventFunc(                                                                                                 // 807
        topLevelType,                                                                                                  // 808
        topLevelTarget,                                                                                                // 809
        topLevelTargetID                                                                                               // 810
      );                                                                                                               // 811
    }                                                                                                                  // 812
  }                                                                                                                    // 813
                                                                                                                       // 814
};                                                                                                                     // 815
                                                                                                                       // 816
module.exports = ChangeEventPlugin;                                                                                    // 817
                                                                                                                       // 818
},{"./EventConstants":15,"./EventPluginHub":17,"./EventPropagators":20,"./ExecutionEnvironment":21,"./SyntheticEvent":76,"./isEventSupported":110,"./isTextInputElement":112,"./keyOf":116}],7:[function(require,module,exports){
/**                                                                                                                    // 820
 * Copyright 2013 Facebook, Inc.                                                                                       // 821
 *                                                                                                                     // 822
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 823
 * you may not use this file except in compliance with the License.                                                    // 824
 * You may obtain a copy of the License at                                                                             // 825
 *                                                                                                                     // 826
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 827
 *                                                                                                                     // 828
 * Unless required by applicable law or agreed to in writing, software                                                 // 829
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 830
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 831
 * See the License for the specific language governing permissions and                                                 // 832
 * limitations under the License.                                                                                      // 833
 *                                                                                                                     // 834
 * @providesModule CompositionEventPlugin                                                                              // 835
 * @typechecks static-only                                                                                             // 836
 */                                                                                                                    // 837
                                                                                                                       // 838
"use strict";                                                                                                          // 839
                                                                                                                       // 840
var EventConstants = require("./EventConstants");                                                                      // 841
var EventPropagators = require("./EventPropagators");                                                                  // 842
var ExecutionEnvironment = require("./ExecutionEnvironment");                                                          // 843
var ReactInputSelection = require("./ReactInputSelection");                                                            // 844
var SyntheticCompositionEvent = require("./SyntheticCompositionEvent");                                                // 845
                                                                                                                       // 846
var getTextContentAccessor = require("./getTextContentAccessor");                                                      // 847
var keyOf = require("./keyOf");                                                                                        // 848
                                                                                                                       // 849
var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space                                                         // 850
var START_KEYCODE = 229;                                                                                               // 851
                                                                                                                       // 852
var useCompositionEvent = ExecutionEnvironment.canUseDOM &&                                                            // 853
  'CompositionEvent' in window;                                                                                        // 854
var topLevelTypes = EventConstants.topLevelTypes;                                                                      // 855
var currentComposition = null;                                                                                         // 856
                                                                                                                       // 857
// Events and their corresponding property names.                                                                      // 858
var eventTypes = {                                                                                                     // 859
  compositionEnd: {                                                                                                    // 860
    phasedRegistrationNames: {                                                                                         // 861
      bubbled: keyOf({onCompositionEnd: null}),                                                                        // 862
      captured: keyOf({onCompositionEndCapture: null})                                                                 // 863
    }                                                                                                                  // 864
  },                                                                                                                   // 865
  compositionStart: {                                                                                                  // 866
    phasedRegistrationNames: {                                                                                         // 867
      bubbled: keyOf({onCompositionStart: null}),                                                                      // 868
      captured: keyOf({onCompositionStartCapture: null})                                                               // 869
    }                                                                                                                  // 870
  },                                                                                                                   // 871
  compositionUpdate: {                                                                                                 // 872
    phasedRegistrationNames: {                                                                                         // 873
      bubbled: keyOf({onCompositionUpdate: null}),                                                                     // 874
      captured: keyOf({onCompositionUpdateCapture: null})                                                              // 875
    }                                                                                                                  // 876
  }                                                                                                                    // 877
};                                                                                                                     // 878
                                                                                                                       // 879
/**                                                                                                                    // 880
 * Translate native top level events into event types.                                                                 // 881
 *                                                                                                                     // 882
 * @param {string} topLevelType                                                                                        // 883
 * @return {object}                                                                                                    // 884
 */                                                                                                                    // 885
function getCompositionEventType(topLevelType) {                                                                       // 886
  switch (topLevelType) {                                                                                              // 887
    case topLevelTypes.topCompositionStart:                                                                            // 888
      return eventTypes.compositionStart;                                                                              // 889
    case topLevelTypes.topCompositionEnd:                                                                              // 890
      return eventTypes.compositionEnd;                                                                                // 891
    case topLevelTypes.topCompositionUpdate:                                                                           // 892
      return eventTypes.compositionUpdate;                                                                             // 893
  }                                                                                                                    // 894
}                                                                                                                      // 895
                                                                                                                       // 896
/**                                                                                                                    // 897
 * Does our fallback best-guess model think this event signifies that                                                  // 898
 * composition has begun?                                                                                              // 899
 *                                                                                                                     // 900
 * @param {string} topLevelType                                                                                        // 901
 * @param {object} nativeEvent                                                                                         // 902
 * @return {boolean}                                                                                                   // 903
 */                                                                                                                    // 904
function isFallbackStart(topLevelType, nativeEvent) {                                                                  // 905
  return (                                                                                                             // 906
    topLevelType === topLevelTypes.topKeyDown &&                                                                       // 907
    nativeEvent.keyCode === START_KEYCODE                                                                              // 908
  );                                                                                                                   // 909
}                                                                                                                      // 910
                                                                                                                       // 911
/**                                                                                                                    // 912
 * Does our fallback mode think that this event is the end of composition?                                             // 913
 *                                                                                                                     // 914
 * @param {string} topLevelType                                                                                        // 915
 * @param {object} nativeEvent                                                                                         // 916
 * @return {boolean}                                                                                                   // 917
 */                                                                                                                    // 918
function isFallbackEnd(topLevelType, nativeEvent) {                                                                    // 919
  switch (topLevelType) {                                                                                              // 920
    case topLevelTypes.topKeyUp:                                                                                       // 921
      // Command keys insert or clear IME input.                                                                       // 922
      return (END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1);                                                       // 923
    case topLevelTypes.topKeyDown:                                                                                     // 924
      // Expect IME keyCode on each keydown. If we get any other                                                       // 925
      // code we must have exited earlier.                                                                             // 926
      return (nativeEvent.keyCode !== START_KEYCODE);                                                                  // 927
    case topLevelTypes.topKeyPress:                                                                                    // 928
    case topLevelTypes.topMouseDown:                                                                                   // 929
    case topLevelTypes.topBlur:                                                                                        // 930
      // Events are not possible without cancelling IME.                                                               // 931
      return true;                                                                                                     // 932
    default:                                                                                                           // 933
      return false;                                                                                                    // 934
  }                                                                                                                    // 935
}                                                                                                                      // 936
                                                                                                                       // 937
/**                                                                                                                    // 938
 * Helper class stores information about selection and document state                                                  // 939
 * so we can figure out what changed at a later date.                                                                  // 940
 *                                                                                                                     // 941
 * @param {DOMEventTarget} root                                                                                        // 942
 */                                                                                                                    // 943
function FallbackCompositionState(root) {                                                                              // 944
  this.root = root;                                                                                                    // 945
  this.startSelection = ReactInputSelection.getSelection(root);                                                        // 946
  this.startValue = this.getText();                                                                                    // 947
}                                                                                                                      // 948
                                                                                                                       // 949
/**                                                                                                                    // 950
 * Get current text of input.                                                                                          // 951
 *                                                                                                                     // 952
 * @return {string}                                                                                                    // 953
 */                                                                                                                    // 954
FallbackCompositionState.prototype.getText = function() {                                                              // 955
  return this.root.value || this.root[getTextContentAccessor()];                                                       // 956
};                                                                                                                     // 957
                                                                                                                       // 958
/**                                                                                                                    // 959
 * Text that has changed since the start of composition.                                                               // 960
 *                                                                                                                     // 961
 * @return {string}                                                                                                    // 962
 */                                                                                                                    // 963
FallbackCompositionState.prototype.getData = function() {                                                              // 964
  var endValue = this.getText();                                                                                       // 965
  var prefixLength = this.startSelection.start;                                                                        // 966
  var suffixLength = this.startValue.length - this.startSelection.end;                                                 // 967
                                                                                                                       // 968
  return endValue.substr(                                                                                              // 969
    prefixLength,                                                                                                      // 970
    endValue.length - suffixLength - prefixLength                                                                      // 971
  );                                                                                                                   // 972
};                                                                                                                     // 973
                                                                                                                       // 974
/**                                                                                                                    // 975
 * This plugin creates `onCompositionStart`, `onCompositionUpdate` and                                                 // 976
 * `onCompositionEnd` events on inputs, textareas and contentEditable                                                  // 977
 * nodes.                                                                                                              // 978
 */                                                                                                                    // 979
var CompositionEventPlugin = {                                                                                         // 980
                                                                                                                       // 981
  eventTypes: eventTypes,                                                                                              // 982
                                                                                                                       // 983
  /**                                                                                                                  // 984
   * @param {string} topLevelType Record from `EventConstants`.                                                        // 985
   * @param {DOMEventTarget} topLevelTarget The listening component root node.                                         // 986
   * @param {string} topLevelTargetID ID of `topLevelTarget`.                                                          // 987
   * @param {object} nativeEvent Native browser event.                                                                 // 988
   * @return {*} An accumulation of synthetic events.                                                                  // 989
   * @see {EventPluginHub.extractEvents}                                                                               // 990
   */                                                                                                                  // 991
  extractEvents: function(                                                                                             // 992
      topLevelType,                                                                                                    // 993
      topLevelTarget,                                                                                                  // 994
      topLevelTargetID,                                                                                                // 995
      nativeEvent) {                                                                                                   // 996
                                                                                                                       // 997
    var eventType;                                                                                                     // 998
    var data;                                                                                                          // 999
                                                                                                                       // 1000
    if (useCompositionEvent) {                                                                                         // 1001
      eventType = getCompositionEventType(topLevelType);                                                               // 1002
    } else if (!currentComposition) {                                                                                  // 1003
      if (isFallbackStart(topLevelType, nativeEvent)) {                                                                // 1004
        eventType = eventTypes.start;                                                                                  // 1005
        currentComposition = new FallbackCompositionState(topLevelTarget);                                             // 1006
      }                                                                                                                // 1007
    } else if (isFallbackEnd(topLevelType, nativeEvent)) {                                                             // 1008
      eventType = eventTypes.compositionEnd;                                                                           // 1009
      data = currentComposition.getData();                                                                             // 1010
      currentComposition = null;                                                                                       // 1011
    }                                                                                                                  // 1012
                                                                                                                       // 1013
    if (eventType) {                                                                                                   // 1014
      var event = SyntheticCompositionEvent.getPooled(                                                                 // 1015
        eventType,                                                                                                     // 1016
        topLevelTargetID,                                                                                              // 1017
        nativeEvent                                                                                                    // 1018
      );                                                                                                               // 1019
      if (data) {                                                                                                      // 1020
        // Inject data generated from fallback path into the synthetic event.                                          // 1021
        // This matches the property of native CompositionEventInterface.                                              // 1022
        event.data = data;                                                                                             // 1023
      }                                                                                                                // 1024
      EventPropagators.accumulateTwoPhaseDispatches(event);                                                            // 1025
      return event;                                                                                                    // 1026
    }                                                                                                                  // 1027
  }                                                                                                                    // 1028
};                                                                                                                     // 1029
                                                                                                                       // 1030
module.exports = CompositionEventPlugin;                                                                               // 1031
                                                                                                                       // 1032
},{"./EventConstants":15,"./EventPropagators":20,"./ExecutionEnvironment":21,"./ReactInputSelection":50,"./SyntheticCompositionEvent":75,"./getTextContentAccessor":106,"./keyOf":116}],8:[function(require,module,exports){
/**                                                                                                                    // 1034
 * Copyright 2013 Facebook, Inc.                                                                                       // 1035
 *                                                                                                                     // 1036
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 1037
 * you may not use this file except in compliance with the License.                                                    // 1038
 * You may obtain a copy of the License at                                                                             // 1039
 *                                                                                                                     // 1040
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 1041
 *                                                                                                                     // 1042
 * Unless required by applicable law or agreed to in writing, software                                                 // 1043
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 1044
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 1045
 * See the License for the specific language governing permissions and                                                 // 1046
 * limitations under the License.                                                                                      // 1047
 *                                                                                                                     // 1048
 * @providesModule DOMChildrenOperations                                                                               // 1049
 * @typechecks static-only                                                                                             // 1050
 */                                                                                                                    // 1051
                                                                                                                       // 1052
"use strict";                                                                                                          // 1053
                                                                                                                       // 1054
var Danger = require("./Danger");                                                                                      // 1055
var ReactMultiChildUpdateTypes = require("./ReactMultiChildUpdateTypes");                                              // 1056
                                                                                                                       // 1057
var getTextContentAccessor = require("./getTextContentAccessor");                                                      // 1058
                                                                                                                       // 1059
/**                                                                                                                    // 1060
 * The DOM property to use when setting text content.                                                                  // 1061
 *                                                                                                                     // 1062
 * @type {string}                                                                                                      // 1063
 * @private                                                                                                            // 1064
 */                                                                                                                    // 1065
var textContentAccessor = getTextContentAccessor() || 'NA';                                                            // 1066
                                                                                                                       // 1067
/**                                                                                                                    // 1068
 * Inserts `childNode` as a child of `parentNode` at the `index`.                                                      // 1069
 *                                                                                                                     // 1070
 * @param {DOMElement} parentNode Parent node in which to insert.                                                      // 1071
 * @param {DOMElement} childNode Child node to insert.                                                                 // 1072
 * @param {number} index Index at which to insert the child.                                                           // 1073
 * @internal                                                                                                           // 1074
 */                                                                                                                    // 1075
function insertChildAt(parentNode, childNode, index) {                                                                 // 1076
  var childNodes = parentNode.childNodes;                                                                              // 1077
  if (childNodes[index] === childNode) {                                                                               // 1078
    return;                                                                                                            // 1079
  }                                                                                                                    // 1080
  // If `childNode` is already a child of `parentNode`, remove it so that                                              // 1081
  // computing `childNodes[index]` takes into account the removal.                                                     // 1082
  if (childNode.parentNode === parentNode) {                                                                           // 1083
    parentNode.removeChild(childNode);                                                                                 // 1084
  }                                                                                                                    // 1085
  if (index >= childNodes.length) {                                                                                    // 1086
    parentNode.appendChild(childNode);                                                                                 // 1087
  } else {                                                                                                             // 1088
    parentNode.insertBefore(childNode, childNodes[index]);                                                             // 1089
  }                                                                                                                    // 1090
}                                                                                                                      // 1091
                                                                                                                       // 1092
/**                                                                                                                    // 1093
 * Operations for updating with DOM children.                                                                          // 1094
 */                                                                                                                    // 1095
var DOMChildrenOperations = {                                                                                          // 1096
                                                                                                                       // 1097
  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,                                           // 1098
                                                                                                                       // 1099
  /**                                                                                                                  // 1100
   * Updates a component's children by processing a series of updates. The                                             // 1101
   * update configurations are each expected to have a `parentNode` property.                                          // 1102
   *                                                                                                                   // 1103
   * @param {array<object>} updates List of update configurations.                                                     // 1104
   * @param {array<string>} markupList List of markup strings.                                                         // 1105
   * @internal                                                                                                         // 1106
   */                                                                                                                  // 1107
  processUpdates: function(updates, markupList) {                                                                      // 1108
    var update;                                                                                                        // 1109
    // Mapping from parent IDs to initial child orderings.                                                             // 1110
    var initialChildren = null;                                                                                        // 1111
    // List of children that will be moved or removed.                                                                 // 1112
    var updatedChildren = null;                                                                                        // 1113
                                                                                                                       // 1114
    for (var i = 0; update = updates[i]; i++) {                                                                        // 1115
      if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING ||                                                  // 1116
          update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {                                                    // 1117
        var updatedIndex = update.fromIndex;                                                                           // 1118
        var updatedChild = update.parentNode.childNodes[updatedIndex];                                                 // 1119
        var parentID = update.parentID;                                                                                // 1120
                                                                                                                       // 1121
        initialChildren = initialChildren || {};                                                                       // 1122
        initialChildren[parentID] = initialChildren[parentID] || [];                                                   // 1123
        initialChildren[parentID][updatedIndex] = updatedChild;                                                        // 1124
                                                                                                                       // 1125
        updatedChildren = updatedChildren || [];                                                                       // 1126
        updatedChildren.push(updatedChild);                                                                            // 1127
      }                                                                                                                // 1128
    }                                                                                                                  // 1129
                                                                                                                       // 1130
    var renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);                                                   // 1131
                                                                                                                       // 1132
    // Remove updated children first so that `toIndex` is consistent.                                                  // 1133
    if (updatedChildren) {                                                                                             // 1134
      for (var j = 0; j < updatedChildren.length; j++) {                                                               // 1135
        updatedChildren[j].parentNode.removeChild(updatedChildren[j]);                                                 // 1136
      }                                                                                                                // 1137
    }                                                                                                                  // 1138
                                                                                                                       // 1139
    for (var k = 0; update = updates[k]; k++) {                                                                        // 1140
      switch (update.type) {                                                                                           // 1141
        case ReactMultiChildUpdateTypes.INSERT_MARKUP:                                                                 // 1142
          insertChildAt(                                                                                               // 1143
            update.parentNode,                                                                                         // 1144
            renderedMarkup[update.markupIndex],                                                                        // 1145
            update.toIndex                                                                                             // 1146
          );                                                                                                           // 1147
          break;                                                                                                       // 1148
        case ReactMultiChildUpdateTypes.MOVE_EXISTING:                                                                 // 1149
          insertChildAt(                                                                                               // 1150
            update.parentNode,                                                                                         // 1151
            initialChildren[update.parentID][update.fromIndex],                                                        // 1152
            update.toIndex                                                                                             // 1153
          );                                                                                                           // 1154
          break;                                                                                                       // 1155
        case ReactMultiChildUpdateTypes.TEXT_CONTENT:                                                                  // 1156
          update.parentNode[textContentAccessor] = update.textContent;                                                 // 1157
          break;                                                                                                       // 1158
        case ReactMultiChildUpdateTypes.REMOVE_NODE:                                                                   // 1159
          // Already removed by the for-loop above.                                                                    // 1160
          break;                                                                                                       // 1161
      }                                                                                                                // 1162
    }                                                                                                                  // 1163
  }                                                                                                                    // 1164
                                                                                                                       // 1165
};                                                                                                                     // 1166
                                                                                                                       // 1167
module.exports = DOMChildrenOperations;                                                                                // 1168
                                                                                                                       // 1169
},{"./Danger":11,"./ReactMultiChildUpdateTypes":57,"./getTextContentAccessor":106}],9:[function(require,module,exports){
/**                                                                                                                    // 1171
 * Copyright 2013 Facebook, Inc.                                                                                       // 1172
 *                                                                                                                     // 1173
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 1174
 * you may not use this file except in compliance with the License.                                                    // 1175
 * You may obtain a copy of the License at                                                                             // 1176
 *                                                                                                                     // 1177
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 1178
 *                                                                                                                     // 1179
 * Unless required by applicable law or agreed to in writing, software                                                 // 1180
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 1181
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 1182
 * See the License for the specific language governing permissions and                                                 // 1183
 * limitations under the License.                                                                                      // 1184
 *                                                                                                                     // 1185
 * @providesModule DOMProperty                                                                                         // 1186
 * @typechecks static-only                                                                                             // 1187
 */                                                                                                                    // 1188
                                                                                                                       // 1189
/*jslint bitwise: true */                                                                                              // 1190
                                                                                                                       // 1191
"use strict";                                                                                                          // 1192
                                                                                                                       // 1193
var invariant = require("./invariant");                                                                                // 1194
                                                                                                                       // 1195
var DOMPropertyInjection = {                                                                                           // 1196
  /**                                                                                                                  // 1197
   * Mapping from normalized, camelcased property names to a configuration that                                        // 1198
   * specifies how the associated DOM property should be accessed or rendered.                                         // 1199
   */                                                                                                                  // 1200
  MUST_USE_ATTRIBUTE: 0x1,                                                                                             // 1201
  MUST_USE_PROPERTY: 0x2,                                                                                              // 1202
  HAS_SIDE_EFFECTS: 0x4,                                                                                               // 1203
  HAS_BOOLEAN_VALUE: 0x8,                                                                                              // 1204
  HAS_POSITIVE_NUMERIC_VALUE: 0x10,                                                                                    // 1205
                                                                                                                       // 1206
  /**                                                                                                                  // 1207
   * Inject some specialized knowledge about the DOM. This takes a config object                                       // 1208
   * with the following properties:                                                                                    // 1209
   *                                                                                                                   // 1210
   * isCustomAttribute: function that given an attribute name will return true                                         // 1211
   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*                                          // 1212
   * attributes where it's impossible to enumerate all of the possible                                                 // 1213
   * attribute names,                                                                                                  // 1214
   *                                                                                                                   // 1215
   * Properties: object mapping DOM property name to one of the                                                        // 1216
   * DOMPropertyInjection constants or null. If your attribute isn't in here,                                          // 1217
   * it won't get written to the DOM.                                                                                  // 1218
   *                                                                                                                   // 1219
   * DOMAttributeNames: object mapping React attribute name to the DOM                                                 // 1220
   * attribute name. Attribute names not specified use the **lowercase**                                               // 1221
   * normalized name.                                                                                                  // 1222
   *                                                                                                                   // 1223
   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.                                            // 1224
   * Property names not specified use the normalized name.                                                             // 1225
   *                                                                                                                   // 1226
   * DOMMutationMethods: Properties that require special mutation methods. If                                          // 1227
   * `value` is undefined, the mutation method should unset the property.                                              // 1228
   *                                                                                                                   // 1229
   * @param {object} domPropertyConfig the config as described above.                                                  // 1230
   */                                                                                                                  // 1231
  injectDOMPropertyConfig: function(domPropertyConfig) {                                                               // 1232
    var Properties = domPropertyConfig.Properties || {};                                                               // 1233
    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};                                                 // 1234
    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};                                                   // 1235
    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};                                               // 1236
                                                                                                                       // 1237
    if (domPropertyConfig.isCustomAttribute) {                                                                         // 1238
      DOMProperty._isCustomAttributeFunctions.push(                                                                    // 1239
        domPropertyConfig.isCustomAttribute                                                                            // 1240
      );                                                                                                               // 1241
    }                                                                                                                  // 1242
                                                                                                                       // 1243
    for (var propName in Properties) {                                                                                 // 1244
      ("production" !== "development" ? invariant(                                                                     // 1245
        !DOMProperty.isStandardName[propName],                                                                         // 1246
        'injectDOMPropertyConfig(...): You\'re trying to inject DOM property ' +                                       // 1247
        '\'%s\' which has already been injected. You may be accidentally ' +                                           // 1248
        'injecting the same DOM property config twice, or you may be ' +                                               // 1249
        'injecting two configs that have conflicting property names.',                                                 // 1250
        propName                                                                                                       // 1251
      ) : invariant(!DOMProperty.isStandardName[propName]));                                                           // 1252
                                                                                                                       // 1253
      DOMProperty.isStandardName[propName] = true;                                                                     // 1254
                                                                                                                       // 1255
      var lowerCased = propName.toLowerCase();                                                                         // 1256
      DOMProperty.getPossibleStandardName[lowerCased] = propName;                                                      // 1257
                                                                                                                       // 1258
      var attributeName = DOMAttributeNames[propName];                                                                 // 1259
      if (attributeName) {                                                                                             // 1260
        DOMProperty.getPossibleStandardName[attributeName] = propName;                                                 // 1261
      }                                                                                                                // 1262
                                                                                                                       // 1263
      DOMProperty.getAttributeName[propName] = attributeName || lowerCased;                                            // 1264
                                                                                                                       // 1265
      DOMProperty.getPropertyName[propName] =                                                                          // 1266
        DOMPropertyNames[propName] || propName;                                                                        // 1267
                                                                                                                       // 1268
      var mutationMethod = DOMMutationMethods[propName];                                                               // 1269
      if (mutationMethod) {                                                                                            // 1270
        DOMProperty.getMutationMethod[propName] = mutationMethod;                                                      // 1271
      }                                                                                                                // 1272
                                                                                                                       // 1273
      var propConfig = Properties[propName];                                                                           // 1274
      DOMProperty.mustUseAttribute[propName] =                                                                         // 1275
        propConfig & DOMPropertyInjection.MUST_USE_ATTRIBUTE;                                                          // 1276
      DOMProperty.mustUseProperty[propName] =                                                                          // 1277
        propConfig & DOMPropertyInjection.MUST_USE_PROPERTY;                                                           // 1278
      DOMProperty.hasSideEffects[propName] =                                                                           // 1279
        propConfig & DOMPropertyInjection.HAS_SIDE_EFFECTS;                                                            // 1280
      DOMProperty.hasBooleanValue[propName] =                                                                          // 1281
        propConfig & DOMPropertyInjection.HAS_BOOLEAN_VALUE;                                                           // 1282
      DOMProperty.hasPositiveNumericValue[propName] =                                                                  // 1283
        propConfig & DOMPropertyInjection.HAS_POSITIVE_NUMERIC_VALUE;                                                  // 1284
                                                                                                                       // 1285
      ("production" !== "development" ? invariant(                                                                     // 1286
        !DOMProperty.mustUseAttribute[propName] ||                                                                     // 1287
          !DOMProperty.mustUseProperty[propName],                                                                      // 1288
        'DOMProperty: Cannot require using both attribute and property: %s',                                           // 1289
        propName                                                                                                       // 1290
      ) : invariant(!DOMProperty.mustUseAttribute[propName] ||                                                         // 1291
        !DOMProperty.mustUseProperty[propName]));                                                                      // 1292
      ("production" !== "development" ? invariant(                                                                     // 1293
        DOMProperty.mustUseProperty[propName] ||                                                                       // 1294
          !DOMProperty.hasSideEffects[propName],                                                                       // 1295
        'DOMProperty: Properties that have side effects must use property: %s',                                        // 1296
        propName                                                                                                       // 1297
      ) : invariant(DOMProperty.mustUseProperty[propName] ||                                                           // 1298
        !DOMProperty.hasSideEffects[propName]));                                                                       // 1299
      ("production" !== "development" ? invariant(                                                                     // 1300
        !DOMProperty.hasBooleanValue[propName] ||                                                                      // 1301
          !DOMProperty.hasPositiveNumericValue[propName],                                                              // 1302
        'DOMProperty: Cannot have both boolean and positive numeric value: %s',                                        // 1303
        propName                                                                                                       // 1304
      ) : invariant(!DOMProperty.hasBooleanValue[propName] ||                                                          // 1305
        !DOMProperty.hasPositiveNumericValue[propName]));                                                              // 1306
    }                                                                                                                  // 1307
  }                                                                                                                    // 1308
};                                                                                                                     // 1309
var defaultValueCache = {};                                                                                            // 1310
                                                                                                                       // 1311
/**                                                                                                                    // 1312
 * DOMProperty exports lookup objects that can be used like functions:                                                 // 1313
 *                                                                                                                     // 1314
 *   > DOMProperty.isValid['id']                                                                                       // 1315
 *   true                                                                                                              // 1316
 *   > DOMProperty.isValid['foobar']                                                                                   // 1317
 *   undefined                                                                                                         // 1318
 *                                                                                                                     // 1319
 * Although this may be confusing, it performs better in general.                                                      // 1320
 *                                                                                                                     // 1321
 * @see http://jsperf.com/key-exists                                                                                   // 1322
 * @see http://jsperf.com/key-missing                                                                                  // 1323
 */                                                                                                                    // 1324
var DOMProperty = {                                                                                                    // 1325
                                                                                                                       // 1326
  /**                                                                                                                  // 1327
   * Checks whether a property name is a standard property.                                                            // 1328
   * @type {Object}                                                                                                    // 1329
   */                                                                                                                  // 1330
  isStandardName: {},                                                                                                  // 1331
                                                                                                                       // 1332
  /**                                                                                                                  // 1333
   * Mapping from lowercase property names to the properly cased version, used                                         // 1334
   * to warn in the case of missing properties.                                                                        // 1335
   * @type {Object}                                                                                                    // 1336
   */                                                                                                                  // 1337
  getPossibleStandardName: {},                                                                                         // 1338
                                                                                                                       // 1339
  /**                                                                                                                  // 1340
   * Mapping from normalized names to attribute names that differ. Attribute                                           // 1341
   * names are used when rendering markup or with `*Attribute()`.                                                      // 1342
   * @type {Object}                                                                                                    // 1343
   */                                                                                                                  // 1344
  getAttributeName: {},                                                                                                // 1345
                                                                                                                       // 1346
  /**                                                                                                                  // 1347
   * Mapping from normalized names to properties on DOM node instances.                                                // 1348
   * (This includes properties that mutate due to external factors.)                                                   // 1349
   * @type {Object}                                                                                                    // 1350
   */                                                                                                                  // 1351
  getPropertyName: {},                                                                                                 // 1352
                                                                                                                       // 1353
  /**                                                                                                                  // 1354
   * Mapping from normalized names to mutation methods. This will only exist if                                        // 1355
   * mutation cannot be set simply by the property or `setAttribute()`.                                                // 1356
   * @type {Object}                                                                                                    // 1357
   */                                                                                                                  // 1358
  getMutationMethod: {},                                                                                               // 1359
                                                                                                                       // 1360
  /**                                                                                                                  // 1361
   * Whether the property must be accessed and mutated as an object property.                                          // 1362
   * @type {Object}                                                                                                    // 1363
   */                                                                                                                  // 1364
  mustUseAttribute: {},                                                                                                // 1365
                                                                                                                       // 1366
  /**                                                                                                                  // 1367
   * Whether the property must be accessed and mutated using `*Attribute()`.                                           // 1368
   * (This includes anything that fails `<propName> in <element>`.)                                                    // 1369
   * @type {Object}                                                                                                    // 1370
   */                                                                                                                  // 1371
  mustUseProperty: {},                                                                                                 // 1372
                                                                                                                       // 1373
  /**                                                                                                                  // 1374
   * Whether or not setting a value causes side effects such as triggering                                             // 1375
   * resources to be loaded or text selection changes. We must ensure that                                             // 1376
   * the value is only set if it has changed.                                                                          // 1377
   * @type {Object}                                                                                                    // 1378
   */                                                                                                                  // 1379
  hasSideEffects: {},                                                                                                  // 1380
                                                                                                                       // 1381
  /**                                                                                                                  // 1382
   * Whether the property should be removed when set to a falsey value.                                                // 1383
   * @type {Object}                                                                                                    // 1384
   */                                                                                                                  // 1385
  hasBooleanValue: {},                                                                                                 // 1386
                                                                                                                       // 1387
  /**                                                                                                                  // 1388
   * Whether the property must be positive numeric or parse as a positive                                              // 1389
   * numeric and should be removed when set to a falsey value.                                                         // 1390
   * @type {Object}                                                                                                    // 1391
   */                                                                                                                  // 1392
  hasPositiveNumericValue: {},                                                                                         // 1393
                                                                                                                       // 1394
  /**                                                                                                                  // 1395
   * All of the isCustomAttribute() functions that have been injected.                                                 // 1396
   */                                                                                                                  // 1397
  _isCustomAttributeFunctions: [],                                                                                     // 1398
                                                                                                                       // 1399
  /**                                                                                                                  // 1400
   * Checks whether a property name is a custom attribute.                                                             // 1401
   * @method                                                                                                           // 1402
   */                                                                                                                  // 1403
  isCustomAttribute: function(attributeName) {                                                                         // 1404
    return DOMProperty._isCustomAttributeFunctions.some(                                                               // 1405
      function(isCustomAttributeFn) {                                                                                  // 1406
        return isCustomAttributeFn.call(null, attributeName);                                                          // 1407
      }                                                                                                                // 1408
    );                                                                                                                 // 1409
  },                                                                                                                   // 1410
                                                                                                                       // 1411
  /**                                                                                                                  // 1412
   * Returns the default property value for a DOM property (i.e., not an                                               // 1413
   * attribute). Most default values are '' or false, but not all. Worse yet,                                          // 1414
   * some (in particular, `type`) vary depending on the type of element.                                               // 1415
   *                                                                                                                   // 1416
   * TODO: Is it better to grab all the possible properties when creating an                                           // 1417
   * element to avoid having to create the same element twice?                                                         // 1418
   */                                                                                                                  // 1419
  getDefaultValueForProperty: function(nodeName, prop) {                                                               // 1420
    var nodeDefaults = defaultValueCache[nodeName];                                                                    // 1421
    var testElement;                                                                                                   // 1422
    if (!nodeDefaults) {                                                                                               // 1423
      defaultValueCache[nodeName] = nodeDefaults = {};                                                                 // 1424
    }                                                                                                                  // 1425
    if (!(prop in nodeDefaults)) {                                                                                     // 1426
      testElement = document.createElement(nodeName);                                                                  // 1427
      nodeDefaults[prop] = testElement[prop];                                                                          // 1428
    }                                                                                                                  // 1429
    return nodeDefaults[prop];                                                                                         // 1430
  },                                                                                                                   // 1431
                                                                                                                       // 1432
  injection: DOMPropertyInjection                                                                                      // 1433
};                                                                                                                     // 1434
                                                                                                                       // 1435
module.exports = DOMProperty;                                                                                          // 1436
                                                                                                                       // 1437
},{"./invariant":109}],10:[function(require,module,exports){                                                           // 1438
/**                                                                                                                    // 1439
 * Copyright 2013 Facebook, Inc.                                                                                       // 1440
 *                                                                                                                     // 1441
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 1442
 * you may not use this file except in compliance with the License.                                                    // 1443
 * You may obtain a copy of the License at                                                                             // 1444
 *                                                                                                                     // 1445
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 1446
 *                                                                                                                     // 1447
 * Unless required by applicable law or agreed to in writing, software                                                 // 1448
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 1449
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 1450
 * See the License for the specific language governing permissions and                                                 // 1451
 * limitations under the License.                                                                                      // 1452
 *                                                                                                                     // 1453
 * @providesModule DOMPropertyOperations                                                                               // 1454
 * @typechecks static-only                                                                                             // 1455
 */                                                                                                                    // 1456
                                                                                                                       // 1457
"use strict";                                                                                                          // 1458
                                                                                                                       // 1459
var DOMProperty = require("./DOMProperty");                                                                            // 1460
                                                                                                                       // 1461
var escapeTextForBrowser = require("./escapeTextForBrowser");                                                          // 1462
var memoizeStringOnly = require("./memoizeStringOnly");                                                                // 1463
                                                                                                                       // 1464
function shouldIgnoreValue(name, value) {                                                                              // 1465
  return value == null ||                                                                                              // 1466
    DOMProperty.hasBooleanValue[name] && !value ||                                                                     // 1467
    DOMProperty.hasPositiveNumericValue[name] && (isNaN(value) || value < 1);                                          // 1468
}                                                                                                                      // 1469
                                                                                                                       // 1470
var processAttributeNameAndPrefix = memoizeStringOnly(function(name) {                                                 // 1471
  return escapeTextForBrowser(name) + '="';                                                                            // 1472
});                                                                                                                    // 1473
                                                                                                                       // 1474
if ("production" !== "development") {                                                                                  // 1475
  var reactProps = {                                                                                                   // 1476
    __owner__: true,                                                                                                   // 1477
    children: true,                                                                                                    // 1478
    dangerouslySetInnerHTML: true,                                                                                     // 1479
    key: true,                                                                                                         // 1480
    ref: true                                                                                                          // 1481
  };                                                                                                                   // 1482
  var warnedProperties = {};                                                                                           // 1483
                                                                                                                       // 1484
  var warnUnknownProperty = function(name) {                                                                           // 1485
    if (reactProps[name] || warnedProperties[name]) {                                                                  // 1486
      return;                                                                                                          // 1487
    }                                                                                                                  // 1488
                                                                                                                       // 1489
    warnedProperties[name] = true;                                                                                     // 1490
    var lowerCasedName = name.toLowerCase();                                                                           // 1491
                                                                                                                       // 1492
    // data-* attributes should be lowercase; suggest the lowercase version                                            // 1493
    var standardName = DOMProperty.isCustomAttribute(lowerCasedName) ?                                                 // 1494
      lowerCasedName : DOMProperty.getPossibleStandardName[lowerCasedName];                                            // 1495
                                                                                                                       // 1496
    // For now, only warn when we have a suggested correction. This prevents                                           // 1497
    // logging too much when using transferPropsTo.                                                                    // 1498
    if (standardName != null) {                                                                                        // 1499
      console.warn(                                                                                                    // 1500
        'Unknown DOM property ' + name + '. Did you mean ' + standardName + '?'                                        // 1501
      );                                                                                                               // 1502
    }                                                                                                                  // 1503
                                                                                                                       // 1504
  };                                                                                                                   // 1505
}                                                                                                                      // 1506
                                                                                                                       // 1507
/**                                                                                                                    // 1508
 * Operations for dealing with DOM properties.                                                                         // 1509
 */                                                                                                                    // 1510
var DOMPropertyOperations = {                                                                                          // 1511
                                                                                                                       // 1512
  /**                                                                                                                  // 1513
   * Creates markup for a property.                                                                                    // 1514
   *                                                                                                                   // 1515
   * @param {string} name                                                                                              // 1516
   * @param {*} value                                                                                                  // 1517
   * @return {?string} Markup string, or null if the property was invalid.                                             // 1518
   */                                                                                                                  // 1519
  createMarkupForProperty: function(name, value) {                                                                     // 1520
    if (DOMProperty.isStandardName[name]) {                                                                            // 1521
      if (shouldIgnoreValue(name, value)) {                                                                            // 1522
        return '';                                                                                                     // 1523
      }                                                                                                                // 1524
      var attributeName = DOMProperty.getAttributeName[name];                                                          // 1525
      return processAttributeNameAndPrefix(attributeName) +                                                            // 1526
        escapeTextForBrowser(value) + '"';                                                                             // 1527
    } else if (DOMProperty.isCustomAttribute(name)) {                                                                  // 1528
      if (value == null) {                                                                                             // 1529
        return '';                                                                                                     // 1530
      }                                                                                                                // 1531
      return processAttributeNameAndPrefix(name) +                                                                     // 1532
        escapeTextForBrowser(value) + '"';                                                                             // 1533
    } else if ("production" !== "development") {                                                                       // 1534
      warnUnknownProperty(name);                                                                                       // 1535
    }                                                                                                                  // 1536
    return null;                                                                                                       // 1537
  },                                                                                                                   // 1538
                                                                                                                       // 1539
  /**                                                                                                                  // 1540
   * Sets the value for a property on a node.                                                                          // 1541
   *                                                                                                                   // 1542
   * @param {DOMElement} node                                                                                          // 1543
   * @param {string} name                                                                                              // 1544
   * @param {*} value                                                                                                  // 1545
   */                                                                                                                  // 1546
  setValueForProperty: function(node, name, value) {                                                                   // 1547
    if (DOMProperty.isStandardName[name]) {                                                                            // 1548
      var mutationMethod = DOMProperty.getMutationMethod[name];                                                        // 1549
      if (mutationMethod) {                                                                                            // 1550
        mutationMethod(node, value);                                                                                   // 1551
      } else if (shouldIgnoreValue(name, value)) {                                                                     // 1552
        this.deleteValueForProperty(node, name);                                                                       // 1553
      } else if (DOMProperty.mustUseAttribute[name]) {                                                                 // 1554
        node.setAttribute(DOMProperty.getAttributeName[name], '' + value);                                             // 1555
      } else {                                                                                                         // 1556
        var propName = DOMProperty.getPropertyName[name];                                                              // 1557
        if (!DOMProperty.hasSideEffects[name] || node[propName] !== value) {                                           // 1558
          node[propName] = value;                                                                                      // 1559
        }                                                                                                              // 1560
      }                                                                                                                // 1561
    } else if (DOMProperty.isCustomAttribute(name)) {                                                                  // 1562
      if (value == null) {                                                                                             // 1563
        node.removeAttribute(DOMProperty.getAttributeName[name]);                                                      // 1564
      } else {                                                                                                         // 1565
        node.setAttribute(name, '' + value);                                                                           // 1566
      }                                                                                                                // 1567
    } else if ("production" !== "development") {                                                                       // 1568
      warnUnknownProperty(name);                                                                                       // 1569
    }                                                                                                                  // 1570
  },                                                                                                                   // 1571
                                                                                                                       // 1572
  /**                                                                                                                  // 1573
   * Deletes the value for a property on a node.                                                                       // 1574
   *                                                                                                                   // 1575
   * @param {DOMElement} node                                                                                          // 1576
   * @param {string} name                                                                                              // 1577
   */                                                                                                                  // 1578
  deleteValueForProperty: function(node, name) {                                                                       // 1579
    if (DOMProperty.isStandardName[name]) {                                                                            // 1580
      var mutationMethod = DOMProperty.getMutationMethod[name];                                                        // 1581
      if (mutationMethod) {                                                                                            // 1582
        mutationMethod(node, undefined);                                                                               // 1583
      } else if (DOMProperty.mustUseAttribute[name]) {                                                                 // 1584
        node.removeAttribute(DOMProperty.getAttributeName[name]);                                                      // 1585
      } else {                                                                                                         // 1586
        var propName = DOMProperty.getPropertyName[name];                                                              // 1587
        var defaultValue = DOMProperty.getDefaultValueForProperty(                                                     // 1588
          node.nodeName,                                                                                               // 1589
          name                                                                                                         // 1590
        );                                                                                                             // 1591
        if (!DOMProperty.hasSideEffects[name] ||                                                                       // 1592
            node[propName] !== defaultValue) {                                                                         // 1593
          node[propName] = defaultValue;                                                                               // 1594
        }                                                                                                              // 1595
      }                                                                                                                // 1596
    } else if (DOMProperty.isCustomAttribute(name)) {                                                                  // 1597
      node.removeAttribute(name);                                                                                      // 1598
    } else if ("production" !== "development") {                                                                       // 1599
      warnUnknownProperty(name);                                                                                       // 1600
    }                                                                                                                  // 1601
  }                                                                                                                    // 1602
                                                                                                                       // 1603
};                                                                                                                     // 1604
                                                                                                                       // 1605
module.exports = DOMPropertyOperations;                                                                                // 1606
                                                                                                                       // 1607
},{"./DOMProperty":9,"./escapeTextForBrowser":95,"./memoizeStringOnly":117}],11:[function(require,module,exports){     // 1608
/**                                                                                                                    // 1609
 * Copyright 2013 Facebook, Inc.                                                                                       // 1610
 *                                                                                                                     // 1611
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 1612
 * you may not use this file except in compliance with the License.                                                    // 1613
 * You may obtain a copy of the License at                                                                             // 1614
 *                                                                                                                     // 1615
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 1616
 *                                                                                                                     // 1617
 * Unless required by applicable law or agreed to in writing, software                                                 // 1618
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 1619
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 1620
 * See the License for the specific language governing permissions and                                                 // 1621
 * limitations under the License.                                                                                      // 1622
 *                                                                                                                     // 1623
 * @providesModule Danger                                                                                              // 1624
 * @typechecks static-only                                                                                             // 1625
 */                                                                                                                    // 1626
                                                                                                                       // 1627
/*jslint evil: true, sub: true */                                                                                      // 1628
                                                                                                                       // 1629
"use strict";                                                                                                          // 1630
                                                                                                                       // 1631
var ExecutionEnvironment = require("./ExecutionEnvironment");                                                          // 1632
                                                                                                                       // 1633
var createNodesFromMarkup = require("./createNodesFromMarkup");                                                        // 1634
var emptyFunction = require("./emptyFunction");                                                                        // 1635
var getMarkupWrap = require("./getMarkupWrap");                                                                        // 1636
var invariant = require("./invariant");                                                                                // 1637
var mutateHTMLNodeWithMarkup = require("./mutateHTMLNodeWithMarkup");                                                  // 1638
                                                                                                                       // 1639
var OPEN_TAG_NAME_EXP = /^(<[^ \/>]+)/;                                                                                // 1640
var RESULT_INDEX_ATTR = 'data-danger-index';                                                                           // 1641
                                                                                                                       // 1642
/**                                                                                                                    // 1643
 * Extracts the `nodeName` from a string of markup.                                                                    // 1644
 *                                                                                                                     // 1645
 * NOTE: Extracting the `nodeName` does not require a regular expression match                                         // 1646
 * because we make assumptions about React-generated markup (i.e. there are no                                         // 1647
 * spaces surrounding the opening tag and there is at least one attribute).                                            // 1648
 *                                                                                                                     // 1649
 * @param {string} markup String of markup.                                                                            // 1650
 * @return {string} Node name of the supplied markup.                                                                  // 1651
 * @see http://jsperf.com/extract-nodename                                                                             // 1652
 */                                                                                                                    // 1653
function getNodeName(markup) {                                                                                         // 1654
  return markup.substring(1, markup.indexOf(' '));                                                                     // 1655
}                                                                                                                      // 1656
                                                                                                                       // 1657
var Danger = {                                                                                                         // 1658
                                                                                                                       // 1659
  /**                                                                                                                  // 1660
   * Renders markup into an array of nodes. The markup is expected to render                                           // 1661
   * into a list of root nodes. Also, the length of `resultList` and                                                   // 1662
   * `markupList` should be the same.                                                                                  // 1663
   *                                                                                                                   // 1664
   * @param {array<string>} markupList List of markup strings to render.                                               // 1665
   * @return {array<DOMElement>} List of rendered nodes.                                                               // 1666
   * @internal                                                                                                         // 1667
   */                                                                                                                  // 1668
  dangerouslyRenderMarkup: function(markupList) {                                                                      // 1669
    ("production" !== "development" ? invariant(                                                                       // 1670
      ExecutionEnvironment.canUseDOM,                                                                                  // 1671
      'dangerouslyRenderMarkup(...): Cannot render markup in a Worker ' +                                              // 1672
      'thread. This is likely a bug in the framework. Please report ' +                                                // 1673
      'immediately.'                                                                                                   // 1674
    ) : invariant(ExecutionEnvironment.canUseDOM));                                                                    // 1675
    var nodeName;                                                                                                      // 1676
    var markupByNodeName = {};                                                                                         // 1677
    // Group markup by `nodeName` if a wrap is necessary, else by '*'.                                                 // 1678
    for (var i = 0; i < markupList.length; i++) {                                                                      // 1679
      ("production" !== "development" ? invariant(                                                                     // 1680
        markupList[i],                                                                                                 // 1681
        'dangerouslyRenderMarkup(...): Missing markup.'                                                                // 1682
      ) : invariant(markupList[i]));                                                                                   // 1683
      nodeName = getNodeName(markupList[i]);                                                                           // 1684
      nodeName = getMarkupWrap(nodeName) ? nodeName : '*';                                                             // 1685
      markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];                                                   // 1686
      markupByNodeName[nodeName][i] = markupList[i];                                                                   // 1687
    }                                                                                                                  // 1688
    var resultList = [];                                                                                               // 1689
    var resultListAssignmentCount = 0;                                                                                 // 1690
    for (nodeName in markupByNodeName) {                                                                               // 1691
      if (!markupByNodeName.hasOwnProperty(nodeName)) {                                                                // 1692
        continue;                                                                                                      // 1693
      }                                                                                                                // 1694
      var markupListByNodeName = markupByNodeName[nodeName];                                                           // 1695
                                                                                                                       // 1696
      // This for-in loop skips the holes of the sparse array. The order of                                            // 1697
      // iteration should follow the order of assignment, which happens to match                                       // 1698
      // numerical index order, but we don't rely on that.                                                             // 1699
      for (var resultIndex in markupListByNodeName) {                                                                  // 1700
        if (markupListByNodeName.hasOwnProperty(resultIndex)) {                                                        // 1701
          var markup = markupListByNodeName[resultIndex];                                                              // 1702
                                                                                                                       // 1703
          // Push the requested markup with an additional RESULT_INDEX_ATTR                                            // 1704
          // attribute.  If the markup does not start with a < character, it                                           // 1705
          // will be discarded below (with an appropriate console.error).                                              // 1706
          markupListByNodeName[resultIndex] = markup.replace(                                                          // 1707
            OPEN_TAG_NAME_EXP,                                                                                         // 1708
            // This index will be parsed back out below.                                                               // 1709
            '$1 ' + RESULT_INDEX_ATTR + '="' + resultIndex + '" '                                                      // 1710
          );                                                                                                           // 1711
        }                                                                                                              // 1712
      }                                                                                                                // 1713
                                                                                                                       // 1714
      // Render each group of markup with similar wrapping `nodeName`.                                                 // 1715
      var renderNodes = createNodesFromMarkup(                                                                         // 1716
        markupListByNodeName.join(''),                                                                                 // 1717
        emptyFunction // Do nothing special with <script> tags.                                                        // 1718
      );                                                                                                               // 1719
                                                                                                                       // 1720
      for (i = 0; i < renderNodes.length; ++i) {                                                                       // 1721
        var renderNode = renderNodes[i];                                                                               // 1722
        if (renderNode.hasAttribute &&                                                                                 // 1723
            renderNode.hasAttribute(RESULT_INDEX_ATTR)) {                                                              // 1724
                                                                                                                       // 1725
          resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);                                                   // 1726
          renderNode.removeAttribute(RESULT_INDEX_ATTR);                                                               // 1727
                                                                                                                       // 1728
          ("production" !== "development" ? invariant(                                                                 // 1729
            !resultList.hasOwnProperty(resultIndex),                                                                   // 1730
            'Danger: Assigning to an already-occupied result index.'                                                   // 1731
          ) : invariant(!resultList.hasOwnProperty(resultIndex)));                                                     // 1732
                                                                                                                       // 1733
          resultList[resultIndex] = renderNode;                                                                        // 1734
                                                                                                                       // 1735
          // This should match resultList.length and markupList.length when                                            // 1736
          // we're done.                                                                                               // 1737
          resultListAssignmentCount += 1;                                                                              // 1738
                                                                                                                       // 1739
        } else if ("production" !== "development") {                                                                   // 1740
          console.error(                                                                                               // 1741
            "Danger: Discarding unexpected node:",                                                                     // 1742
            renderNode                                                                                                 // 1743
          );                                                                                                           // 1744
        }                                                                                                              // 1745
      }                                                                                                                // 1746
    }                                                                                                                  // 1747
                                                                                                                       // 1748
    // Although resultList was populated out of order, it should now be a dense                                        // 1749
    // array.                                                                                                          // 1750
    ("production" !== "development" ? invariant(                                                                       // 1751
      resultListAssignmentCount === resultList.length,                                                                 // 1752
      'Danger: Did not assign to every index of resultList.'                                                           // 1753
    ) : invariant(resultListAssignmentCount === resultList.length));                                                   // 1754
                                                                                                                       // 1755
    ("production" !== "development" ? invariant(                                                                       // 1756
      resultList.length === markupList.length,                                                                         // 1757
      'Danger: Expected markup to render %s nodes, but rendered %s.',                                                  // 1758
      markupList.length,                                                                                               // 1759
      resultList.length                                                                                                // 1760
    ) : invariant(resultList.length === markupList.length));                                                           // 1761
                                                                                                                       // 1762
    return resultList;                                                                                                 // 1763
  },                                                                                                                   // 1764
                                                                                                                       // 1765
  /**                                                                                                                  // 1766
   * Replaces a node with a string of markup at its current position within its                                        // 1767
   * parent. The markup must render into a single root node.                                                           // 1768
   *                                                                                                                   // 1769
   * @param {DOMElement} oldChild Child node to replace.                                                               // 1770
   * @param {string} markup Markup to render in place of the child node.                                               // 1771
   * @internal                                                                                                         // 1772
   */                                                                                                                  // 1773
  dangerouslyReplaceNodeWithMarkup: function(oldChild, markup) {                                                       // 1774
    ("production" !== "development" ? invariant(                                                                       // 1775
      ExecutionEnvironment.canUseDOM,                                                                                  // 1776
      'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' +                                            // 1777
      'worker thread. This is likely a bug in the framework. Please report ' +                                         // 1778
      'immediately.'                                                                                                   // 1779
    ) : invariant(ExecutionEnvironment.canUseDOM));                                                                    // 1780
    ("production" !== "development" ? invariant(markup, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(markup));
    // createNodesFromMarkup() won't work if the markup is rooted by <html>                                            // 1782
    // since it has special semantic meaning. So we use an alternatie strategy.                                        // 1783
    if (oldChild.tagName.toLowerCase() === 'html') {                                                                   // 1784
      mutateHTMLNodeWithMarkup(oldChild, markup);                                                                      // 1785
      return;                                                                                                          // 1786
    }                                                                                                                  // 1787
    var newChild = createNodesFromMarkup(markup, emptyFunction)[0];                                                    // 1788
    oldChild.parentNode.replaceChild(newChild, oldChild);                                                              // 1789
  }                                                                                                                    // 1790
                                                                                                                       // 1791
};                                                                                                                     // 1792
                                                                                                                       // 1793
module.exports = Danger;                                                                                               // 1794
                                                                                                                       // 1795
},{"./ExecutionEnvironment":21,"./createNodesFromMarkup":90,"./emptyFunction":94,"./getMarkupWrap":103,"./invariant":109,"./mutateHTMLNodeWithMarkup":122}],12:[function(require,module,exports){
/**                                                                                                                    // 1797
 * Copyright 2013 Facebook, Inc.                                                                                       // 1798
 *                                                                                                                     // 1799
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 1800
 * you may not use this file except in compliance with the License.                                                    // 1801
 * You may obtain a copy of the License at                                                                             // 1802
 *                                                                                                                     // 1803
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 1804
 *                                                                                                                     // 1805
 * Unless required by applicable law or agreed to in writing, software                                                 // 1806
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 1807
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 1808
 * See the License for the specific language governing permissions and                                                 // 1809
 * limitations under the License.                                                                                      // 1810
 *                                                                                                                     // 1811
 * @providesModule DefaultDOMPropertyConfig                                                                            // 1812
 */                                                                                                                    // 1813
                                                                                                                       // 1814
/*jslint bitwise: true*/                                                                                               // 1815
                                                                                                                       // 1816
"use strict";                                                                                                          // 1817
                                                                                                                       // 1818
var DOMProperty = require("./DOMProperty");                                                                            // 1819
                                                                                                                       // 1820
var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;                                                     // 1821
var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;                                                       // 1822
var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;                                                       // 1823
var HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;                                                         // 1824
var HAS_POSITIVE_NUMERIC_VALUE =                                                                                       // 1825
  DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;                                                                    // 1826
                                                                                                                       // 1827
var DefaultDOMPropertyConfig = {                                                                                       // 1828
  isCustomAttribute: RegExp.prototype.test.bind(                                                                       // 1829
    /^(data|aria)-[a-z_][a-z\d_.\-]*$/                                                                                 // 1830
  ),                                                                                                                   // 1831
  Properties: {                                                                                                        // 1832
    /**                                                                                                                // 1833
     * Standard Properties                                                                                             // 1834
     */                                                                                                                // 1835
    accept: null,                                                                                                      // 1836
    accessKey: null,                                                                                                   // 1837
    action: null,                                                                                                      // 1838
    allowFullScreen: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,                                                           // 1839
    allowTransparency: MUST_USE_ATTRIBUTE,                                                                             // 1840
    alt: null,                                                                                                         // 1841
    async: HAS_BOOLEAN_VALUE,                                                                                          // 1842
    autoComplete: null,                                                                                                // 1843
    autoFocus: HAS_BOOLEAN_VALUE,                                                                                      // 1844
    autoPlay: HAS_BOOLEAN_VALUE,                                                                                       // 1845
    cellPadding: null,                                                                                                 // 1846
    cellSpacing: null,                                                                                                 // 1847
    charSet: MUST_USE_ATTRIBUTE,                                                                                       // 1848
    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,                                                                    // 1849
    className: MUST_USE_PROPERTY,                                                                                      // 1850
    cols: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,                                                             // 1851
    colSpan: null,                                                                                                     // 1852
    content: null,                                                                                                     // 1853
    contentEditable: null,                                                                                             // 1854
    contextMenu: MUST_USE_ATTRIBUTE,                                                                                   // 1855
    controls: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,                                                                   // 1856
    data: null, // For `<object />` acts as `src`.                                                                     // 1857
    dateTime: MUST_USE_ATTRIBUTE,                                                                                      // 1858
    defer: HAS_BOOLEAN_VALUE,                                                                                          // 1859
    dir: null,                                                                                                         // 1860
    disabled: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,                                                                  // 1861
    draggable: null,                                                                                                   // 1862
    encType: null,                                                                                                     // 1863
    form: MUST_USE_ATTRIBUTE,                                                                                          // 1864
    frameBorder: MUST_USE_ATTRIBUTE,                                                                                   // 1865
    height: MUST_USE_ATTRIBUTE,                                                                                        // 1866
    hidden: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,                                                                    // 1867
    href: null,                                                                                                        // 1868
    htmlFor: null,                                                                                                     // 1869
    httpEquiv: null,                                                                                                   // 1870
    icon: null,                                                                                                        // 1871
    id: MUST_USE_PROPERTY,                                                                                             // 1872
    label: null,                                                                                                       // 1873
    lang: null,                                                                                                        // 1874
    list: null,                                                                                                        // 1875
    loop: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,                                                                       // 1876
    max: null,                                                                                                         // 1877
    maxLength: MUST_USE_ATTRIBUTE,                                                                                     // 1878
    method: null,                                                                                                      // 1879
    min: null,                                                                                                         // 1880
    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,                                                                   // 1881
    name: null,                                                                                                        // 1882
    pattern: null,                                                                                                     // 1883
    placeholder: null,                                                                                                 // 1884
    poster: null,                                                                                                      // 1885
    preload: null,                                                                                                     // 1886
    radioGroup: null,                                                                                                  // 1887
    readOnly: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,                                                                   // 1888
    rel: null,                                                                                                         // 1889
    required: HAS_BOOLEAN_VALUE,                                                                                       // 1890
    role: MUST_USE_ATTRIBUTE,                                                                                          // 1891
    rows: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,                                                             // 1892
    rowSpan: null,                                                                                                     // 1893
    scrollLeft: MUST_USE_PROPERTY,                                                                                     // 1894
    scrollTop: MUST_USE_PROPERTY,                                                                                      // 1895
    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,                                                                   // 1896
    size: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,                                                             // 1897
    spellCheck: null,                                                                                                  // 1898
    src: null,                                                                                                         // 1899
    step: null,                                                                                                        // 1900
    style: null,                                                                                                       // 1901
    tabIndex: null,                                                                                                    // 1902
    target: null,                                                                                                      // 1903
    title: null,                                                                                                       // 1904
    type: null,                                                                                                        // 1905
    value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,                                                                       // 1906
    width: MUST_USE_ATTRIBUTE,                                                                                         // 1907
    wmode: MUST_USE_ATTRIBUTE,                                                                                         // 1908
                                                                                                                       // 1909
    /**                                                                                                                // 1910
     * Non-standard Properties                                                                                         // 1911
     */                                                                                                                // 1912
    autoCapitalize: null, // Supported in Mobile Safari for keyboard hints                                             // 1913
    autoCorrect: null, // Supported in Mobile Safari for keyboard hints                                                // 1914
                                                                                                                       // 1915
    /**                                                                                                                // 1916
     * SVG Properties                                                                                                  // 1917
     */                                                                                                                // 1918
    cx: MUST_USE_ATTRIBUTE,                                                                                            // 1919
    cy: MUST_USE_ATTRIBUTE,                                                                                            // 1920
    d: MUST_USE_ATTRIBUTE,                                                                                             // 1921
    fill: MUST_USE_ATTRIBUTE,                                                                                          // 1922
    fx: MUST_USE_ATTRIBUTE,                                                                                            // 1923
    fy: MUST_USE_ATTRIBUTE,                                                                                            // 1924
    gradientTransform: MUST_USE_ATTRIBUTE,                                                                             // 1925
    gradientUnits: MUST_USE_ATTRIBUTE,                                                                                 // 1926
    offset: MUST_USE_ATTRIBUTE,                                                                                        // 1927
    points: MUST_USE_ATTRIBUTE,                                                                                        // 1928
    r: MUST_USE_ATTRIBUTE,                                                                                             // 1929
    rx: MUST_USE_ATTRIBUTE,                                                                                            // 1930
    ry: MUST_USE_ATTRIBUTE,                                                                                            // 1931
    spreadMethod: MUST_USE_ATTRIBUTE,                                                                                  // 1932
    stopColor: MUST_USE_ATTRIBUTE,                                                                                     // 1933
    stopOpacity: MUST_USE_ATTRIBUTE,                                                                                   // 1934
    stroke: MUST_USE_ATTRIBUTE,                                                                                        // 1935
    strokeLinecap: MUST_USE_ATTRIBUTE,                                                                                 // 1936
    strokeWidth: MUST_USE_ATTRIBUTE,                                                                                   // 1937
    transform: MUST_USE_ATTRIBUTE,                                                                                     // 1938
    version: MUST_USE_ATTRIBUTE,                                                                                       // 1939
    viewBox: MUST_USE_ATTRIBUTE,                                                                                       // 1940
    x1: MUST_USE_ATTRIBUTE,                                                                                            // 1941
    x2: MUST_USE_ATTRIBUTE,                                                                                            // 1942
    x: MUST_USE_ATTRIBUTE,                                                                                             // 1943
    y1: MUST_USE_ATTRIBUTE,                                                                                            // 1944
    y2: MUST_USE_ATTRIBUTE,                                                                                            // 1945
    y: MUST_USE_ATTRIBUTE                                                                                              // 1946
  },                                                                                                                   // 1947
  DOMAttributeNames: {                                                                                                 // 1948
    className: 'class',                                                                                                // 1949
    gradientTransform: 'gradientTransform',                                                                            // 1950
    gradientUnits: 'gradientUnits',                                                                                    // 1951
    htmlFor: 'for',                                                                                                    // 1952
    spreadMethod: 'spreadMethod',                                                                                      // 1953
    stopColor: 'stop-color',                                                                                           // 1954
    stopOpacity: 'stop-opacity',                                                                                       // 1955
    strokeLinecap: 'stroke-linecap',                                                                                   // 1956
    strokeWidth: 'stroke-width',                                                                                       // 1957
    viewBox: 'viewBox'                                                                                                 // 1958
  },                                                                                                                   // 1959
  DOMPropertyNames: {                                                                                                  // 1960
    autoCapitalize: 'autocapitalize',                                                                                  // 1961
    autoComplete: 'autocomplete',                                                                                      // 1962
    autoCorrect: 'autocorrect',                                                                                        // 1963
    autoFocus: 'autofocus',                                                                                            // 1964
    autoPlay: 'autoplay',                                                                                              // 1965
    encType: 'enctype',                                                                                                // 1966
    radioGroup: 'radiogroup',                                                                                          // 1967
    spellCheck: 'spellcheck'                                                                                           // 1968
  },                                                                                                                   // 1969
  DOMMutationMethods: {                                                                                                // 1970
    /**                                                                                                                // 1971
     * Setting `className` to null may cause it to be set to the string "null".                                        // 1972
     *                                                                                                                 // 1973
     * @param {DOMElement} node                                                                                        // 1974
     * @param {*} value                                                                                                // 1975
     */                                                                                                                // 1976
    className: function(node, value) {                                                                                 // 1977
      node.className = value || '';                                                                                    // 1978
    }                                                                                                                  // 1979
  }                                                                                                                    // 1980
};                                                                                                                     // 1981
                                                                                                                       // 1982
module.exports = DefaultDOMPropertyConfig;                                                                             // 1983
                                                                                                                       // 1984
},{"./DOMProperty":9}],13:[function(require,module,exports){                                                           // 1985
/**                                                                                                                    // 1986
 * Copyright 2013 Facebook, Inc.                                                                                       // 1987
 *                                                                                                                     // 1988
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 1989
 * you may not use this file except in compliance with the License.                                                    // 1990
 * You may obtain a copy of the License at                                                                             // 1991
 *                                                                                                                     // 1992
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 1993
 *                                                                                                                     // 1994
 * Unless required by applicable law or agreed to in writing, software                                                 // 1995
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 1996
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 1997
 * See the License for the specific language governing permissions and                                                 // 1998
 * limitations under the License.                                                                                      // 1999
 *                                                                                                                     // 2000
 * @providesModule DefaultEventPluginOrder                                                                             // 2001
 */                                                                                                                    // 2002
                                                                                                                       // 2003
"use strict";                                                                                                          // 2004
                                                                                                                       // 2005
 var keyOf = require("./keyOf");                                                                                       // 2006
                                                                                                                       // 2007
/**                                                                                                                    // 2008
 * Module that is injectable into `EventPluginHub`, that specifies a                                                   // 2009
 * deterministic ordering of `EventPlugin`s. A convenient way to reason about                                          // 2010
 * plugins, without having to package every one of them. This is better than                                           // 2011
 * having plugins be ordered in the same order that they are injected because                                          // 2012
 * that ordering would be influenced by the packaging order.                                                           // 2013
 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that                                                // 2014
 * preventing default on events is convenient in `SimpleEventPlugin` handlers.                                         // 2015
 */                                                                                                                    // 2016
var DefaultEventPluginOrder = [                                                                                        // 2017
  keyOf({ResponderEventPlugin: null}),                                                                                 // 2018
  keyOf({SimpleEventPlugin: null}),                                                                                    // 2019
  keyOf({TapEventPlugin: null}),                                                                                       // 2020
  keyOf({EnterLeaveEventPlugin: null}),                                                                                // 2021
  keyOf({ChangeEventPlugin: null}),                                                                                    // 2022
  keyOf({SelectEventPlugin: null}),                                                                                    // 2023
  keyOf({CompositionEventPlugin: null}),                                                                               // 2024
  keyOf({AnalyticsEventPlugin: null}),                                                                                 // 2025
  keyOf({MobileSafariClickEventPlugin: null})                                                                          // 2026
];                                                                                                                     // 2027
                                                                                                                       // 2028
module.exports = DefaultEventPluginOrder;                                                                              // 2029
                                                                                                                       // 2030
},{"./keyOf":116}],14:[function(require,module,exports){                                                               // 2031
/**                                                                                                                    // 2032
 * Copyright 2013 Facebook, Inc.                                                                                       // 2033
 *                                                                                                                     // 2034
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 2035
 * you may not use this file except in compliance with the License.                                                    // 2036
 * You may obtain a copy of the License at                                                                             // 2037
 *                                                                                                                     // 2038
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 2039
 *                                                                                                                     // 2040
 * Unless required by applicable law or agreed to in writing, software                                                 // 2041
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 2042
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 2043
 * See the License for the specific language governing permissions and                                                 // 2044
 * limitations under the License.                                                                                      // 2045
 *                                                                                                                     // 2046
 * @providesModule EnterLeaveEventPlugin                                                                               // 2047
 * @typechecks static-only                                                                                             // 2048
 */                                                                                                                    // 2049
                                                                                                                       // 2050
"use strict";                                                                                                          // 2051
                                                                                                                       // 2052
var EventConstants = require("./EventConstants");                                                                      // 2053
var EventPropagators = require("./EventPropagators");                                                                  // 2054
var SyntheticMouseEvent = require("./SyntheticMouseEvent");                                                            // 2055
                                                                                                                       // 2056
var ReactMount = require("./ReactMount");                                                                              // 2057
var keyOf = require("./keyOf");                                                                                        // 2058
                                                                                                                       // 2059
var topLevelTypes = EventConstants.topLevelTypes;                                                                      // 2060
var getFirstReactDOM = ReactMount.getFirstReactDOM;                                                                    // 2061
                                                                                                                       // 2062
var eventTypes = {                                                                                                     // 2063
  mouseEnter: {registrationName: keyOf({onMouseEnter: null})},                                                         // 2064
  mouseLeave: {registrationName: keyOf({onMouseLeave: null})}                                                          // 2065
};                                                                                                                     // 2066
                                                                                                                       // 2067
var extractedEvents = [null, null];                                                                                    // 2068
                                                                                                                       // 2069
var EnterLeaveEventPlugin = {                                                                                          // 2070
                                                                                                                       // 2071
  eventTypes: eventTypes,                                                                                              // 2072
                                                                                                                       // 2073
  /**                                                                                                                  // 2074
   * For almost every interaction we care about, there will be both a top-level                                        // 2075
   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that                                         // 2076
   * we do not extract duplicate events. However, moving the mouse into the                                            // 2077
   * browser from outside will not fire a `mouseout` event. In this case, we use                                       // 2078
   * the `mouseover` top-level event.                                                                                  // 2079
   *                                                                                                                   // 2080
   * @param {string} topLevelType Record from `EventConstants`.                                                        // 2081
   * @param {DOMEventTarget} topLevelTarget The listening component root node.                                         // 2082
   * @param {string} topLevelTargetID ID of `topLevelTarget`.                                                          // 2083
   * @param {object} nativeEvent Native browser event.                                                                 // 2084
   * @return {*} An accumulation of synthetic events.                                                                  // 2085
   * @see {EventPluginHub.extractEvents}                                                                               // 2086
   */                                                                                                                  // 2087
  extractEvents: function(                                                                                             // 2088
      topLevelType,                                                                                                    // 2089
      topLevelTarget,                                                                                                  // 2090
      topLevelTargetID,                                                                                                // 2091
      nativeEvent) {                                                                                                   // 2092
    if (topLevelType === topLevelTypes.topMouseOver &&                                                                 // 2093
        (nativeEvent.relatedTarget || nativeEvent.fromElement)) {                                                      // 2094
      return null;                                                                                                     // 2095
    }                                                                                                                  // 2096
    if (topLevelType !== topLevelTypes.topMouseOut &&                                                                  // 2097
        topLevelType !== topLevelTypes.topMouseOver) {                                                                 // 2098
      // Must not be a mouse in or mouse out - ignoring.                                                               // 2099
      return null;                                                                                                     // 2100
    }                                                                                                                  // 2101
                                                                                                                       // 2102
    var from, to;                                                                                                      // 2103
    if (topLevelType === topLevelTypes.topMouseOut) {                                                                  // 2104
      from = topLevelTarget;                                                                                           // 2105
      to =                                                                                                             // 2106
        getFirstReactDOM(nativeEvent.relatedTarget || nativeEvent.toElement) ||                                        // 2107
        window;                                                                                                        // 2108
    } else {                                                                                                           // 2109
      from = window;                                                                                                   // 2110
      to = topLevelTarget;                                                                                             // 2111
    }                                                                                                                  // 2112
                                                                                                                       // 2113
    if (from === to) {                                                                                                 // 2114
      // Nothing pertains to our managed components.                                                                   // 2115
      return null;                                                                                                     // 2116
    }                                                                                                                  // 2117
                                                                                                                       // 2118
    var fromID = from ? ReactMount.getID(from) : '';                                                                   // 2119
    var toID = to ? ReactMount.getID(to) : '';                                                                         // 2120
                                                                                                                       // 2121
    var leave = SyntheticMouseEvent.getPooled(                                                                         // 2122
      eventTypes.mouseLeave,                                                                                           // 2123
      fromID,                                                                                                          // 2124
      nativeEvent                                                                                                      // 2125
    );                                                                                                                 // 2126
    var enter = SyntheticMouseEvent.getPooled(                                                                         // 2127
      eventTypes.mouseEnter,                                                                                           // 2128
      toID,                                                                                                            // 2129
      nativeEvent                                                                                                      // 2130
    );                                                                                                                 // 2131
                                                                                                                       // 2132
    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, fromID, toID);                                       // 2133
                                                                                                                       // 2134
    extractedEvents[0] = leave;                                                                                        // 2135
    extractedEvents[1] = enter;                                                                                        // 2136
                                                                                                                       // 2137
    return extractedEvents;                                                                                            // 2138
  }                                                                                                                    // 2139
                                                                                                                       // 2140
};                                                                                                                     // 2141
                                                                                                                       // 2142
module.exports = EnterLeaveEventPlugin;                                                                                // 2143
                                                                                                                       // 2144
},{"./EventConstants":15,"./EventPropagators":20,"./ReactMount":54,"./SyntheticMouseEvent":79,"./keyOf":116}],15:[function(require,module,exports){
/**                                                                                                                    // 2146
 * Copyright 2013 Facebook, Inc.                                                                                       // 2147
 *                                                                                                                     // 2148
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 2149
 * you may not use this file except in compliance with the License.                                                    // 2150
 * You may obtain a copy of the License at                                                                             // 2151
 *                                                                                                                     // 2152
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 2153
 *                                                                                                                     // 2154
 * Unless required by applicable law or agreed to in writing, software                                                 // 2155
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 2156
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 2157
 * See the License for the specific language governing permissions and                                                 // 2158
 * limitations under the License.                                                                                      // 2159
 *                                                                                                                     // 2160
 * @providesModule EventConstants                                                                                      // 2161
 */                                                                                                                    // 2162
                                                                                                                       // 2163
"use strict";                                                                                                          // 2164
                                                                                                                       // 2165
var keyMirror = require("./keyMirror");                                                                                // 2166
                                                                                                                       // 2167
var PropagationPhases = keyMirror({bubbled: null, captured: null});                                                    // 2168
                                                                                                                       // 2169
/**                                                                                                                    // 2170
 * Types of raw signals from the browser caught at the top level.                                                      // 2171
 */                                                                                                                    // 2172
var topLevelTypes = keyMirror({                                                                                        // 2173
  topBlur: null,                                                                                                       // 2174
  topChange: null,                                                                                                     // 2175
  topClick: null,                                                                                                      // 2176
  topCompositionEnd: null,                                                                                             // 2177
  topCompositionStart: null,                                                                                           // 2178
  topCompositionUpdate: null,                                                                                          // 2179
  topContextMenu: null,                                                                                                // 2180
  topCopy: null,                                                                                                       // 2181
  topCut: null,                                                                                                        // 2182
  topDoubleClick: null,                                                                                                // 2183
  topDrag: null,                                                                                                       // 2184
  topDragEnd: null,                                                                                                    // 2185
  topDragEnter: null,                                                                                                  // 2186
  topDragExit: null,                                                                                                   // 2187
  topDragLeave: null,                                                                                                  // 2188
  topDragOver: null,                                                                                                   // 2189
  topDragStart: null,                                                                                                  // 2190
  topDrop: null,                                                                                                       // 2191
  topFocus: null,                                                                                                      // 2192
  topInput: null,                                                                                                      // 2193
  topKeyDown: null,                                                                                                    // 2194
  topKeyPress: null,                                                                                                   // 2195
  topKeyUp: null,                                                                                                      // 2196
  topMouseDown: null,                                                                                                  // 2197
  topMouseMove: null,                                                                                                  // 2198
  topMouseOut: null,                                                                                                   // 2199
  topMouseOver: null,                                                                                                  // 2200
  topMouseUp: null,                                                                                                    // 2201
  topPaste: null,                                                                                                      // 2202
  topScroll: null,                                                                                                     // 2203
  topSelectionChange: null,                                                                                            // 2204
  topSubmit: null,                                                                                                     // 2205
  topTouchCancel: null,                                                                                                // 2206
  topTouchEnd: null,                                                                                                   // 2207
  topTouchMove: null,                                                                                                  // 2208
  topTouchStart: null,                                                                                                 // 2209
  topWheel: null                                                                                                       // 2210
});                                                                                                                    // 2211
                                                                                                                       // 2212
var EventConstants = {                                                                                                 // 2213
  topLevelTypes: topLevelTypes,                                                                                        // 2214
  PropagationPhases: PropagationPhases                                                                                 // 2215
};                                                                                                                     // 2216
                                                                                                                       // 2217
module.exports = EventConstants;                                                                                       // 2218
                                                                                                                       // 2219
},{"./keyMirror":115}],16:[function(require,module,exports){                                                           // 2220
/**                                                                                                                    // 2221
 * Copyright 2013 Facebook, Inc.                                                                                       // 2222
 *                                                                                                                     // 2223
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 2224
 * you may not use this file except in compliance with the License.                                                    // 2225
 * You may obtain a copy of the License at                                                                             // 2226
 *                                                                                                                     // 2227
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 2228
 *                                                                                                                     // 2229
 * Unless required by applicable law or agreed to in writing, software                                                 // 2230
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 2231
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 2232
 * See the License for the specific language governing permissions and                                                 // 2233
 * limitations under the License.                                                                                      // 2234
 *                                                                                                                     // 2235
 * @providesModule EventListener                                                                                       // 2236
 */                                                                                                                    // 2237
                                                                                                                       // 2238
/**                                                                                                                    // 2239
 * Upstream version of event listener. Does not take into account specific                                             // 2240
 * nature of platform.                                                                                                 // 2241
 */                                                                                                                    // 2242
var EventListener = {                                                                                                  // 2243
  /**                                                                                                                  // 2244
   * Listens to bubbled events on a DOM node.                                                                          // 2245
   *                                                                                                                   // 2246
   * @param {Element} el DOM element to register listener on.                                                          // 2247
   * @param {string} handlerBaseName 'click'/'mouseover'                                                               // 2248
   * @param {Function!} cb Callback function                                                                           // 2249
   */                                                                                                                  // 2250
  listen: function(el, handlerBaseName, cb) {                                                                          // 2251
    if (el.addEventListener) {                                                                                         // 2252
      el.addEventListener(handlerBaseName, cb, false);                                                                 // 2253
    } else if (el.attachEvent) {                                                                                       // 2254
      el.attachEvent('on' + handlerBaseName, cb);                                                                      // 2255
    }                                                                                                                  // 2256
  },                                                                                                                   // 2257
                                                                                                                       // 2258
  /**                                                                                                                  // 2259
   * Listens to captured events on a DOM node.                                                                         // 2260
   *                                                                                                                   // 2261
   * @see `EventListener.listen` for params.                                                                           // 2262
   * @throws Exception if addEventListener is not supported.                                                           // 2263
   */                                                                                                                  // 2264
  capture: function(el, handlerBaseName, cb) {                                                                         // 2265
    if (!el.addEventListener) {                                                                                        // 2266
      if ("production" !== "development") {                                                                            // 2267
        console.error(                                                                                                 // 2268
          'You are attempting to use addEventListener ' +                                                              // 2269
          'in a browser that does not support it.' +                                                                   // 2270
          'This likely means that you will not receive events that ' +                                                 // 2271
          'your application relies on (such as scroll).');                                                             // 2272
      }                                                                                                                // 2273
      return;                                                                                                          // 2274
    } else {                                                                                                           // 2275
      el.addEventListener(handlerBaseName, cb, true);                                                                  // 2276
    }                                                                                                                  // 2277
  }                                                                                                                    // 2278
};                                                                                                                     // 2279
                                                                                                                       // 2280
module.exports = EventListener;                                                                                        // 2281
                                                                                                                       // 2282
},{}],17:[function(require,module,exports){                                                                            // 2283
/**                                                                                                                    // 2284
 * Copyright 2013 Facebook, Inc.                                                                                       // 2285
 *                                                                                                                     // 2286
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 2287
 * you may not use this file except in compliance with the License.                                                    // 2288
 * You may obtain a copy of the License at                                                                             // 2289
 *                                                                                                                     // 2290
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 2291
 *                                                                                                                     // 2292
 * Unless required by applicable law or agreed to in writing, software                                                 // 2293
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 2294
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 2295
 * See the License for the specific language governing permissions and                                                 // 2296
 * limitations under the License.                                                                                      // 2297
 *                                                                                                                     // 2298
 * @providesModule EventPluginHub                                                                                      // 2299
 */                                                                                                                    // 2300
                                                                                                                       // 2301
"use strict";                                                                                                          // 2302
                                                                                                                       // 2303
var CallbackRegistry = require("./CallbackRegistry");                                                                  // 2304
var EventPluginRegistry = require("./EventPluginRegistry");                                                            // 2305
var EventPluginUtils = require("./EventPluginUtils");                                                                  // 2306
var EventPropagators = require("./EventPropagators");                                                                  // 2307
var ExecutionEnvironment = require("./ExecutionEnvironment");                                                          // 2308
                                                                                                                       // 2309
var accumulate = require("./accumulate");                                                                              // 2310
var forEachAccumulated = require("./forEachAccumulated");                                                              // 2311
var invariant = require("./invariant");                                                                                // 2312
                                                                                                                       // 2313
/**                                                                                                                    // 2314
 * Internal queue of events that have accumulated their dispatches and are                                             // 2315
 * waiting to have their dispatches executed.                                                                          // 2316
 */                                                                                                                    // 2317
var eventQueue = null;                                                                                                 // 2318
                                                                                                                       // 2319
/**                                                                                                                    // 2320
 * Dispatches an event and releases it back into the pool, unless persistent.                                          // 2321
 *                                                                                                                     // 2322
 * @param {?object} event Synthetic event to be dispatched.                                                            // 2323
 * @private                                                                                                            // 2324
 */                                                                                                                    // 2325
var executeDispatchesAndRelease = function(event) {                                                                    // 2326
  if (event) {                                                                                                         // 2327
    var executeDispatch = EventPluginUtils.executeDispatch;                                                            // 2328
    // Plugins can provide custom behavior when dispatching events.                                                    // 2329
    var PluginModule = EventPluginRegistry.getPluginModuleForEvent(event);                                             // 2330
    if (PluginModule && PluginModule.executeDispatch) {                                                                // 2331
      executeDispatch = PluginModule.executeDispatch;                                                                  // 2332
    }                                                                                                                  // 2333
    EventPluginUtils.executeDispatchesInOrder(event, executeDispatch);                                                 // 2334
                                                                                                                       // 2335
    if (!event.isPersistent()) {                                                                                       // 2336
      event.constructor.release(event);                                                                                // 2337
    }                                                                                                                  // 2338
  }                                                                                                                    // 2339
};                                                                                                                     // 2340
                                                                                                                       // 2341
/**                                                                                                                    // 2342
 * This is a unified interface for event plugins to be installed and configured.                                       // 2343
 *                                                                                                                     // 2344
 * Event plugins can implement the following properties:                                                               // 2345
 *                                                                                                                     // 2346
 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}                                             // 2347
 *     Required. When a top-level event is fired, this method is expected to                                           // 2348
 *     extract synthetic events that will in turn be queued and dispatched.                                            // 2349
 *                                                                                                                     // 2350
 *   `eventTypes` {object}                                                                                             // 2351
 *     Optional, plugins that fire events must publish a mapping of registration                                       // 2352
 *     names that are used to register listeners. Values of this mapping must                                          // 2353
 *     be objects that contain `registrationName` or `phasedRegistrationNames`.                                        // 2354
 *                                                                                                                     // 2355
 *   `executeDispatch` {function(object, function, string)}                                                            // 2356
 *     Optional, allows plugins to override how an event gets dispatched. By                                           // 2357
 *     default, the listener is simply invoked.                                                                        // 2358
 *                                                                                                                     // 2359
 * Each plugin that is injected into `EventsPluginHub` is immediately operable.                                        // 2360
 *                                                                                                                     // 2361
 * @public                                                                                                             // 2362
 */                                                                                                                    // 2363
var EventPluginHub = {                                                                                                 // 2364
                                                                                                                       // 2365
  /**                                                                                                                  // 2366
   * Methods for injecting dependencies.                                                                               // 2367
   */                                                                                                                  // 2368
  injection: {                                                                                                         // 2369
                                                                                                                       // 2370
    /**                                                                                                                // 2371
     * @param {object} InjectedInstanceHandle                                                                          // 2372
     * @public                                                                                                         // 2373
     */                                                                                                                // 2374
    injectInstanceHandle: EventPropagators.injection.injectInstanceHandle,                                             // 2375
                                                                                                                       // 2376
    /**                                                                                                                // 2377
     * @param {array} InjectedEventPluginOrder                                                                         // 2378
     * @public                                                                                                         // 2379
     */                                                                                                                // 2380
    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,                                                // 2381
                                                                                                                       // 2382
    /**                                                                                                                // 2383
     * @param {object} injectedNamesToPlugins Map from names to plugin modules.                                        // 2384
     */                                                                                                                // 2385
    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName                                             // 2386
                                                                                                                       // 2387
  },                                                                                                                   // 2388
                                                                                                                       // 2389
  registrationNames: EventPluginRegistry.registrationNames,                                                            // 2390
                                                                                                                       // 2391
  putListener: CallbackRegistry.putListener,                                                                           // 2392
                                                                                                                       // 2393
  getListener: CallbackRegistry.getListener,                                                                           // 2394
                                                                                                                       // 2395
  deleteListener: CallbackRegistry.deleteListener,                                                                     // 2396
                                                                                                                       // 2397
  deleteAllListeners: CallbackRegistry.deleteAllListeners,                                                             // 2398
                                                                                                                       // 2399
  /**                                                                                                                  // 2400
   * Allows registered plugins an opportunity to extract events from top-level                                         // 2401
   * native browser events.                                                                                            // 2402
   *                                                                                                                   // 2403
   * @param {string} topLevelType Record from `EventConstants`.                                                        // 2404
   * @param {DOMEventTarget} topLevelTarget The listening component root node.                                         // 2405
   * @param {string} topLevelTargetID ID of `topLevelTarget`.                                                          // 2406
   * @param {object} nativeEvent Native browser event.                                                                 // 2407
   * @return {*} An accumulation of synthetic events.                                                                  // 2408
   * @internal                                                                                                         // 2409
   */                                                                                                                  // 2410
  extractEvents: function(                                                                                             // 2411
      topLevelType,                                                                                                    // 2412
      topLevelTarget,                                                                                                  // 2413
      topLevelTargetID,                                                                                                // 2414
      nativeEvent) {                                                                                                   // 2415
    var events;                                                                                                        // 2416
    var plugins = EventPluginRegistry.plugins;                                                                         // 2417
    for (var i = 0, l = plugins.length; i < l; i++) {                                                                  // 2418
      // Not every plugin in the ordering may be loaded at runtime.                                                    // 2419
      var possiblePlugin = plugins[i];                                                                                 // 2420
      if (possiblePlugin) {                                                                                            // 2421
        var extractedEvents = possiblePlugin.extractEvents(                                                            // 2422
          topLevelType,                                                                                                // 2423
          topLevelTarget,                                                                                              // 2424
          topLevelTargetID,                                                                                            // 2425
          nativeEvent                                                                                                  // 2426
        );                                                                                                             // 2427
        if (extractedEvents) {                                                                                         // 2428
          events = accumulate(events, extractedEvents);                                                                // 2429
        }                                                                                                              // 2430
      }                                                                                                                // 2431
    }                                                                                                                  // 2432
    return events;                                                                                                     // 2433
  },                                                                                                                   // 2434
                                                                                                                       // 2435
  /**                                                                                                                  // 2436
   * Enqueues a synthetic event that should be dispatched when                                                         // 2437
   * `processEventQueue` is invoked.                                                                                   // 2438
   *                                                                                                                   // 2439
   * @param {*} events An accumulation of synthetic events.                                                            // 2440
   * @internal                                                                                                         // 2441
   */                                                                                                                  // 2442
  enqueueEvents: function(events) {                                                                                    // 2443
    if (events) {                                                                                                      // 2444
      eventQueue = accumulate(eventQueue, events);                                                                     // 2445
    }                                                                                                                  // 2446
  },                                                                                                                   // 2447
                                                                                                                       // 2448
  /**                                                                                                                  // 2449
   * Dispatches all synthetic events on the event queue.                                                               // 2450
   *                                                                                                                   // 2451
   * @internal                                                                                                         // 2452
   */                                                                                                                  // 2453
  processEventQueue: function() {                                                                                      // 2454
    // Set `eventQueue` to null before processing it so that we can tell if more                                       // 2455
    // events get enqueued while processing.                                                                           // 2456
    var processingEventQueue = eventQueue;                                                                             // 2457
    eventQueue = null;                                                                                                 // 2458
    forEachAccumulated(processingEventQueue, executeDispatchesAndRelease);                                             // 2459
    ("production" !== "development" ? invariant(                                                                       // 2460
      !eventQueue,                                                                                                     // 2461
      'processEventQueue(): Additional events were enqueued while processing ' +                                       // 2462
      'an event queue. Support for this has not yet been implemented.'                                                 // 2463
    ) : invariant(!eventQueue));                                                                                       // 2464
  }                                                                                                                    // 2465
                                                                                                                       // 2466
};                                                                                                                     // 2467
                                                                                                                       // 2468
if (ExecutionEnvironment.canUseDOM) {                                                                                  // 2469
  window.EventPluginHub = EventPluginHub;                                                                              // 2470
}                                                                                                                      // 2471
                                                                                                                       // 2472
module.exports = EventPluginHub;                                                                                       // 2473
                                                                                                                       // 2474
},{"./CallbackRegistry":5,"./EventPluginRegistry":18,"./EventPluginUtils":19,"./EventPropagators":20,"./ExecutionEnvironment":21,"./accumulate":85,"./forEachAccumulated":99,"./invariant":109}],18:[function(require,module,exports){
/**                                                                                                                    // 2476
 * Copyright 2013 Facebook, Inc.                                                                                       // 2477
 *                                                                                                                     // 2478
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 2479
 * you may not use this file except in compliance with the License.                                                    // 2480
 * You may obtain a copy of the License at                                                                             // 2481
 *                                                                                                                     // 2482
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 2483
 *                                                                                                                     // 2484
 * Unless required by applicable law or agreed to in writing, software                                                 // 2485
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 2486
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 2487
 * See the License for the specific language governing permissions and                                                 // 2488
 * limitations under the License.                                                                                      // 2489
 *                                                                                                                     // 2490
 * @providesModule EventPluginRegistry                                                                                 // 2491
 * @typechecks static-only                                                                                             // 2492
 */                                                                                                                    // 2493
                                                                                                                       // 2494
"use strict";                                                                                                          // 2495
                                                                                                                       // 2496
var invariant = require("./invariant");                                                                                // 2497
                                                                                                                       // 2498
/**                                                                                                                    // 2499
 * Injectable ordering of event plugins.                                                                               // 2500
 */                                                                                                                    // 2501
var EventPluginOrder = null;                                                                                           // 2502
                                                                                                                       // 2503
/**                                                                                                                    // 2504
 * Injectable mapping from names to event plugin modules.                                                              // 2505
 */                                                                                                                    // 2506
var namesToPlugins = {};                                                                                               // 2507
                                                                                                                       // 2508
/**                                                                                                                    // 2509
 * Recomputes the plugin list using the injected plugins and plugin ordering.                                          // 2510
 *                                                                                                                     // 2511
 * @private                                                                                                            // 2512
 */                                                                                                                    // 2513
function recomputePluginOrdering() {                                                                                   // 2514
  if (!EventPluginOrder) {                                                                                             // 2515
    // Wait until an `EventPluginOrder` is injected.                                                                   // 2516
    return;                                                                                                            // 2517
  }                                                                                                                    // 2518
  for (var pluginName in namesToPlugins) {                                                                             // 2519
    var PluginModule = namesToPlugins[pluginName];                                                                     // 2520
    var pluginIndex = EventPluginOrder.indexOf(pluginName);                                                            // 2521
    ("production" !== "development" ? invariant(                                                                       // 2522
      pluginIndex > -1,                                                                                                // 2523
      'EventPluginRegistry: Cannot inject event plugins that do not exist in ' +                                       // 2524
      'the plugin ordering, `%s`.',                                                                                    // 2525
      pluginName                                                                                                       // 2526
    ) : invariant(pluginIndex > -1));                                                                                  // 2527
    if (EventPluginRegistry.plugins[pluginIndex]) {                                                                    // 2528
      continue;                                                                                                        // 2529
    }                                                                                                                  // 2530
    ("production" !== "development" ? invariant(                                                                       // 2531
      PluginModule.extractEvents,                                                                                      // 2532
      'EventPluginRegistry: Event plugins must implement an `extractEvents` ' +                                        // 2533
      'method, but `%s` does not.',                                                                                    // 2534
      pluginName                                                                                                       // 2535
    ) : invariant(PluginModule.extractEvents));                                                                        // 2536
    EventPluginRegistry.plugins[pluginIndex] = PluginModule;                                                           // 2537
    var publishedEvents = PluginModule.eventTypes;                                                                     // 2538
    for (var eventName in publishedEvents) {                                                                           // 2539
      ("production" !== "development" ? invariant(                                                                     // 2540
        publishEventForPlugin(publishedEvents[eventName], PluginModule),                                               // 2541
        'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.',                                          // 2542
        eventName,                                                                                                     // 2543
        pluginName                                                                                                     // 2544
      ) : invariant(publishEventForPlugin(publishedEvents[eventName], PluginModule)));                                 // 2545
    }                                                                                                                  // 2546
  }                                                                                                                    // 2547
}                                                                                                                      // 2548
                                                                                                                       // 2549
/**                                                                                                                    // 2550
 * Publishes an event so that it can be dispatched by the supplied plugin.                                             // 2551
 *                                                                                                                     // 2552
 * @param {object} dispatchConfig Dispatch configuration for the event.                                                // 2553
 * @param {object} PluginModule Plugin publishing the event.                                                           // 2554
 * @return {boolean} True if the event was successfully published.                                                     // 2555
 * @private                                                                                                            // 2556
 */                                                                                                                    // 2557
function publishEventForPlugin(dispatchConfig, PluginModule) {                                                         // 2558
  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;                                                // 2559
  if (phasedRegistrationNames) {                                                                                       // 2560
    for (var phaseName in phasedRegistrationNames) {                                                                   // 2561
      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {                                                         // 2562
        var phasedRegistrationName = phasedRegistrationNames[phaseName];                                               // 2563
        publishRegistrationName(phasedRegistrationName, PluginModule);                                                 // 2564
      }                                                                                                                // 2565
    }                                                                                                                  // 2566
    return true;                                                                                                       // 2567
  } else if (dispatchConfig.registrationName) {                                                                        // 2568
    publishRegistrationName(dispatchConfig.registrationName, PluginModule);                                            // 2569
    return true;                                                                                                       // 2570
  }                                                                                                                    // 2571
  return false;                                                                                                        // 2572
}                                                                                                                      // 2573
                                                                                                                       // 2574
/**                                                                                                                    // 2575
 * Publishes a registration name that is used to identify dispatched events and                                        // 2576
 * can be used with `EventPluginHub.putListener` to register listeners.                                                // 2577
 *                                                                                                                     // 2578
 * @param {string} registrationName Registration name to add.                                                          // 2579
 * @param {object} PluginModule Plugin publishing the event.                                                           // 2580
 * @private                                                                                                            // 2581
 */                                                                                                                    // 2582
function publishRegistrationName(registrationName, PluginModule) {                                                     // 2583
  ("production" !== "development" ? invariant(                                                                         // 2584
    !EventPluginRegistry.registrationNames[registrationName],                                                          // 2585
    'EventPluginHub: More than one plugin attempted to publish the same ' +                                            // 2586
    'registration name, `%s`.',                                                                                        // 2587
    registrationName                                                                                                   // 2588
  ) : invariant(!EventPluginRegistry.registrationNames[registrationName]));                                            // 2589
  EventPluginRegistry.registrationNames[registrationName] = PluginModule;                                              // 2590
}                                                                                                                      // 2591
                                                                                                                       // 2592
/**                                                                                                                    // 2593
 * Registers plugins so that they can extract and dispatch events.                                                     // 2594
 *                                                                                                                     // 2595
 * @see {EventPluginHub}                                                                                               // 2596
 */                                                                                                                    // 2597
var EventPluginRegistry = {                                                                                            // 2598
                                                                                                                       // 2599
  /**                                                                                                                  // 2600
   * Ordered list of injected plugins.                                                                                 // 2601
   */                                                                                                                  // 2602
  plugins: [],                                                                                                         // 2603
                                                                                                                       // 2604
  /**                                                                                                                  // 2605
   * Mapping from registration names to plugin modules.                                                                // 2606
   */                                                                                                                  // 2607
  registrationNames: {},                                                                                               // 2608
                                                                                                                       // 2609
  /**                                                                                                                  // 2610
   * Injects an ordering of plugins (by plugin name). This allows the ordering                                         // 2611
   * to be decoupled from injection of the actual plugins so that ordering is                                          // 2612
   * always deterministic regardless of packaging, on-the-fly injection, etc.                                          // 2613
   *                                                                                                                   // 2614
   * @param {array} InjectedEventPluginOrder                                                                           // 2615
   * @internal                                                                                                         // 2616
   * @see {EventPluginHub.injection.injectEventPluginOrder}                                                            // 2617
   */                                                                                                                  // 2618
  injectEventPluginOrder: function(InjectedEventPluginOrder) {                                                         // 2619
    ("production" !== "development" ? invariant(                                                                       // 2620
      !EventPluginOrder,                                                                                               // 2621
      'EventPluginRegistry: Cannot inject event plugin ordering more than once.'                                       // 2622
    ) : invariant(!EventPluginOrder));                                                                                 // 2623
    // Clone the ordering so it cannot be dynamically mutated.                                                         // 2624
    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);                                           // 2625
    recomputePluginOrdering();                                                                                         // 2626
  },                                                                                                                   // 2627
                                                                                                                       // 2628
  /**                                                                                                                  // 2629
   * Injects plugins to be used by `EventPluginHub`. The plugin names must be                                          // 2630
   * in the ordering injected by `injectEventPluginOrder`.                                                             // 2631
   *                                                                                                                   // 2632
   * Plugins can be injected as part of page initialization or on-the-fly.                                             // 2633
   *                                                                                                                   // 2634
   * @param {object} injectedNamesToPlugins Map from names to plugin modules.                                          // 2635
   * @internal                                                                                                         // 2636
   * @see {EventPluginHub.injection.injectEventPluginsByName}                                                          // 2637
   */                                                                                                                  // 2638
  injectEventPluginsByName: function(injectedNamesToPlugins) {                                                         // 2639
    var isOrderingDirty = false;                                                                                       // 2640
    for (var pluginName in injectedNamesToPlugins) {                                                                   // 2641
      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {                                                        // 2642
        continue;                                                                                                      // 2643
      }                                                                                                                // 2644
      var PluginModule = injectedNamesToPlugins[pluginName];                                                           // 2645
      if (namesToPlugins[pluginName] !== PluginModule) {                                                               // 2646
        ("production" !== "development" ? invariant(                                                                   // 2647
          !namesToPlugins[pluginName],                                                                                 // 2648
          'EventPluginRegistry: Cannot inject two different event plugins ' +                                          // 2649
          'using the same name, `%s`.',                                                                                // 2650
          pluginName                                                                                                   // 2651
        ) : invariant(!namesToPlugins[pluginName]));                                                                   // 2652
        namesToPlugins[pluginName] = PluginModule;                                                                     // 2653
        isOrderingDirty = true;                                                                                        // 2654
      }                                                                                                                // 2655
    }                                                                                                                  // 2656
    if (isOrderingDirty) {                                                                                             // 2657
      recomputePluginOrdering();                                                                                       // 2658
    }                                                                                                                  // 2659
  },                                                                                                                   // 2660
                                                                                                                       // 2661
  /**                                                                                                                  // 2662
   * Looks up the plugin for the supplied event.                                                                       // 2663
   *                                                                                                                   // 2664
   * @param {object} event A synthetic event.                                                                          // 2665
   * @return {?object} The plugin that created the supplied event.                                                     // 2666
   * @internal                                                                                                         // 2667
   */                                                                                                                  // 2668
  getPluginModuleForEvent: function(event) {                                                                           // 2669
    var dispatchConfig = event.dispatchConfig;                                                                         // 2670
    if (dispatchConfig.registrationName) {                                                                             // 2671
      return EventPluginRegistry.registrationNames[                                                                    // 2672
        dispatchConfig.registrationName                                                                                // 2673
      ] || null;                                                                                                       // 2674
    }                                                                                                                  // 2675
    for (var phase in dispatchConfig.phasedRegistrationNames) {                                                        // 2676
      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {                                             // 2677
        continue;                                                                                                      // 2678
      }                                                                                                                // 2679
      var PluginModule = EventPluginRegistry.registrationNames[                                                        // 2680
        dispatchConfig.phasedRegistrationNames[phase]                                                                  // 2681
      ];                                                                                                               // 2682
      if (PluginModule) {                                                                                              // 2683
        return PluginModule;                                                                                           // 2684
      }                                                                                                                // 2685
    }                                                                                                                  // 2686
    return null;                                                                                                       // 2687
  },                                                                                                                   // 2688
                                                                                                                       // 2689
  /**                                                                                                                  // 2690
   * Exposed for unit testing.                                                                                         // 2691
   * @private                                                                                                          // 2692
   */                                                                                                                  // 2693
  _resetEventPlugins: function() {                                                                                     // 2694
    EventPluginOrder = null;                                                                                           // 2695
    for (var pluginName in namesToPlugins) {                                                                           // 2696
      if (namesToPlugins.hasOwnProperty(pluginName)) {                                                                 // 2697
        delete namesToPlugins[pluginName];                                                                             // 2698
      }                                                                                                                // 2699
    }                                                                                                                  // 2700
    EventPluginRegistry.plugins.length = 0;                                                                            // 2701
    var registrationNames = EventPluginRegistry.registrationNames;                                                     // 2702
    for (var registrationName in registrationNames) {                                                                  // 2703
      if (registrationNames.hasOwnProperty(registrationName)) {                                                        // 2704
        delete registrationNames[registrationName];                                                                    // 2705
      }                                                                                                                // 2706
    }                                                                                                                  // 2707
  }                                                                                                                    // 2708
                                                                                                                       // 2709
};                                                                                                                     // 2710
                                                                                                                       // 2711
module.exports = EventPluginRegistry;                                                                                  // 2712
                                                                                                                       // 2713
},{"./invariant":109}],19:[function(require,module,exports){                                                           // 2714
/**                                                                                                                    // 2715
 * Copyright 2013 Facebook, Inc.                                                                                       // 2716
 *                                                                                                                     // 2717
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 2718
 * you may not use this file except in compliance with the License.                                                    // 2719
 * You may obtain a copy of the License at                                                                             // 2720
 *                                                                                                                     // 2721
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 2722
 *                                                                                                                     // 2723
 * Unless required by applicable law or agreed to in writing, software                                                 // 2724
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 2725
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 2726
 * See the License for the specific language governing permissions and                                                 // 2727
 * limitations under the License.                                                                                      // 2728
 *                                                                                                                     // 2729
 * @providesModule EventPluginUtils                                                                                    // 2730
 */                                                                                                                    // 2731
                                                                                                                       // 2732
"use strict";                                                                                                          // 2733
                                                                                                                       // 2734
var EventConstants = require("./EventConstants");                                                                      // 2735
                                                                                                                       // 2736
var invariant = require("./invariant");                                                                                // 2737
                                                                                                                       // 2738
var topLevelTypes = EventConstants.topLevelTypes;                                                                      // 2739
                                                                                                                       // 2740
function isEndish(topLevelType) {                                                                                      // 2741
  return topLevelType === topLevelTypes.topMouseUp ||                                                                  // 2742
         topLevelType === topLevelTypes.topTouchEnd ||                                                                 // 2743
         topLevelType === topLevelTypes.topTouchCancel;                                                                // 2744
}                                                                                                                      // 2745
                                                                                                                       // 2746
function isMoveish(topLevelType) {                                                                                     // 2747
  return topLevelType === topLevelTypes.topMouseMove ||                                                                // 2748
         topLevelType === topLevelTypes.topTouchMove;                                                                  // 2749
}                                                                                                                      // 2750
function isStartish(topLevelType) {                                                                                    // 2751
  return topLevelType === topLevelTypes.topMouseDown ||                                                                // 2752
         topLevelType === topLevelTypes.topTouchStart;                                                                 // 2753
}                                                                                                                      // 2754
                                                                                                                       // 2755
var validateEventDispatches;                                                                                           // 2756
if ("production" !== "development") {                                                                                  // 2757
  validateEventDispatches = function(event) {                                                                          // 2758
    var dispatchListeners = event._dispatchListeners;                                                                  // 2759
    var dispatchIDs = event._dispatchIDs;                                                                              // 2760
                                                                                                                       // 2761
    var listenersIsArr = Array.isArray(dispatchListeners);                                                             // 2762
    var idsIsArr = Array.isArray(dispatchIDs);                                                                         // 2763
    var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;                                                  // 2764
    var listenersLen = listenersIsArr ?                                                                                // 2765
      dispatchListeners.length :                                                                                       // 2766
      dispatchListeners ? 1 : 0;                                                                                       // 2767
                                                                                                                       // 2768
    ("production" !== "development" ? invariant(                                                                       // 2769
      idsIsArr === listenersIsArr && IDsLen === listenersLen,                                                          // 2770
      'EventPluginUtils: Invalid `event`.'                                                                             // 2771
    ) : invariant(idsIsArr === listenersIsArr && IDsLen === listenersLen));                                            // 2772
  };                                                                                                                   // 2773
}                                                                                                                      // 2774
                                                                                                                       // 2775
/**                                                                                                                    // 2776
 * Invokes `cb(event, listener, id)`. Avoids using call if no scope is                                                 // 2777
 * provided. The `(listener,id)` pair effectively forms the "dispatch" but are                                         // 2778
 * kept separate to conserve memory.                                                                                   // 2779
 */                                                                                                                    // 2780
function forEachEventDispatch(event, cb) {                                                                             // 2781
  var dispatchListeners = event._dispatchListeners;                                                                    // 2782
  var dispatchIDs = event._dispatchIDs;                                                                                // 2783
  if ("production" !== "development") {                                                                                // 2784
    validateEventDispatches(event);                                                                                    // 2785
  }                                                                                                                    // 2786
  if (Array.isArray(dispatchListeners)) {                                                                              // 2787
    for (var i = 0; i < dispatchListeners.length; i++) {                                                               // 2788
      if (event.isPropagationStopped()) {                                                                              // 2789
        break;                                                                                                         // 2790
      }                                                                                                                // 2791
      // Listeners and IDs are two parallel arrays that are always in sync.                                            // 2792
      cb(event, dispatchListeners[i], dispatchIDs[i]);                                                                 // 2793
    }                                                                                                                  // 2794
  } else if (dispatchListeners) {                                                                                      // 2795
    cb(event, dispatchListeners, dispatchIDs);                                                                         // 2796
  }                                                                                                                    // 2797
}                                                                                                                      // 2798
                                                                                                                       // 2799
/**                                                                                                                    // 2800
 * Default implementation of PluginModule.executeDispatch().                                                           // 2801
 * @param {SyntheticEvent} SyntheticEvent to handle                                                                    // 2802
 * @param {function} Application-level callback                                                                        // 2803
 * @param {string} domID DOM id to pass to the callback.                                                               // 2804
 */                                                                                                                    // 2805
function executeDispatch(event, listener, domID) {                                                                     // 2806
  listener(event, domID);                                                                                              // 2807
}                                                                                                                      // 2808
                                                                                                                       // 2809
/**                                                                                                                    // 2810
 * Standard/simple iteration through an event's collected dispatches.                                                  // 2811
 */                                                                                                                    // 2812
function executeDispatchesInOrder(event, executeDispatch) {                                                            // 2813
  forEachEventDispatch(event, executeDispatch);                                                                        // 2814
  event._dispatchListeners = null;                                                                                     // 2815
  event._dispatchIDs = null;                                                                                           // 2816
}                                                                                                                      // 2817
                                                                                                                       // 2818
/**                                                                                                                    // 2819
 * Standard/simple iteration through an event's collected dispatches, but stops                                        // 2820
 * at the first dispatch execution returning true, and returns that id.                                                // 2821
 *                                                                                                                     // 2822
 * @return id of the first dispatch execution who's listener returns true, or                                          // 2823
 * null if no listener returned true.                                                                                  // 2824
 */                                                                                                                    // 2825
function executeDispatchesInOrderStopAtTrue(event) {                                                                   // 2826
  var dispatchListeners = event._dispatchListeners;                                                                    // 2827
  var dispatchIDs = event._dispatchIDs;                                                                                // 2828
  if ("production" !== "development") {                                                                                // 2829
    validateEventDispatches(event);                                                                                    // 2830
  }                                                                                                                    // 2831
  if (Array.isArray(dispatchListeners)) {                                                                              // 2832
    for (var i = 0; i < dispatchListeners.length; i++) {                                                               // 2833
      if (event.isPropagationStopped()) {                                                                              // 2834
        break;                                                                                                         // 2835
      }                                                                                                                // 2836
      // Listeners and IDs are two parallel arrays that are always in sync.                                            // 2837
      if (dispatchListeners[i](event, dispatchIDs[i])) {                                                               // 2838
        return dispatchIDs[i];                                                                                         // 2839
      }                                                                                                                // 2840
    }                                                                                                                  // 2841
  } else if (dispatchListeners) {                                                                                      // 2842
    if (dispatchListeners(event, dispatchIDs)) {                                                                       // 2843
      return dispatchIDs;                                                                                              // 2844
    }                                                                                                                  // 2845
  }                                                                                                                    // 2846
  return null;                                                                                                         // 2847
}                                                                                                                      // 2848
                                                                                                                       // 2849
/**                                                                                                                    // 2850
 * Execution of a "direct" dispatch - there must be at most one dispatch                                               // 2851
 * accumulated on the event or it is considered an error. It doesn't really make                                       // 2852
 * sense for an event with multiple dispatches (bubbled) to keep track of the                                          // 2853
 * return values at each dispatch execution, but it does tend to make sense when                                       // 2854
 * dealing with "direct" dispatches.                                                                                   // 2855
 *                                                                                                                     // 2856
 * @return The return value of executing the single dispatch.                                                          // 2857
 */                                                                                                                    // 2858
function executeDirectDispatch(event) {                                                                                // 2859
  if ("production" !== "development") {                                                                                // 2860
    validateEventDispatches(event);                                                                                    // 2861
  }                                                                                                                    // 2862
  var dispatchListener = event._dispatchListeners;                                                                     // 2863
  var dispatchID = event._dispatchIDs;                                                                                 // 2864
  ("production" !== "development" ? invariant(                                                                         // 2865
    !Array.isArray(dispatchListener),                                                                                  // 2866
    'executeDirectDispatch(...): Invalid `event`.'                                                                     // 2867
  ) : invariant(!Array.isArray(dispatchListener)));                                                                    // 2868
  var res = dispatchListener ?                                                                                         // 2869
    dispatchListener(event, dispatchID) :                                                                              // 2870
    null;                                                                                                              // 2871
  event._dispatchListeners = null;                                                                                     // 2872
  event._dispatchIDs = null;                                                                                           // 2873
  return res;                                                                                                          // 2874
}                                                                                                                      // 2875
                                                                                                                       // 2876
/**                                                                                                                    // 2877
 * @param {SyntheticEvent} event                                                                                       // 2878
 * @return {bool} True iff number of dispatches accumulated is greater than 0.                                         // 2879
 */                                                                                                                    // 2880
function hasDispatches(event) {                                                                                        // 2881
  return !!event._dispatchListeners;                                                                                   // 2882
}                                                                                                                      // 2883
                                                                                                                       // 2884
/**                                                                                                                    // 2885
 * General utilities that are useful in creating custom Event Plugins.                                                 // 2886
 */                                                                                                                    // 2887
var EventPluginUtils = {                                                                                               // 2888
  isEndish: isEndish,                                                                                                  // 2889
  isMoveish: isMoveish,                                                                                                // 2890
  isStartish: isStartish,                                                                                              // 2891
  executeDispatchesInOrder: executeDispatchesInOrder,                                                                  // 2892
  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,                                              // 2893
  executeDirectDispatch: executeDirectDispatch,                                                                        // 2894
  hasDispatches: hasDispatches,                                                                                        // 2895
  executeDispatch: executeDispatch                                                                                     // 2896
};                                                                                                                     // 2897
                                                                                                                       // 2898
module.exports = EventPluginUtils;                                                                                     // 2899
                                                                                                                       // 2900
},{"./EventConstants":15,"./invariant":109}],20:[function(require,module,exports){                                     // 2901
/**                                                                                                                    // 2902
 * Copyright 2013 Facebook, Inc.                                                                                       // 2903
 *                                                                                                                     // 2904
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 2905
 * you may not use this file except in compliance with the License.                                                    // 2906
 * You may obtain a copy of the License at                                                                             // 2907
 *                                                                                                                     // 2908
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 2909
 *                                                                                                                     // 2910
 * Unless required by applicable law or agreed to in writing, software                                                 // 2911
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 2912
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 2913
 * See the License for the specific language governing permissions and                                                 // 2914
 * limitations under the License.                                                                                      // 2915
 *                                                                                                                     // 2916
 * @providesModule EventPropagators                                                                                    // 2917
 */                                                                                                                    // 2918
                                                                                                                       // 2919
"use strict";                                                                                                          // 2920
                                                                                                                       // 2921
var CallbackRegistry = require("./CallbackRegistry");                                                                  // 2922
var EventConstants = require("./EventConstants");                                                                      // 2923
                                                                                                                       // 2924
var accumulate = require("./accumulate");                                                                              // 2925
var forEachAccumulated = require("./forEachAccumulated");                                                              // 2926
var getListener = CallbackRegistry.getListener;                                                                        // 2927
var PropagationPhases = EventConstants.PropagationPhases;                                                              // 2928
                                                                                                                       // 2929
/**                                                                                                                    // 2930
 * Injected dependencies:                                                                                              // 2931
 */                                                                                                                    // 2932
                                                                                                                       // 2933
/**                                                                                                                    // 2934
 * - `InstanceHandle`: [required] Module that performs logical traversals of DOM                                       // 2935
 *   hierarchy given ids of the logical DOM elements involved.                                                         // 2936
 */                                                                                                                    // 2937
var injection = {                                                                                                      // 2938
  InstanceHandle: null,                                                                                                // 2939
  injectInstanceHandle: function(InjectedInstanceHandle) {                                                             // 2940
    injection.InstanceHandle = InjectedInstanceHandle;                                                                 // 2941
    if ("production" !== "development") {                                                                              // 2942
      injection.validate();                                                                                            // 2943
    }                                                                                                                  // 2944
  },                                                                                                                   // 2945
  validate: function() {                                                                                               // 2946
    var invalid = !injection.InstanceHandle||                                                                          // 2947
      !injection.InstanceHandle.traverseTwoPhase ||                                                                    // 2948
      !injection.InstanceHandle.traverseEnterLeave;                                                                    // 2949
    if (invalid) {                                                                                                     // 2950
      throw new Error('InstanceHandle not injected before use!');                                                      // 2951
    }                                                                                                                  // 2952
  }                                                                                                                    // 2953
};                                                                                                                     // 2954
                                                                                                                       // 2955
/**                                                                                                                    // 2956
 * Some event types have a notion of different registration names for different                                        // 2957
 * "phases" of propagation. This finds listeners by a given phase.                                                     // 2958
 */                                                                                                                    // 2959
function listenerAtPhase(id, event, propagationPhase) {                                                                // 2960
  var registrationName =                                                                                               // 2961
    event.dispatchConfig.phasedRegistrationNames[propagationPhase];                                                    // 2962
  return getListener(id, registrationName);                                                                            // 2963
}                                                                                                                      // 2964
                                                                                                                       // 2965
/**                                                                                                                    // 2966
 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function                                           // 2967
 * here, allows us to not have to bind or create functions for each event.                                             // 2968
 * Mutating the event's members allows us to not have to create a wrapping                                             // 2969
 * "dispatch" object that pairs the event with the listener.                                                           // 2970
 */                                                                                                                    // 2971
function accumulateDirectionalDispatches(domID, upwards, event) {                                                      // 2972
  if ("production" !== "development") {                                                                                // 2973
    if (!domID) {                                                                                                      // 2974
      throw new Error('Dispatching id must not be null');                                                              // 2975
    }                                                                                                                  // 2976
    injection.validate();                                                                                              // 2977
  }                                                                                                                    // 2978
  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;                                        // 2979
  var listener = listenerAtPhase(domID, event, phase);                                                                 // 2980
  if (listener) {                                                                                                      // 2981
    event._dispatchListeners = accumulate(event._dispatchListeners, listener);                                         // 2982
    event._dispatchIDs = accumulate(event._dispatchIDs, domID);                                                        // 2983
  }                                                                                                                    // 2984
}                                                                                                                      // 2985
                                                                                                                       // 2986
/**                                                                                                                    // 2987
 * Collect dispatches (must be entirely collected before dispatching - see unit                                        // 2988
 * tests). Lazily allocate the array to conserve memory.  We must loop through                                         // 2989
 * each event and perform the traversal for each one. We can not perform a                                             // 2990
 * single traversal for the entire collection of events because each event may                                         // 2991
 * have a different target.                                                                                            // 2992
 */                                                                                                                    // 2993
function accumulateTwoPhaseDispatchesSingle(event) {                                                                   // 2994
  if (event && event.dispatchConfig.phasedRegistrationNames) {                                                         // 2995
    injection.InstanceHandle.traverseTwoPhase(                                                                         // 2996
      event.dispatchMarker,                                                                                            // 2997
      accumulateDirectionalDispatches,                                                                                 // 2998
      event                                                                                                            // 2999
    );                                                                                                                 // 3000
  }                                                                                                                    // 3001
}                                                                                                                      // 3002
                                                                                                                       // 3003
                                                                                                                       // 3004
/**                                                                                                                    // 3005
 * Accumulates without regard to direction, does not look for phased                                                   // 3006
 * registration names. Same as `accumulateDirectDispatchesSingle` but without                                          // 3007
 * requiring that the `dispatchMarker` be the same as the dispatched ID.                                               // 3008
 */                                                                                                                    // 3009
function accumulateDispatches(id, ignoredDirection, event) {                                                           // 3010
  if (event && event.dispatchConfig.registrationName) {                                                                // 3011
    var registrationName = event.dispatchConfig.registrationName;                                                      // 3012
    var listener = getListener(id, registrationName);                                                                  // 3013
    if (listener) {                                                                                                    // 3014
      event._dispatchListeners = accumulate(event._dispatchListeners, listener);                                       // 3015
      event._dispatchIDs = accumulate(event._dispatchIDs, id);                                                         // 3016
    }                                                                                                                  // 3017
  }                                                                                                                    // 3018
}                                                                                                                      // 3019
                                                                                                                       // 3020
/**                                                                                                                    // 3021
 * Accumulates dispatches on an `SyntheticEvent`, but only for the                                                     // 3022
 * `dispatchMarker`.                                                                                                   // 3023
 * @param {SyntheticEvent} event                                                                                       // 3024
 */                                                                                                                    // 3025
function accumulateDirectDispatchesSingle(event) {                                                                     // 3026
  if (event && event.dispatchConfig.registrationName) {                                                                // 3027
    accumulateDispatches(event.dispatchMarker, null, event);                                                           // 3028
  }                                                                                                                    // 3029
}                                                                                                                      // 3030
                                                                                                                       // 3031
function accumulateTwoPhaseDispatches(events) {                                                                        // 3032
  if ("production" !== "development") {                                                                                // 3033
    injection.validate();                                                                                              // 3034
  }                                                                                                                    // 3035
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);                                                      // 3036
}                                                                                                                      // 3037
                                                                                                                       // 3038
function accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {                                                  // 3039
  if ("production" !== "development") {                                                                                // 3040
    injection.validate();                                                                                              // 3041
  }                                                                                                                    // 3042
  injection.InstanceHandle.traverseEnterLeave(                                                                         // 3043
    fromID,                                                                                                            // 3044
    toID,                                                                                                              // 3045
    accumulateDispatches,                                                                                              // 3046
    leave,                                                                                                             // 3047
    enter                                                                                                              // 3048
  );                                                                                                                   // 3049
}                                                                                                                      // 3050
                                                                                                                       // 3051
                                                                                                                       // 3052
function accumulateDirectDispatches(events) {                                                                          // 3053
  if ("production" !== "development") {                                                                                // 3054
    injection.validate();                                                                                              // 3055
  }                                                                                                                    // 3056
  forEachAccumulated(events, accumulateDirectDispatchesSingle);                                                        // 3057
}                                                                                                                      // 3058
                                                                                                                       // 3059
                                                                                                                       // 3060
                                                                                                                       // 3061
/**                                                                                                                    // 3062
 * A small set of propagation patterns, each of which will accept a small amount                                       // 3063
 * of information, and generate a set of "dispatch ready event objects" - which                                        // 3064
 * are sets of events that have already been annotated with a set of dispatched                                        // 3065
 * listener functions/ids. The API is designed this way to discourage these                                            // 3066
 * propagation strategies from actually executing the dispatches, since we                                             // 3067
 * always want to collect the entire set of dispatches before executing event a                                        // 3068
 * single one.                                                                                                         // 3069
 *                                                                                                                     // 3070
 * @constructor EventPropagators                                                                                       // 3071
 */                                                                                                                    // 3072
var EventPropagators = {                                                                                               // 3073
  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,                                                          // 3074
  accumulateDirectDispatches: accumulateDirectDispatches,                                                              // 3075
  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches,                                                      // 3076
  injection: injection                                                                                                 // 3077
};                                                                                                                     // 3078
                                                                                                                       // 3079
module.exports = EventPropagators;                                                                                     // 3080
                                                                                                                       // 3081
},{"./CallbackRegistry":5,"./EventConstants":15,"./accumulate":85,"./forEachAccumulated":99}],21:[function(require,module,exports){
/**                                                                                                                    // 3083
 * Copyright 2013 Facebook, Inc.                                                                                       // 3084
 *                                                                                                                     // 3085
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 3086
 * you may not use this file except in compliance with the License.                                                    // 3087
 * You may obtain a copy of the License at                                                                             // 3088
 *                                                                                                                     // 3089
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 3090
 *                                                                                                                     // 3091
 * Unless required by applicable law or agreed to in writing, software                                                 // 3092
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 3093
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 3094
 * See the License for the specific language governing permissions and                                                 // 3095
 * limitations under the License.                                                                                      // 3096
 *                                                                                                                     // 3097
 * @providesModule ExecutionEnvironment                                                                                // 3098
 */                                                                                                                    // 3099
                                                                                                                       // 3100
/*jslint evil: true */                                                                                                 // 3101
                                                                                                                       // 3102
"use strict";                                                                                                          // 3103
                                                                                                                       // 3104
var canUseDOM = typeof window !== 'undefined';                                                                         // 3105
                                                                                                                       // 3106
/**                                                                                                                    // 3107
 * Simple, lightweight module assisting with the detection and context of                                              // 3108
 * Worker. Helps avoid circular dependencies and allows code to reason about                                           // 3109
 * whether or not they are in a Worker, even if they never include the main                                            // 3110
 * `ReactWorker` dependency.                                                                                           // 3111
 */                                                                                                                    // 3112
var ExecutionEnvironment = {                                                                                           // 3113
                                                                                                                       // 3114
  canUseDOM: canUseDOM,                                                                                                // 3115
                                                                                                                       // 3116
  canUseWorkers: typeof Worker !== 'undefined',                                                                        // 3117
                                                                                                                       // 3118
  isInWorker: !canUseDOM // For now, this is true - might change in the future.                                        // 3119
                                                                                                                       // 3120
};                                                                                                                     // 3121
                                                                                                                       // 3122
module.exports = ExecutionEnvironment;                                                                                 // 3123
                                                                                                                       // 3124
},{}],22:[function(require,module,exports){                                                                            // 3125
/**                                                                                                                    // 3126
 * Copyright 2013 Facebook, Inc.                                                                                       // 3127
 *                                                                                                                     // 3128
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 3129
 * you may not use this file except in compliance with the License.                                                    // 3130
 * You may obtain a copy of the License at                                                                             // 3131
 *                                                                                                                     // 3132
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 3133
 *                                                                                                                     // 3134
 * Unless required by applicable law or agreed to in writing, software                                                 // 3135
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 3136
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 3137
 * See the License for the specific language governing permissions and                                                 // 3138
 * limitations under the License.                                                                                      // 3139
 *                                                                                                                     // 3140
 * @providesModule LinkedStateMixin                                                                                    // 3141
 * @typechecks static-only                                                                                             // 3142
 */                                                                                                                    // 3143
                                                                                                                       // 3144
"use strict";                                                                                                          // 3145
                                                                                                                       // 3146
var ReactLink = require("./ReactLink");                                                                                // 3147
var ReactStateSetters = require("./ReactStateSetters");                                                                // 3148
                                                                                                                       // 3149
/**                                                                                                                    // 3150
 * A simple mixin around ReactLink.forState().                                                                         // 3151
 */                                                                                                                    // 3152
var LinkedStateMixin = {                                                                                               // 3153
  /**                                                                                                                  // 3154
   * Create a ReactLink that's linked to part of this component's state. The                                           // 3155
   * ReactLink will have the current value of this.state[key] and will call                                            // 3156
   * setState() when a change is requested.                                                                            // 3157
   *                                                                                                                   // 3158
   * @param {string} key state key to update. Note: you may want to use keyOf()                                        // 3159
   * if you're using Google Closure Compiler advanced mode.                                                            // 3160
   * @return {ReactLink} ReactLink instance linking to the state.                                                      // 3161
   */                                                                                                                  // 3162
  linkState: function(key) {                                                                                           // 3163
    return new ReactLink(                                                                                              // 3164
      this.state[key],                                                                                                 // 3165
      ReactStateSetters.createStateKeySetter(this, key)                                                                // 3166
    );                                                                                                                 // 3167
  }                                                                                                                    // 3168
};                                                                                                                     // 3169
                                                                                                                       // 3170
module.exports = LinkedStateMixin;                                                                                     // 3171
                                                                                                                       // 3172
},{"./ReactLink":52,"./ReactStateSetters":64}],23:[function(require,module,exports){                                   // 3173
/**                                                                                                                    // 3174
 * Copyright 2013 Facebook, Inc.                                                                                       // 3175
 *                                                                                                                     // 3176
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 3177
 * you may not use this file except in compliance with the License.                                                    // 3178
 * You may obtain a copy of the License at                                                                             // 3179
 *                                                                                                                     // 3180
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 3181
 *                                                                                                                     // 3182
 * Unless required by applicable law or agreed to in writing, software                                                 // 3183
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 3184
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 3185
 * See the License for the specific language governing permissions and                                                 // 3186
 * limitations under the License.                                                                                      // 3187
 *                                                                                                                     // 3188
 * @providesModule LinkedValueMixin                                                                                    // 3189
 * @typechecks static-only                                                                                             // 3190
 */                                                                                                                    // 3191
                                                                                                                       // 3192
"use strict";                                                                                                          // 3193
                                                                                                                       // 3194
var invariant = require("./invariant");                                                                                // 3195
                                                                                                                       // 3196
/**                                                                                                                    // 3197
 * Provide a linked `value` attribute for controlled forms. You should not use                                         // 3198
 * this outside of the ReactDOM controlled form components.                                                            // 3199
 */                                                                                                                    // 3200
var LinkedValueMixin = {                                                                                               // 3201
  _assertLink: function() {                                                                                            // 3202
    ("production" !== "development" ? invariant(                                                                       // 3203
      this.props.value == null && this.props.onChange == null,                                                         // 3204
      'Cannot provide a valueLink and a value or onChange event. If you ' +                                            // 3205
        'want to use value or onChange, you probably don\'t want to use ' +                                            // 3206
        'valueLink'                                                                                                    // 3207
    ) : invariant(this.props.value == null && this.props.onChange == null));                                           // 3208
  },                                                                                                                   // 3209
                                                                                                                       // 3210
  /**                                                                                                                  // 3211
   * @return {*} current value of the input either from value prop or link.                                            // 3212
   */                                                                                                                  // 3213
  getValue: function() {                                                                                               // 3214
    if (this.props.valueLink) {                                                                                        // 3215
      this._assertLink();                                                                                              // 3216
      return this.props.valueLink.value;                                                                               // 3217
    }                                                                                                                  // 3218
    return this.props.value;                                                                                           // 3219
  },                                                                                                                   // 3220
                                                                                                                       // 3221
  /**                                                                                                                  // 3222
   * @return {function} change callback either from onChange prop or link.                                             // 3223
   */                                                                                                                  // 3224
  getOnChange: function() {                                                                                            // 3225
    if (this.props.valueLink) {                                                                                        // 3226
      this._assertLink();                                                                                              // 3227
      return this._handleLinkedValueChange;                                                                            // 3228
    }                                                                                                                  // 3229
    return this.props.onChange;                                                                                        // 3230
  },                                                                                                                   // 3231
                                                                                                                       // 3232
  /**                                                                                                                  // 3233
   * @param {SyntheticEvent} e change event to handle                                                                  // 3234
   */                                                                                                                  // 3235
  _handleLinkedValueChange: function(e) {                                                                              // 3236
    this.props.valueLink.requestChange(e.target.value);                                                                // 3237
  }                                                                                                                    // 3238
};                                                                                                                     // 3239
                                                                                                                       // 3240
module.exports = LinkedValueMixin;                                                                                     // 3241
                                                                                                                       // 3242
},{"./invariant":109}],24:[function(require,module,exports){                                                           // 3243
/**                                                                                                                    // 3244
 * Copyright 2013 Facebook, Inc.                                                                                       // 3245
 *                                                                                                                     // 3246
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 3247
 * you may not use this file except in compliance with the License.                                                    // 3248
 * You may obtain a copy of the License at                                                                             // 3249
 *                                                                                                                     // 3250
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 3251
 *                                                                                                                     // 3252
 * Unless required by applicable law or agreed to in writing, software                                                 // 3253
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 3254
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 3255
 * See the License for the specific language governing permissions and                                                 // 3256
 * limitations under the License.                                                                                      // 3257
 *                                                                                                                     // 3258
 * @providesModule MobileSafariClickEventPlugin                                                                        // 3259
 * @typechecks static-only                                                                                             // 3260
 */                                                                                                                    // 3261
                                                                                                                       // 3262
"use strict";                                                                                                          // 3263
                                                                                                                       // 3264
var EventConstants = require("./EventConstants");                                                                      // 3265
                                                                                                                       // 3266
var emptyFunction = require("./emptyFunction");                                                                        // 3267
                                                                                                                       // 3268
var topLevelTypes = EventConstants.topLevelTypes;                                                                      // 3269
                                                                                                                       // 3270
/**                                                                                                                    // 3271
 * Mobile Safari does not fire properly bubble click events on non-interactive                                         // 3272
 * elements, which means delegated click listeners do not fire. The workaround                                         // 3273
 * for this bug involves attaching an empty click listener on the target node.                                         // 3274
 *                                                                                                                     // 3275
 * This particular plugin works around the bug by attaching an empty click                                             // 3276
 * listener on `touchstart` (which does fire on every element).                                                        // 3277
 */                                                                                                                    // 3278
var MobileSafariClickEventPlugin = {                                                                                   // 3279
                                                                                                                       // 3280
  eventTypes: null,                                                                                                    // 3281
                                                                                                                       // 3282
  /**                                                                                                                  // 3283
   * @param {string} topLevelType Record from `EventConstants`.                                                        // 3284
   * @param {DOMEventTarget} topLevelTarget The listening component root node.                                         // 3285
   * @param {string} topLevelTargetID ID of `topLevelTarget`.                                                          // 3286
   * @param {object} nativeEvent Native browser event.                                                                 // 3287
   * @return {*} An accumulation of synthetic events.                                                                  // 3288
   * @see {EventPluginHub.extractEvents}                                                                               // 3289
   */                                                                                                                  // 3290
  extractEvents: function(                                                                                             // 3291
      topLevelType,                                                                                                    // 3292
      topLevelTarget,                                                                                                  // 3293
      topLevelTargetID,                                                                                                // 3294
      nativeEvent) {                                                                                                   // 3295
    if (topLevelType === topLevelTypes.topTouchStart) {                                                                // 3296
      var target = nativeEvent.target;                                                                                 // 3297
      if (target && !target.onclick) {                                                                                 // 3298
        target.onclick = emptyFunction;                                                                                // 3299
      }                                                                                                                // 3300
    }                                                                                                                  // 3301
  }                                                                                                                    // 3302
                                                                                                                       // 3303
};                                                                                                                     // 3304
                                                                                                                       // 3305
module.exports = MobileSafariClickEventPlugin;                                                                         // 3306
                                                                                                                       // 3307
},{"./EventConstants":15,"./emptyFunction":94}],25:[function(require,module,exports){                                  // 3308
/**                                                                                                                    // 3309
 * Copyright 2013 Facebook, Inc.                                                                                       // 3310
 *                                                                                                                     // 3311
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 3312
 * you may not use this file except in compliance with the License.                                                    // 3313
 * You may obtain a copy of the License at                                                                             // 3314
 *                                                                                                                     // 3315
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 3316
 *                                                                                                                     // 3317
 * Unless required by applicable law or agreed to in writing, software                                                 // 3318
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 3319
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 3320
 * See the License for the specific language governing permissions and                                                 // 3321
 * limitations under the License.                                                                                      // 3322
 *                                                                                                                     // 3323
 * @providesModule PooledClass                                                                                         // 3324
 */                                                                                                                    // 3325
                                                                                                                       // 3326
"use strict";                                                                                                          // 3327
                                                                                                                       // 3328
/**                                                                                                                    // 3329
 * Static poolers. Several custom versions for each potential number of                                                // 3330
 * arguments. A completely generic pooler is easy to implement, but would                                              // 3331
 * require accessing the `arguments` object. In each of these, `this` refers to                                        // 3332
 * the Class itself, not an instance. If any others are needed, simply add them                                        // 3333
 * here, or in their own files.                                                                                        // 3334
 */                                                                                                                    // 3335
var oneArgumentPooler = function(copyFieldsFrom) {                                                                     // 3336
  var Klass = this;                                                                                                    // 3337
  if (Klass.instancePool.length) {                                                                                     // 3338
    var instance = Klass.instancePool.pop();                                                                           // 3339
    Klass.call(instance, copyFieldsFrom);                                                                              // 3340
    return instance;                                                                                                   // 3341
  } else {                                                                                                             // 3342
    return new Klass(copyFieldsFrom);                                                                                  // 3343
  }                                                                                                                    // 3344
};                                                                                                                     // 3345
                                                                                                                       // 3346
var twoArgumentPooler = function(a1, a2) {                                                                             // 3347
  var Klass = this;                                                                                                    // 3348
  if (Klass.instancePool.length) {                                                                                     // 3349
    var instance = Klass.instancePool.pop();                                                                           // 3350
    Klass.call(instance, a1, a2);                                                                                      // 3351
    return instance;                                                                                                   // 3352
  } else {                                                                                                             // 3353
    return new Klass(a1, a2);                                                                                          // 3354
  }                                                                                                                    // 3355
};                                                                                                                     // 3356
                                                                                                                       // 3357
var threeArgumentPooler = function(a1, a2, a3) {                                                                       // 3358
  var Klass = this;                                                                                                    // 3359
  if (Klass.instancePool.length) {                                                                                     // 3360
    var instance = Klass.instancePool.pop();                                                                           // 3361
    Klass.call(instance, a1, a2, a3);                                                                                  // 3362
    return instance;                                                                                                   // 3363
  } else {                                                                                                             // 3364
    return new Klass(a1, a2, a3);                                                                                      // 3365
  }                                                                                                                    // 3366
};                                                                                                                     // 3367
                                                                                                                       // 3368
var fiveArgumentPooler = function(a1, a2, a3, a4, a5) {                                                                // 3369
  var Klass = this;                                                                                                    // 3370
  if (Klass.instancePool.length) {                                                                                     // 3371
    var instance = Klass.instancePool.pop();                                                                           // 3372
    Klass.call(instance, a1, a2, a3, a4, a5);                                                                          // 3373
    return instance;                                                                                                   // 3374
  } else {                                                                                                             // 3375
    return new Klass(a1, a2, a3, a4, a5);                                                                              // 3376
  }                                                                                                                    // 3377
};                                                                                                                     // 3378
                                                                                                                       // 3379
var standardReleaser = function(instance) {                                                                            // 3380
  var Klass = this;                                                                                                    // 3381
  if (instance.destructor) {                                                                                           // 3382
    instance.destructor();                                                                                             // 3383
  }                                                                                                                    // 3384
  if (Klass.instancePool.length < Klass.poolSize) {                                                                    // 3385
    Klass.instancePool.push(instance);                                                                                 // 3386
  }                                                                                                                    // 3387
};                                                                                                                     // 3388
                                                                                                                       // 3389
var DEFAULT_POOL_SIZE = 10;                                                                                            // 3390
var DEFAULT_POOLER = oneArgumentPooler;                                                                                // 3391
                                                                                                                       // 3392
/**                                                                                                                    // 3393
 * Augments `CopyConstructor` to be a poolable class, augmenting only the class                                        // 3394
 * itself (statically) not adding any prototypical fields. Any CopyConstructor                                         // 3395
 * you give this may have a `poolSize` property, and will look for a                                                   // 3396
 * prototypical `destructor` on instances (optional).                                                                  // 3397
 *                                                                                                                     // 3398
 * @param {Function} CopyConstructor Constructor that can be used to reset.                                            // 3399
 * @param {Function} pooler Customizable pooler.                                                                       // 3400
 */                                                                                                                    // 3401
var addPoolingTo = function(CopyConstructor, pooler) {                                                                 // 3402
  var NewKlass = CopyConstructor;                                                                                      // 3403
  NewKlass.instancePool = [];                                                                                          // 3404
  NewKlass.getPooled = pooler || DEFAULT_POOLER;                                                                       // 3405
  if (!NewKlass.poolSize) {                                                                                            // 3406
    NewKlass.poolSize = DEFAULT_POOL_SIZE;                                                                             // 3407
  }                                                                                                                    // 3408
  NewKlass.release = standardReleaser;                                                                                 // 3409
  return NewKlass;                                                                                                     // 3410
};                                                                                                                     // 3411
                                                                                                                       // 3412
var PooledClass = {                                                                                                    // 3413
  addPoolingTo: addPoolingTo,                                                                                          // 3414
  oneArgumentPooler: oneArgumentPooler,                                                                                // 3415
  twoArgumentPooler: twoArgumentPooler,                                                                                // 3416
  threeArgumentPooler: threeArgumentPooler,                                                                            // 3417
  fiveArgumentPooler: fiveArgumentPooler                                                                               // 3418
};                                                                                                                     // 3419
                                                                                                                       // 3420
module.exports = PooledClass;                                                                                          // 3421
                                                                                                                       // 3422
},{}],26:[function(require,module,exports){                                                                            // 3423
/**                                                                                                                    // 3424
 * Copyright 2013 Facebook, Inc.                                                                                       // 3425
 *                                                                                                                     // 3426
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 3427
 * you may not use this file except in compliance with the License.                                                    // 3428
 * You may obtain a copy of the License at                                                                             // 3429
 *                                                                                                                     // 3430
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 3431
 *                                                                                                                     // 3432
 * Unless required by applicable law or agreed to in writing, software                                                 // 3433
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 3434
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 3435
 * See the License for the specific language governing permissions and                                                 // 3436
 * limitations under the License.                                                                                      // 3437
 *                                                                                                                     // 3438
 * @providesModule React                                                                                               // 3439
 */                                                                                                                    // 3440
                                                                                                                       // 3441
"use strict";                                                                                                          // 3442
                                                                                                                       // 3443
var ReactComponent = require("./ReactComponent");                                                                      // 3444
var ReactCompositeComponent = require("./ReactCompositeComponent");                                                    // 3445
var ReactCurrentOwner = require("./ReactCurrentOwner");                                                                // 3446
var ReactDOM = require("./ReactDOM");                                                                                  // 3447
var ReactDOMComponent = require("./ReactDOMComponent");                                                                // 3448
var ReactDefaultInjection = require("./ReactDefaultInjection");                                                        // 3449
var ReactInstanceHandles = require("./ReactInstanceHandles");                                                          // 3450
var ReactMount = require("./ReactMount");                                                                              // 3451
var ReactMultiChild = require("./ReactMultiChild");                                                                    // 3452
var ReactPerf = require("./ReactPerf");                                                                                // 3453
var ReactPropTypes = require("./ReactPropTypes");                                                                      // 3454
var ReactServerRendering = require("./ReactServerRendering");                                                          // 3455
var ReactTextComponent = require("./ReactTextComponent");                                                              // 3456
                                                                                                                       // 3457
ReactDefaultInjection.inject();                                                                                        // 3458
                                                                                                                       // 3459
var React = {                                                                                                          // 3460
  DOM: ReactDOM,                                                                                                       // 3461
  PropTypes: ReactPropTypes,                                                                                           // 3462
  initializeTouchEvents: function(shouldUseTouch) {                                                                    // 3463
    ReactMount.useTouchEvents = shouldUseTouch;                                                                        // 3464
  },                                                                                                                   // 3465
  createClass: ReactCompositeComponent.createClass,                                                                    // 3466
  constructAndRenderComponent: ReactMount.constructAndRenderComponent,                                                 // 3467
  constructAndRenderComponentByID: ReactMount.constructAndRenderComponentByID,                                         // 3468
  renderComponent: ReactPerf.measure(                                                                                  // 3469
    'React',                                                                                                           // 3470
    'renderComponent',                                                                                                 // 3471
    ReactMount.renderComponent                                                                                         // 3472
  ),                                                                                                                   // 3473
  renderComponentToString: ReactServerRendering.renderComponentToString,                                               // 3474
  unmountComponentAtNode: ReactMount.unmountComponentAtNode,                                                           // 3475
  unmountAndReleaseReactRootNode: ReactMount.unmountAndReleaseReactRootNode,                                           // 3476
  isValidClass: ReactCompositeComponent.isValidClass,                                                                  // 3477
  isValidComponent: ReactComponent.isValidComponent,                                                                   // 3478
  __internals: {                                                                                                       // 3479
    Component: ReactComponent,                                                                                         // 3480
    CurrentOwner: ReactCurrentOwner,                                                                                   // 3481
    DOMComponent: ReactDOMComponent,                                                                                   // 3482
    InstanceHandles: ReactInstanceHandles,                                                                             // 3483
    Mount: ReactMount,                                                                                                 // 3484
    MultiChild: ReactMultiChild,                                                                                       // 3485
    TextComponent: ReactTextComponent                                                                                  // 3486
  }                                                                                                                    // 3487
};                                                                                                                     // 3488
                                                                                                                       // 3489
// Version exists only in the open-source version of React, not in Facebook's                                          // 3490
// internal version.                                                                                                   // 3491
React.version = '0.8.0';                                                                                               // 3492
                                                                                                                       // 3493
module.exports = React;                                                                                                // 3494
                                                                                                                       // 3495
},{"./ReactComponent":28,"./ReactCompositeComponent":31,"./ReactCurrentOwner":32,"./ReactDOM":33,"./ReactDOMComponent":35,"./ReactDefaultInjection":44,"./ReactInstanceHandles":51,"./ReactMount":54,"./ReactMultiChild":56,"./ReactPerf":59,"./ReactPropTypes":61,"./ReactServerRendering":63,"./ReactTextComponent":65}],27:[function(require,module,exports){
/**                                                                                                                    // 3497
 * Copyright 2013 Facebook, Inc.                                                                                       // 3498
 *                                                                                                                     // 3499
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 3500
 * you may not use this file except in compliance with the License.                                                    // 3501
 * You may obtain a copy of the License at                                                                             // 3502
 *                                                                                                                     // 3503
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 3504
 *                                                                                                                     // 3505
 * Unless required by applicable law or agreed to in writing, software                                                 // 3506
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 3507
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 3508
 * See the License for the specific language governing permissions and                                                 // 3509
 * limitations under the License.                                                                                      // 3510
 *                                                                                                                     // 3511
 * @providesModule ReactChildren                                                                                       // 3512
 */                                                                                                                    // 3513
                                                                                                                       // 3514
"use strict";                                                                                                          // 3515
                                                                                                                       // 3516
var PooledClass = require("./PooledClass");                                                                            // 3517
                                                                                                                       // 3518
var invariant = require("./invariant");                                                                                // 3519
var traverseAllChildren = require("./traverseAllChildren");                                                            // 3520
                                                                                                                       // 3521
var twoArgumentPooler = PooledClass.twoArgumentPooler;                                                                 // 3522
var threeArgumentPooler = PooledClass.threeArgumentPooler;                                                             // 3523
                                                                                                                       // 3524
/**                                                                                                                    // 3525
 * PooledClass representing the bookkeeping associated with performing a child                                         // 3526
 * traversal. Allows avoiding binding callbacks.                                                                       // 3527
 *                                                                                                                     // 3528
 * @constructor ForEachBookKeeping                                                                                     // 3529
 * @param {!function} forEachFunction Function to perform traversal with.                                              // 3530
 * @param {?*} forEachContext Context to perform context with.                                                         // 3531
 */                                                                                                                    // 3532
function ForEachBookKeeping(forEachFunction, forEachContext) {                                                         // 3533
  this.forEachFunction = forEachFunction;                                                                              // 3534
  this.forEachContext = forEachContext;                                                                                // 3535
}                                                                                                                      // 3536
PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);                                                       // 3537
                                                                                                                       // 3538
function forEachSingleChild(traverseContext, child, name, i) {                                                         // 3539
  var forEachBookKeeping = traverseContext;                                                                            // 3540
  forEachBookKeeping.forEachFunction.call(                                                                             // 3541
    forEachBookKeeping.forEachContext, child, i);                                                                      // 3542
}                                                                                                                      // 3543
                                                                                                                       // 3544
/**                                                                                                                    // 3545
 * Iterates through children that are typically specified as `props.children`.                                         // 3546
 *                                                                                                                     // 3547
 * The provided forEachFunc(child, index) will be called for each                                                      // 3548
 * leaf child.                                                                                                         // 3549
 *                                                                                                                     // 3550
 * @param {array} children                                                                                             // 3551
 * @param {function(*, int)} forEachFunc.                                                                              // 3552
 * @param {*} forEachContext Context for forEachContext.                                                               // 3553
 */                                                                                                                    // 3554
function forEachChildren(children, forEachFunc, forEachContext) {                                                      // 3555
  if (children == null) {                                                                                              // 3556
    return children;                                                                                                   // 3557
  }                                                                                                                    // 3558
                                                                                                                       // 3559
  var traverseContext =                                                                                                // 3560
    ForEachBookKeeping.getPooled(forEachFunc, forEachContext);                                                         // 3561
  traverseAllChildren(children, forEachSingleChild, traverseContext);                                                  // 3562
  ForEachBookKeeping.release(traverseContext);                                                                         // 3563
}                                                                                                                      // 3564
                                                                                                                       // 3565
/**                                                                                                                    // 3566
 * PooledClass representing the bookkeeping associated with performing a child                                         // 3567
 * mapping. Allows avoiding binding callbacks.                                                                         // 3568
 *                                                                                                                     // 3569
 * @constructor MapBookKeeping                                                                                         // 3570
 * @param {!*} mapResult Object containing the ordered map of results.                                                 // 3571
 * @param {!function} mapFunction Function to perform mapping with.                                                    // 3572
 * @param {?*} mapContext Context to perform mapping with.                                                             // 3573
 */                                                                                                                    // 3574
function MapBookKeeping(mapResult, mapFunction, mapContext) {                                                          // 3575
  this.mapResult = mapResult;                                                                                          // 3576
  this.mapFunction = mapFunction;                                                                                      // 3577
  this.mapContext = mapContext;                                                                                        // 3578
}                                                                                                                      // 3579
PooledClass.addPoolingTo(MapBookKeeping, threeArgumentPooler);                                                         // 3580
                                                                                                                       // 3581
function mapSingleChildIntoContext(traverseContext, child, name, i) {                                                  // 3582
  var mapBookKeeping = traverseContext;                                                                                // 3583
  var mapResult = mapBookKeeping.mapResult;                                                                            // 3584
  var mappedChild =                                                                                                    // 3585
    mapBookKeeping.mapFunction.call(mapBookKeeping.mapContext, child, i);                                              // 3586
  // We found a component instance                                                                                     // 3587
  ("production" !== "development" ? invariant(                                                                         // 3588
    !mapResult.hasOwnProperty(name),                                                                                   // 3589
    'ReactChildren.map(...): Encountered two children with the same key, ' +                                           // 3590
    '`%s`. Children keys must be unique.',                                                                             // 3591
    name                                                                                                               // 3592
  ) : invariant(!mapResult.hasOwnProperty(name)));                                                                     // 3593
  mapResult[name] = mappedChild;                                                                                       // 3594
}                                                                                                                      // 3595
                                                                                                                       // 3596
/**                                                                                                                    // 3597
 * Maps children that are typically specified as `props.children`.                                                     // 3598
 *                                                                                                                     // 3599
 * The provided mapFunction(child, key, index) will be called for each                                                 // 3600
 * leaf child.                                                                                                         // 3601
 *                                                                                                                     // 3602
 * TODO: This may likely break any calls to `ReactChildren.map` that were                                              // 3603
 * previously relying on the fact that we guarded against null children.                                               // 3604
 *                                                                                                                     // 3605
 * @param {array} children                                                                                             // 3606
 * @param {function(*, int)} mapFunction.                                                                              // 3607
 * @param {*} mapContext Context for mapFunction.                                                                      // 3608
 * @return {array} mirrored array with mapped children.                                                                // 3609
 */                                                                                                                    // 3610
function mapChildren(children, func, context) {                                                                        // 3611
  if (children == null) {                                                                                              // 3612
    return children;                                                                                                   // 3613
  }                                                                                                                    // 3614
                                                                                                                       // 3615
  var mapResult = {};                                                                                                  // 3616
  var traverseContext = MapBookKeeping.getPooled(mapResult, func, context);                                            // 3617
  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);                                           // 3618
  MapBookKeeping.release(traverseContext);                                                                             // 3619
  return mapResult;                                                                                                    // 3620
}                                                                                                                      // 3621
                                                                                                                       // 3622
var ReactChildren = {                                                                                                  // 3623
  forEach: forEachChildren,                                                                                            // 3624
  map: mapChildren                                                                                                     // 3625
};                                                                                                                     // 3626
                                                                                                                       // 3627
module.exports = ReactChildren;                                                                                        // 3628
                                                                                                                       // 3629
},{"./PooledClass":25,"./invariant":109,"./traverseAllChildren":127}],28:[function(require,module,exports){            // 3630
/**                                                                                                                    // 3631
 * Copyright 2013 Facebook, Inc.                                                                                       // 3632
 *                                                                                                                     // 3633
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 3634
 * you may not use this file except in compliance with the License.                                                    // 3635
 * You may obtain a copy of the License at                                                                             // 3636
 *                                                                                                                     // 3637
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 3638
 *                                                                                                                     // 3639
 * Unless required by applicable law or agreed to in writing, software                                                 // 3640
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 3641
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 3642
 * See the License for the specific language governing permissions and                                                 // 3643
 * limitations under the License.                                                                                      // 3644
 *                                                                                                                     // 3645
 * @providesModule ReactComponent                                                                                      // 3646
 */                                                                                                                    // 3647
                                                                                                                       // 3648
"use strict";                                                                                                          // 3649
                                                                                                                       // 3650
var ReactComponentEnvironment = require("./ReactComponentEnvironment");                                                // 3651
var ReactCurrentOwner = require("./ReactCurrentOwner");                                                                // 3652
var ReactOwner = require("./ReactOwner");                                                                              // 3653
var ReactUpdates = require("./ReactUpdates");                                                                          // 3654
                                                                                                                       // 3655
var invariant = require("./invariant");                                                                                // 3656
var keyMirror = require("./keyMirror");                                                                                // 3657
var merge = require("./merge");                                                                                        // 3658
                                                                                                                       // 3659
/**                                                                                                                    // 3660
 * Every React component is in one of these life cycles.                                                               // 3661
 */                                                                                                                    // 3662
var ComponentLifeCycle = keyMirror({                                                                                   // 3663
  /**                                                                                                                  // 3664
   * Mounted components have a DOM node representation and are capable of                                              // 3665
   * receiving new props.                                                                                              // 3666
   */                                                                                                                  // 3667
  MOUNTED: null,                                                                                                       // 3668
  /**                                                                                                                  // 3669
   * Unmounted components are inactive and cannot receive new props.                                                   // 3670
   */                                                                                                                  // 3671
  UNMOUNTED: null                                                                                                      // 3672
});                                                                                                                    // 3673
                                                                                                                       // 3674
/**                                                                                                                    // 3675
 * Warn if there's no key explicitly set on dynamic arrays of children.                                                // 3676
 * This allows us to keep track of children between updates.                                                           // 3677
 */                                                                                                                    // 3678
                                                                                                                       // 3679
var ownerHasWarned = {};                                                                                               // 3680
                                                                                                                       // 3681
/**                                                                                                                    // 3682
 * Warn if the component doesn't have an explicit key assigned to it.                                                  // 3683
 * This component is in an array. The array could grow and shrink or be                                                // 3684
 * reordered. All children, that hasn't already been validated, are required to                                        // 3685
 * have a "key" property assigned to it.                                                                               // 3686
 *                                                                                                                     // 3687
 * @internal                                                                                                           // 3688
 * @param {ReactComponent} component Component that requires a key.                                                    // 3689
 */                                                                                                                    // 3690
function validateExplicitKey(component) {                                                                              // 3691
  if (component.__keyValidated__ || component.props.key != null) {                                                     // 3692
    return;                                                                                                            // 3693
  }                                                                                                                    // 3694
  component.__keyValidated__ = true;                                                                                   // 3695
                                                                                                                       // 3696
  // We can't provide friendly warnings for top level components.                                                      // 3697
  if (!ReactCurrentOwner.current) {                                                                                    // 3698
    return;                                                                                                            // 3699
  }                                                                                                                    // 3700
                                                                                                                       // 3701
  // Name of the component whose render method tried to pass children.                                                 // 3702
  var currentName = ReactCurrentOwner.current.constructor.displayName;                                                 // 3703
  if (ownerHasWarned.hasOwnProperty(currentName)) {                                                                    // 3704
    return;                                                                                                            // 3705
  }                                                                                                                    // 3706
  ownerHasWarned[currentName] = true;                                                                                  // 3707
                                                                                                                       // 3708
  var message = 'Each child in an array should have a unique "key" prop. ' +                                           // 3709
                'Check the render method of ' + currentName + '.';                                                     // 3710
  if (!component.isOwnedBy(ReactCurrentOwner.current)) {                                                               // 3711
    // Name of the component that originally created this child.                                                       // 3712
    var childOwnerName =                                                                                               // 3713
      component.props.__owner__ &&                                                                                     // 3714
      component.props.__owner__.constructor.displayName;                                                               // 3715
                                                                                                                       // 3716
    // Usually the current owner is the offender, but if it accepts                                                    // 3717
    // children as a property, it may be the creator of the child that's                                               // 3718
    // responsible for assigning it a key.                                                                             // 3719
    message += ' It was passed a child from ' + childOwnerName + '.';                                                  // 3720
  }                                                                                                                    // 3721
                                                                                                                       // 3722
  console.warn(message);                                                                                               // 3723
}                                                                                                                      // 3724
                                                                                                                       // 3725
/**                                                                                                                    // 3726
 * Ensure that every component either is passed in a static location or, if                                            // 3727
 * if it's passed in an array, has an explicit key property defined.                                                   // 3728
 *                                                                                                                     // 3729
 * @internal                                                                                                           // 3730
 * @param {*} component Statically passed child of any type.                                                           // 3731
 * @return {boolean}                                                                                                   // 3732
 */                                                                                                                    // 3733
function validateChildKeys(component) {                                                                                // 3734
  if (Array.isArray(component)) {                                                                                      // 3735
    for (var i = 0; i < component.length; i++) {                                                                       // 3736
      var child = component[i];                                                                                        // 3737
      if (ReactComponent.isValidComponent(child)) {                                                                    // 3738
        validateExplicitKey(child);                                                                                    // 3739
      }                                                                                                                // 3740
    }                                                                                                                  // 3741
  } else if (ReactComponent.isValidComponent(component)) {                                                             // 3742
    // This component was passed in a valid location.                                                                  // 3743
    component.__keyValidated__ = true;                                                                                 // 3744
  }                                                                                                                    // 3745
}                                                                                                                      // 3746
                                                                                                                       // 3747
/**                                                                                                                    // 3748
 * Components are the basic units of composition in React.                                                             // 3749
 *                                                                                                                     // 3750
 * Every component accepts a set of keyed input parameters known as "props" that                                       // 3751
 * are initialized by the constructor. Once a component is mounted, the props                                          // 3752
 * can be mutated using `setProps` or `replaceProps`.                                                                  // 3753
 *                                                                                                                     // 3754
 * Every component is capable of the following operations:                                                             // 3755
 *                                                                                                                     // 3756
 *   `mountComponent`                                                                                                  // 3757
 *     Initializes the component, renders markup, and registers event listeners.                                       // 3758
 *                                                                                                                     // 3759
 *   `receiveComponent`                                                                                                // 3760
 *     Updates the rendered DOM nodes to match the given component.                                                    // 3761
 *                                                                                                                     // 3762
 *   `unmountComponent`                                                                                                // 3763
 *     Releases any resources allocated by this component.                                                             // 3764
 *                                                                                                                     // 3765
 * Components can also be "owned" by other components. Being owned by another                                          // 3766
 * component means being constructed by that component. This is different from                                         // 3767
 * being the child of a component, which means having a DOM representation that                                        // 3768
 * is a child of the DOM representation of that component.                                                             // 3769
 *                                                                                                                     // 3770
 * @class ReactComponent                                                                                               // 3771
 */                                                                                                                    // 3772
var ReactComponent = {                                                                                                 // 3773
                                                                                                                       // 3774
  /**                                                                                                                  // 3775
   * @param {?object} object                                                                                           // 3776
   * @return {boolean} True if `object` is a valid component.                                                          // 3777
   * @final                                                                                                            // 3778
   */                                                                                                                  // 3779
  isValidComponent: function(object) {                                                                                 // 3780
    return !!(                                                                                                         // 3781
      object &&                                                                                                        // 3782
      typeof object.mountComponentIntoNode === 'function' &&                                                           // 3783
      typeof object.receiveComponent === 'function'                                                                    // 3784
    );                                                                                                                 // 3785
  },                                                                                                                   // 3786
                                                                                                                       // 3787
  /**                                                                                                                  // 3788
   * Generate a key string that identifies a component within a set.                                                   // 3789
   *                                                                                                                   // 3790
   * @param {*} component A component that could contain a manual key.                                                 // 3791
   * @param {number} index Index that is used if a manual key is not provided.                                         // 3792
   * @return {string}                                                                                                  // 3793
   * @internal                                                                                                         // 3794
   */                                                                                                                  // 3795
  getKey: function(component, index) {                                                                                 // 3796
    if (component && component.props && component.props.key != null) {                                                 // 3797
      // Explicit key                                                                                                  // 3798
      return '{' + component.props.key + '}';                                                                          // 3799
    }                                                                                                                  // 3800
    // Implicit key determined by the index in the set                                                                 // 3801
    return '[' + index + ']';                                                                                          // 3802
  },                                                                                                                   // 3803
                                                                                                                       // 3804
  /**                                                                                                                  // 3805
   * @internal                                                                                                         // 3806
   */                                                                                                                  // 3807
  LifeCycle: ComponentLifeCycle,                                                                                       // 3808
                                                                                                                       // 3809
  /**                                                                                                                  // 3810
   * Injected module that provides ability to mutate individual properties.                                            // 3811
   * Injected into the base class because many different subclasses need access                                        // 3812
   * to this.                                                                                                          // 3813
   *                                                                                                                   // 3814
   * @internal                                                                                                         // 3815
   */                                                                                                                  // 3816
  DOMIDOperations: ReactComponentEnvironment.DOMIDOperations,                                                          // 3817
                                                                                                                       // 3818
  /**                                                                                                                  // 3819
   * Optionally injectable environment dependent cleanup hook. (server vs.                                             // 3820
   * browser etc). Example: A browser system caches DOM nodes based on component                                       // 3821
   * ID and must remove that cache entry when this instance is unmounted.                                              // 3822
   *                                                                                                                   // 3823
   * @private                                                                                                          // 3824
   */                                                                                                                  // 3825
  unmountIDFromEnvironment: ReactComponentEnvironment.unmountIDFromEnvironment,                                        // 3826
                                                                                                                       // 3827
  /**                                                                                                                  // 3828
   * The "image" of a component tree, is the platform specific (typically                                              // 3829
   * serialized) data that represents a tree of lower level UI building blocks.                                        // 3830
   * On the web, this "image" is HTML markup which describes a construction of                                         // 3831
   * low level `div` and `span` nodes. Other platforms may have different                                              // 3832
   * encoding of this "image". This must be injected.                                                                  // 3833
   *                                                                                                                   // 3834
   * @private                                                                                                          // 3835
   */                                                                                                                  // 3836
  mountImageIntoNode: ReactComponentEnvironment.mountImageIntoNode,                                                    // 3837
                                                                                                                       // 3838
  /**                                                                                                                  // 3839
   * React references `ReactReconcileTransaction` using this property in order                                         // 3840
   * to allow dependency injection.                                                                                    // 3841
   *                                                                                                                   // 3842
   * @internal                                                                                                         // 3843
   */                                                                                                                  // 3844
  ReactReconcileTransaction:                                                                                           // 3845
    ReactComponentEnvironment.ReactReconcileTransaction,                                                               // 3846
                                                                                                                       // 3847
  /**                                                                                                                  // 3848
   * Base functionality for every ReactComponent constructor. Mixed into the                                           // 3849
   * `ReactComponent` prototype, but exposed statically for easy access.                                               // 3850
   *                                                                                                                   // 3851
   * @lends {ReactComponent.prototype}                                                                                 // 3852
   */                                                                                                                  // 3853
  Mixin: merge(ReactComponentEnvironment.Mixin, {                                                                      // 3854
                                                                                                                       // 3855
    /**                                                                                                                // 3856
     * Checks whether or not this component is mounted.                                                                // 3857
     *                                                                                                                 // 3858
     * @return {boolean} True if mounted, false otherwise.                                                             // 3859
     * @final                                                                                                          // 3860
     * @protected                                                                                                      // 3861
     */                                                                                                                // 3862
    isMounted: function() {                                                                                            // 3863
      return this._lifeCycleState === ComponentLifeCycle.MOUNTED;                                                      // 3864
    },                                                                                                                 // 3865
                                                                                                                       // 3866
    /**                                                                                                                // 3867
     * Sets a subset of the props.                                                                                     // 3868
     *                                                                                                                 // 3869
     * @param {object} partialProps Subset of the next props.                                                          // 3870
     * @param {?function} callback Called after props are updated.                                                     // 3871
     * @final                                                                                                          // 3872
     * @public                                                                                                         // 3873
     */                                                                                                                // 3874
    setProps: function(partialProps, callback) {                                                                       // 3875
      // Merge with `_pendingProps` if it exists, otherwise with existing props.                                       // 3876
      this.replaceProps(                                                                                               // 3877
        merge(this._pendingProps || this.props, partialProps),                                                         // 3878
        callback                                                                                                       // 3879
      );                                                                                                               // 3880
    },                                                                                                                 // 3881
                                                                                                                       // 3882
    /**                                                                                                                // 3883
     * Replaces all of the props.                                                                                      // 3884
     *                                                                                                                 // 3885
     * @param {object} props New props.                                                                                // 3886
     * @param {?function} callback Called after props are updated.                                                     // 3887
     * @final                                                                                                          // 3888
     * @public                                                                                                         // 3889
     */                                                                                                                // 3890
    replaceProps: function(props, callback) {                                                                          // 3891
      ("production" !== "development" ? invariant(                                                                     // 3892
        !this.props.__owner__,                                                                                         // 3893
        'replaceProps(...): You called `setProps` or `replaceProps` on a ' +                                           // 3894
        'component with an owner. This is an anti-pattern since props will ' +                                         // 3895
        'get reactively updated when rendered. Instead, change the owner\'s ' +                                        // 3896
        '`render` method to pass the correct value as props to the component ' +                                       // 3897
        'where it is created.'                                                                                         // 3898
      ) : invariant(!this.props.__owner__));                                                                           // 3899
      ("production" !== "development" ? invariant(                                                                     // 3900
        this.isMounted(),                                                                                              // 3901
        'replaceProps(...): Can only update a mounted component.'                                                      // 3902
      ) : invariant(this.isMounted()));                                                                                // 3903
      this._pendingProps = props;                                                                                      // 3904
      ReactUpdates.enqueueUpdate(this, callback);                                                                      // 3905
    },                                                                                                                 // 3906
                                                                                                                       // 3907
    /**                                                                                                                // 3908
     * Base constructor for all React component.                                                                       // 3909
     *                                                                                                                 // 3910
     * Subclasses that override this method should make sure to invoke                                                 // 3911
     * `ReactComponent.Mixin.construct.call(this, ...)`.                                                               // 3912
     *                                                                                                                 // 3913
     * @param {?object} initialProps                                                                                   // 3914
     * @param {*} children                                                                                             // 3915
     * @internal                                                                                                       // 3916
     */                                                                                                                // 3917
    construct: function(initialProps, children) {                                                                      // 3918
      this.props = initialProps || {};                                                                                 // 3919
      // Record the component responsible for creating this component.                                                 // 3920
      this.props.__owner__ = ReactCurrentOwner.current;                                                                // 3921
      // All components start unmounted.                                                                               // 3922
      this._lifeCycleState = ComponentLifeCycle.UNMOUNTED;                                                             // 3923
                                                                                                                       // 3924
      this._pendingProps = null;                                                                                       // 3925
      this._pendingCallbacks = null;                                                                                   // 3926
                                                                                                                       // 3927
      // Children can be more than one argument                                                                        // 3928
      var childrenLength = arguments.length - 1;                                                                       // 3929
      if (childrenLength === 1) {                                                                                      // 3930
        if ("production" !== "development") {                                                                          // 3931
          validateChildKeys(children);                                                                                 // 3932
        }                                                                                                              // 3933
        this.props.children = children;                                                                                // 3934
      } else if (childrenLength > 1) {                                                                                 // 3935
        var childArray = Array(childrenLength);                                                                        // 3936
        for (var i = 0; i < childrenLength; i++) {                                                                     // 3937
          if ("production" !== "development") {                                                                        // 3938
            validateChildKeys(arguments[i + 1]);                                                                       // 3939
          }                                                                                                            // 3940
          childArray[i] = arguments[i + 1];                                                                            // 3941
        }                                                                                                              // 3942
        this.props.children = childArray;                                                                              // 3943
      }                                                                                                                // 3944
    },                                                                                                                 // 3945
                                                                                                                       // 3946
    /**                                                                                                                // 3947
     * Initializes the component, renders markup, and registers event listeners.                                       // 3948
     *                                                                                                                 // 3949
     * NOTE: This does not insert any nodes into the DOM.                                                              // 3950
     *                                                                                                                 // 3951
     * Subclasses that override this method should make sure to invoke                                                 // 3952
     * `ReactComponent.Mixin.mountComponent.call(this, ...)`.                                                          // 3953
     *                                                                                                                 // 3954
     * @param {string} rootID DOM ID of the root node.                                                                 // 3955
     * @param {ReactReconcileTransaction} transaction                                                                  // 3956
     * @param {number} mountDepth number of components in the owner hierarchy.                                         // 3957
     * @return {?string} Rendered markup to be inserted into the DOM.                                                  // 3958
     * @internal                                                                                                       // 3959
     */                                                                                                                // 3960
    mountComponent: function(rootID, transaction, mountDepth) {                                                        // 3961
      ("production" !== "development" ? invariant(                                                                     // 3962
        !this.isMounted(),                                                                                             // 3963
        'mountComponent(%s, ...): Can only mount an unmounted component.',                                             // 3964
        rootID                                                                                                         // 3965
      ) : invariant(!this.isMounted()));                                                                               // 3966
      var props = this.props;                                                                                          // 3967
      if (props.ref != null) {                                                                                         // 3968
        ReactOwner.addComponentAsRefTo(this, props.ref, props.__owner__);                                              // 3969
      }                                                                                                                // 3970
      this._rootNodeID = rootID;                                                                                       // 3971
      this._lifeCycleState = ComponentLifeCycle.MOUNTED;                                                               // 3972
      this._mountDepth = mountDepth;                                                                                   // 3973
      // Effectively: return '';                                                                                       // 3974
    },                                                                                                                 // 3975
                                                                                                                       // 3976
    /**                                                                                                                // 3977
     * Releases any resources allocated by `mountComponent`.                                                           // 3978
     *                                                                                                                 // 3979
     * NOTE: This does not remove any nodes from the DOM.                                                              // 3980
     *                                                                                                                 // 3981
     * Subclasses that override this method should make sure to invoke                                                 // 3982
     * `ReactComponent.Mixin.unmountComponent.call(this)`.                                                             // 3983
     *                                                                                                                 // 3984
     * @internal                                                                                                       // 3985
     */                                                                                                                // 3986
    unmountComponent: function() {                                                                                     // 3987
      ("production" !== "development" ? invariant(                                                                     // 3988
        this.isMounted(),                                                                                              // 3989
        'unmountComponent(): Can only unmount a mounted component.'                                                    // 3990
      ) : invariant(this.isMounted()));                                                                                // 3991
      var props = this.props;                                                                                          // 3992
      if (props.ref != null) {                                                                                         // 3993
        ReactOwner.removeComponentAsRefFrom(this, props.ref, props.__owner__);                                         // 3994
      }                                                                                                                // 3995
      ReactComponent.unmountIDFromEnvironment(this._rootNodeID);                                                       // 3996
      this._rootNodeID = null;                                                                                         // 3997
      this._lifeCycleState = ComponentLifeCycle.UNMOUNTED;                                                             // 3998
    },                                                                                                                 // 3999
                                                                                                                       // 4000
    /**                                                                                                                // 4001
     * Given a new instance of this component, updates the rendered DOM nodes                                          // 4002
     * as if that instance was rendered instead.                                                                       // 4003
     *                                                                                                                 // 4004
     * Subclasses that override this method should make sure to invoke                                                 // 4005
     * `ReactComponent.Mixin.receiveComponent.call(this, ...)`.                                                        // 4006
     *                                                                                                                 // 4007
     * @param {object} nextComponent Next set of properties.                                                           // 4008
     * @param {ReactReconcileTransaction} transaction                                                                  // 4009
     * @internal                                                                                                       // 4010
     */                                                                                                                // 4011
    receiveComponent: function(nextComponent, transaction) {                                                           // 4012
      ("production" !== "development" ? invariant(                                                                     // 4013
        this.isMounted(),                                                                                              // 4014
        'receiveComponent(...): Can only update a mounted component.'                                                  // 4015
      ) : invariant(this.isMounted()));                                                                                // 4016
      this._pendingProps = nextComponent.props;                                                                        // 4017
      this._performUpdateIfNecessary(transaction);                                                                     // 4018
    },                                                                                                                 // 4019
                                                                                                                       // 4020
    /**                                                                                                                // 4021
     * Call `_performUpdateIfNecessary` within a new transaction.                                                      // 4022
     *                                                                                                                 // 4023
     * @param {ReactReconcileTransaction} transaction                                                                  // 4024
     * @internal                                                                                                       // 4025
     */                                                                                                                // 4026
    performUpdateIfNecessary: function() {                                                                             // 4027
      var transaction = ReactComponent.ReactReconcileTransaction.getPooled();                                          // 4028
      transaction.perform(this._performUpdateIfNecessary, this, transaction);                                          // 4029
      ReactComponent.ReactReconcileTransaction.release(transaction);                                                   // 4030
    },                                                                                                                 // 4031
                                                                                                                       // 4032
    /**                                                                                                                // 4033
     * If `_pendingProps` is set, update the component.                                                                // 4034
     *                                                                                                                 // 4035
     * @param {ReactReconcileTransaction} transaction                                                                  // 4036
     * @internal                                                                                                       // 4037
     */                                                                                                                // 4038
    _performUpdateIfNecessary: function(transaction) {                                                                 // 4039
      if (this._pendingProps == null) {                                                                                // 4040
        return;                                                                                                        // 4041
      }                                                                                                                // 4042
      var prevProps = this.props;                                                                                      // 4043
      this.props = this._pendingProps;                                                                                 // 4044
      this._pendingProps = null;                                                                                       // 4045
      this.updateComponent(transaction, prevProps);                                                                    // 4046
    },                                                                                                                 // 4047
                                                                                                                       // 4048
    /**                                                                                                                // 4049
     * Updates the component's currently mounted representation.                                                       // 4050
     *                                                                                                                 // 4051
     * @param {ReactReconcileTransaction} transaction                                                                  // 4052
     * @param {object} prevProps                                                                                       // 4053
     * @internal                                                                                                       // 4054
     */                                                                                                                // 4055
    updateComponent: function(transaction, prevProps) {                                                                // 4056
      var props = this.props;                                                                                          // 4057
      // If either the owner or a `ref` has changed, make sure the newest owner                                        // 4058
      // has stored a reference to `this`, and the previous owner (if different)                                       // 4059
      // has forgotten the reference to `this`.                                                                        // 4060
      if (props.__owner__ !== prevProps.__owner__ ||                                                                   // 4061
          props.ref !== prevProps.ref) {                                                                               // 4062
        if (prevProps.ref != null) {                                                                                   // 4063
          ReactOwner.removeComponentAsRefFrom(                                                                         // 4064
            this, prevProps.ref, prevProps.__owner__                                                                   // 4065
          );                                                                                                           // 4066
        }                                                                                                              // 4067
        // Correct, even if the owner is the same, and only the ref has changed.                                       // 4068
        if (props.ref != null) {                                                                                       // 4069
          ReactOwner.addComponentAsRefTo(this, props.ref, props.__owner__);                                            // 4070
        }                                                                                                              // 4071
      }                                                                                                                // 4072
    },                                                                                                                 // 4073
                                                                                                                       // 4074
    /**                                                                                                                // 4075
     * Mounts this component and inserts it into the DOM.                                                              // 4076
     *                                                                                                                 // 4077
     * @param {string} rootID DOM ID of the root node.                                                                 // 4078
     * @param {DOMElement} container DOM element to mount into.                                                        // 4079
     * @param {boolean} shouldReuseMarkup If true, do not insert markup                                                // 4080
     * @final                                                                                                          // 4081
     * @internal                                                                                                       // 4082
     * @see {ReactMount.renderComponent}                                                                               // 4083
     */                                                                                                                // 4084
    mountComponentIntoNode: function(rootID, container, shouldReuseMarkup) {                                           // 4085
      var transaction = ReactComponent.ReactReconcileTransaction.getPooled();                                          // 4086
      transaction.perform(                                                                                             // 4087
        this._mountComponentIntoNode,                                                                                  // 4088
        this,                                                                                                          // 4089
        rootID,                                                                                                        // 4090
        container,                                                                                                     // 4091
        transaction,                                                                                                   // 4092
        shouldReuseMarkup                                                                                              // 4093
      );                                                                                                               // 4094
      ReactComponent.ReactReconcileTransaction.release(transaction);                                                   // 4095
    },                                                                                                                 // 4096
                                                                                                                       // 4097
    /**                                                                                                                // 4098
     * @param {string} rootID DOM ID of the root node.                                                                 // 4099
     * @param {DOMElement} container DOM element to mount into.                                                        // 4100
     * @param {ReactReconcileTransaction} transaction                                                                  // 4101
     * @param {boolean} shouldReuseMarkup If true, do not insert markup                                                // 4102
     * @final                                                                                                          // 4103
     * @private                                                                                                        // 4104
     */                                                                                                                // 4105
    _mountComponentIntoNode: function(                                                                                 // 4106
        rootID,                                                                                                        // 4107
        container,                                                                                                     // 4108
        transaction,                                                                                                   // 4109
        shouldReuseMarkup) {                                                                                           // 4110
      var markup = this.mountComponent(rootID, transaction, 0);                                                        // 4111
      ReactComponent.mountImageIntoNode(markup, container, shouldReuseMarkup);                                         // 4112
    },                                                                                                                 // 4113
                                                                                                                       // 4114
    /**                                                                                                                // 4115
     * Checks if this component is owned by the supplied `owner` component.                                            // 4116
     *                                                                                                                 // 4117
     * @param {ReactComponent} owner Component to check.                                                               // 4118
     * @return {boolean} True if `owners` owns this component.                                                         // 4119
     * @final                                                                                                          // 4120
     * @internal                                                                                                       // 4121
     */                                                                                                                // 4122
    isOwnedBy: function(owner) {                                                                                       // 4123
      return this.props.__owner__ === owner;                                                                           // 4124
    },                                                                                                                 // 4125
                                                                                                                       // 4126
    /**                                                                                                                // 4127
     * Gets another component, that shares the same owner as this one, by ref.                                         // 4128
     *                                                                                                                 // 4129
     * @param {string} ref of a sibling Component.                                                                     // 4130
     * @return {?ReactComponent} the actual sibling Component.                                                         // 4131
     * @final                                                                                                          // 4132
     * @internal                                                                                                       // 4133
     */                                                                                                                // 4134
    getSiblingByRef: function(ref) {                                                                                   // 4135
      var owner = this.props.__owner__;                                                                                // 4136
      if (!owner || !owner.refs) {                                                                                     // 4137
        return null;                                                                                                   // 4138
      }                                                                                                                // 4139
      return owner.refs[ref];                                                                                          // 4140
    }                                                                                                                  // 4141
  })                                                                                                                   // 4142
};                                                                                                                     // 4143
                                                                                                                       // 4144
module.exports = ReactComponent;                                                                                       // 4145
                                                                                                                       // 4146
},{"./ReactComponentEnvironment":30,"./ReactCurrentOwner":32,"./ReactOwner":58,"./ReactUpdates":70,"./invariant":109,"./keyMirror":115,"./merge":118}],29:[function(require,module,exports){
/**                                                                                                                    // 4148
 * Copyright 2013 Facebook, Inc.                                                                                       // 4149
 *                                                                                                                     // 4150
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 4151
 * you may not use this file except in compliance with the License.                                                    // 4152
 * You may obtain a copy of the License at                                                                             // 4153
 *                                                                                                                     // 4154
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 4155
 *                                                                                                                     // 4156
 * Unless required by applicable law or agreed to in writing, software                                                 // 4157
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 4158
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 4159
 * See the License for the specific language governing permissions and                                                 // 4160
 * limitations under the License.                                                                                      // 4161
 *                                                                                                                     // 4162
 * @providesModule ReactComponentBrowserEnvironment                                                                    // 4163
 */                                                                                                                    // 4164
                                                                                                                       // 4165
/*jslint evil: true */                                                                                                 // 4166
                                                                                                                       // 4167
"use strict";                                                                                                          // 4168
                                                                                                                       // 4169
var ReactDOMIDOperations = require("./ReactDOMIDOperations");                                                          // 4170
var ReactMarkupChecksum = require("./ReactMarkupChecksum");                                                            // 4171
var ReactMount = require("./ReactMount");                                                                              // 4172
var ReactReconcileTransaction = require("./ReactReconcileTransaction");                                                // 4173
                                                                                                                       // 4174
var getReactRootElementInContainer = require("./getReactRootElementInContainer");                                      // 4175
var invariant = require("./invariant");                                                                                // 4176
var mutateHTMLNodeWithMarkup = require("./mutateHTMLNodeWithMarkup");                                                  // 4177
                                                                                                                       // 4178
                                                                                                                       // 4179
var ELEMENT_NODE_TYPE = 1;                                                                                             // 4180
var DOC_NODE_TYPE = 9;                                                                                                 // 4181
                                                                                                                       // 4182
                                                                                                                       // 4183
/**                                                                                                                    // 4184
 * Abstracts away all functionality of `ReactComponent` requires knowledge of                                          // 4185
 * the browser context.                                                                                                // 4186
 */                                                                                                                    // 4187
var ReactComponentBrowserEnvironment = {                                                                               // 4188
  /**                                                                                                                  // 4189
   * Mixed into every component instance.                                                                              // 4190
   */                                                                                                                  // 4191
  Mixin: {                                                                                                             // 4192
    /**                                                                                                                // 4193
     * Returns the DOM node rendered by this component.                                                                // 4194
     *                                                                                                                 // 4195
     * @return {DOMElement} The root node of this component.                                                           // 4196
     * @final                                                                                                          // 4197
     * @protected                                                                                                      // 4198
     */                                                                                                                // 4199
    getDOMNode: function() {                                                                                           // 4200
      ("production" !== "development" ? invariant(                                                                     // 4201
        this.isMounted(),                                                                                              // 4202
        'getDOMNode(): A component must be mounted to have a DOM node.'                                                // 4203
      ) : invariant(this.isMounted()));                                                                                // 4204
      return ReactMount.getNode(this._rootNodeID);                                                                     // 4205
    }                                                                                                                  // 4206
  },                                                                                                                   // 4207
                                                                                                                       // 4208
  ReactReconcileTransaction: ReactReconcileTransaction,                                                                // 4209
                                                                                                                       // 4210
  DOMIDOperations: ReactDOMIDOperations,                                                                               // 4211
                                                                                                                       // 4212
  /**                                                                                                                  // 4213
   * If a particular environment requires that some resources be cleaned up,                                           // 4214
   * specify this in the injected Mixin. In the DOM, we would likely want to                                           // 4215
   * purge any cached node ID lookups.                                                                                 // 4216
   *                                                                                                                   // 4217
   * @private                                                                                                          // 4218
   */                                                                                                                  // 4219
  unmountIDFromEnvironment: function(rootNodeID) {                                                                     // 4220
    ReactMount.purgeID(rootNodeID);                                                                                    // 4221
  },                                                                                                                   // 4222
                                                                                                                       // 4223
  /**                                                                                                                  // 4224
   * @param {string} markup Markup string to place into the DOM Element.                                               // 4225
   * @param {DOMElement} container DOM Element to insert markup into.                                                  // 4226
   * @param {boolean} shouldReuseMarkup Should reuse the existing markup in the                                        // 4227
   * container if possible.                                                                                            // 4228
   */                                                                                                                  // 4229
  mountImageIntoNode: function(markup, container, shouldReuseMarkup) {                                                 // 4230
    ("production" !== "development" ? invariant(                                                                       // 4231
      container && (                                                                                                   // 4232
        container.nodeType === ELEMENT_NODE_TYPE ||                                                                    // 4233
        container.nodeType === DOC_NODE_TYPE && ReactMount.allowFullPageRender                                         // 4234
      ),                                                                                                               // 4235
      'mountComponentIntoNode(...): Target container is not valid.'                                                    // 4236
    ) : invariant(container && (                                                                                       // 4237
      container.nodeType === ELEMENT_NODE_TYPE ||                                                                      // 4238
      container.nodeType === DOC_NODE_TYPE && ReactMount.allowFullPageRender                                           // 4239
    )));                                                                                                               // 4240
    if (shouldReuseMarkup) {                                                                                           // 4241
      if (ReactMarkupChecksum.canReuseMarkup(                                                                          // 4242
            markup,                                                                                                    // 4243
            getReactRootElementInContainer(container))) {                                                              // 4244
        return;                                                                                                        // 4245
      } else {                                                                                                         // 4246
        if ("production" !== "development") {                                                                          // 4247
          console.warn(                                                                                                // 4248
            'React attempted to use reuse markup in a container but the ' +                                            // 4249
            'checksum was invalid. This generally means that you are using ' +                                         // 4250
            'server rendering and the markup generated on the server was ' +                                           // 4251
            'not what the client was expecting. React injected new markup ' +                                          // 4252
            'to compensate which works but you have lost many of the ' +                                               // 4253
            'benefits of server rendering. Instead, figure out why the ' +                                             // 4254
            'markup being generated is different on the client or server.'                                             // 4255
          );                                                                                                           // 4256
        }                                                                                                              // 4257
      }                                                                                                                // 4258
    }                                                                                                                  // 4259
                                                                                                                       // 4260
    // You can't naively set the innerHTML of the entire document. You need                                            // 4261
    // to mutate documentElement which requires doing some crazy tricks. See                                           // 4262
    // mutateHTMLNodeWithMarkup()                                                                                      // 4263
    if (container.nodeType === DOC_NODE_TYPE) {                                                                        // 4264
      mutateHTMLNodeWithMarkup(container.documentElement, markup);                                                     // 4265
      return;                                                                                                          // 4266
    }                                                                                                                  // 4267
                                                                                                                       // 4268
    // Asynchronously inject markup by ensuring that the container is not in                                           // 4269
    // the document when settings its `innerHTML`.                                                                     // 4270
    var parent = container.parentNode;                                                                                 // 4271
    if (parent) {                                                                                                      // 4272
      var next = container.nextSibling;                                                                                // 4273
      parent.removeChild(container);                                                                                   // 4274
      container.innerHTML = markup;                                                                                    // 4275
      if (next) {                                                                                                      // 4276
        parent.insertBefore(container, next);                                                                          // 4277
      } else {                                                                                                         // 4278
        parent.appendChild(container);                                                                                 // 4279
      }                                                                                                                // 4280
    } else {                                                                                                           // 4281
      container.innerHTML = markup;                                                                                    // 4282
    }                                                                                                                  // 4283
  }                                                                                                                    // 4284
};                                                                                                                     // 4285
                                                                                                                       // 4286
module.exports = ReactComponentBrowserEnvironment;                                                                     // 4287
                                                                                                                       // 4288
},{"./ReactDOMIDOperations":37,"./ReactMarkupChecksum":53,"./ReactMount":54,"./ReactReconcileTransaction":62,"./getReactRootElementInContainer":105,"./invariant":109,"./mutateHTMLNodeWithMarkup":122}],30:[function(require,module,exports){
/**                                                                                                                    // 4290
 * Copyright 2013 Facebook, Inc.                                                                                       // 4291
 *                                                                                                                     // 4292
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 4293
 * you may not use this file except in compliance with the License.                                                    // 4294
 * You may obtain a copy of the License at                                                                             // 4295
 *                                                                                                                     // 4296
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 4297
 *                                                                                                                     // 4298
 * Unless required by applicable law or agreed to in writing, software                                                 // 4299
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 4300
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 4301
 * See the License for the specific language governing permissions and                                                 // 4302
 * limitations under the License.                                                                                      // 4303
 *                                                                                                                     // 4304
 * @providesModule ReactComponentEnvironment                                                                           // 4305
 */                                                                                                                    // 4306
                                                                                                                       // 4307
var ReactComponentBrowserEnvironment =                                                                                 // 4308
  require("./ReactComponentBrowserEnvironment");                                                                       // 4309
                                                                                                                       // 4310
var ReactComponentEnvironment = ReactComponentBrowserEnvironment;                                                      // 4311
                                                                                                                       // 4312
module.exports = ReactComponentEnvironment;                                                                            // 4313
                                                                                                                       // 4314
},{"./ReactComponentBrowserEnvironment":29}],31:[function(require,module,exports){                                     // 4315
/**                                                                                                                    // 4316
 * Copyright 2013 Facebook, Inc.                                                                                       // 4317
 *                                                                                                                     // 4318
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 4319
 * you may not use this file except in compliance with the License.                                                    // 4320
 * You may obtain a copy of the License at                                                                             // 4321
 *                                                                                                                     // 4322
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 4323
 *                                                                                                                     // 4324
 * Unless required by applicable law or agreed to in writing, software                                                 // 4325
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 4326
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 4327
 * See the License for the specific language governing permissions and                                                 // 4328
 * limitations under the License.                                                                                      // 4329
 *                                                                                                                     // 4330
 * @providesModule ReactCompositeComponent                                                                             // 4331
 */                                                                                                                    // 4332
                                                                                                                       // 4333
"use strict";                                                                                                          // 4334
                                                                                                                       // 4335
var ReactComponent = require("./ReactComponent");                                                                      // 4336
var ReactCurrentOwner = require("./ReactCurrentOwner");                                                                // 4337
var ReactErrorUtils = require("./ReactErrorUtils");                                                                    // 4338
var ReactOwner = require("./ReactOwner");                                                                              // 4339
var ReactPerf = require("./ReactPerf");                                                                                // 4340
var ReactPropTransferer = require("./ReactPropTransferer");                                                            // 4341
var ReactUpdates = require("./ReactUpdates");                                                                          // 4342
                                                                                                                       // 4343
var invariant = require("./invariant");                                                                                // 4344
var keyMirror = require("./keyMirror");                                                                                // 4345
var merge = require("./merge");                                                                                        // 4346
var mixInto = require("./mixInto");                                                                                    // 4347
var objMap = require("./objMap");                                                                                      // 4348
                                                                                                                       // 4349
/**                                                                                                                    // 4350
 * Policies that describe methods in `ReactCompositeComponentInterface`.                                               // 4351
 */                                                                                                                    // 4352
var SpecPolicy = keyMirror({                                                                                           // 4353
  /**                                                                                                                  // 4354
   * These methods may be defined only once by the class specification or mixin.                                       // 4355
   */                                                                                                                  // 4356
  DEFINE_ONCE: null,                                                                                                   // 4357
  /**                                                                                                                  // 4358
   * These methods may be defined by both the class specification and mixins.                                          // 4359
   * Subsequent definitions will be chained. These methods must return void.                                           // 4360
   */                                                                                                                  // 4361
  DEFINE_MANY: null,                                                                                                   // 4362
  /**                                                                                                                  // 4363
   * These methods are overriding the base ReactCompositeComponent class.                                              // 4364
   */                                                                                                                  // 4365
  OVERRIDE_BASE: null,                                                                                                 // 4366
  /**                                                                                                                  // 4367
   * These methods are similar to DEFINE_MANY, except we assume they return                                            // 4368
   * objects. We try to merge the keys of the return values of all the mixed in                                        // 4369
   * functions. If there is a key conflict we throw.                                                                   // 4370
   */                                                                                                                  // 4371
  DEFINE_MANY_MERGED: null                                                                                             // 4372
});                                                                                                                    // 4373
                                                                                                                       // 4374
/**                                                                                                                    // 4375
 * Composite components are higher-level components that compose other composite                                       // 4376
 * or native components.                                                                                               // 4377
 *                                                                                                                     // 4378
 * To create a new type of `ReactCompositeComponent`, pass a specification of                                          // 4379
 * your new class to `React.createClass`. The only requirement of your class                                           // 4380
 * specification is that you implement a `render` method.                                                              // 4381
 *                                                                                                                     // 4382
 *   var MyComponent = React.createClass({                                                                             // 4383
 *     render: function() {                                                                                            // 4384
 *       return <div>Hello World</div>;                                                                                // 4385
 *     }                                                                                                               // 4386
 *   });                                                                                                               // 4387
 *                                                                                                                     // 4388
 * The class specification supports a specific protocol of methods that have                                           // 4389
 * special meaning (e.g. `render`). See `ReactCompositeComponentInterface` for                                         // 4390
 * more the comprehensive protocol. Any other properties and methods in the                                            // 4391
 * class specification will available on the prototype.                                                                // 4392
 *                                                                                                                     // 4393
 * @interface ReactCompositeComponentInterface                                                                         // 4394
 * @internal                                                                                                           // 4395
 */                                                                                                                    // 4396
var ReactCompositeComponentInterface = {                                                                               // 4397
                                                                                                                       // 4398
  /**                                                                                                                  // 4399
   * An array of Mixin objects to include when defining your component.                                                // 4400
   *                                                                                                                   // 4401
   * @type {array}                                                                                                     // 4402
   * @optional                                                                                                         // 4403
   */                                                                                                                  // 4404
  mixins: SpecPolicy.DEFINE_MANY,                                                                                      // 4405
                                                                                                                       // 4406
  /**                                                                                                                  // 4407
   * Definition of prop types for this component.                                                                      // 4408
   *                                                                                                                   // 4409
   * @type {object}                                                                                                    // 4410
   * @optional                                                                                                         // 4411
   */                                                                                                                  // 4412
  propTypes: SpecPolicy.DEFINE_ONCE,                                                                                   // 4413
                                                                                                                       // 4414
                                                                                                                       // 4415
                                                                                                                       // 4416
  // ==== Definition methods ====                                                                                      // 4417
                                                                                                                       // 4418
  /**                                                                                                                  // 4419
   * Invoked when the component is mounted. Values in the mapping will be set on                                       // 4420
   * `this.props` if that prop is not specified (i.e. using an `in` check).                                            // 4421
   *                                                                                                                   // 4422
   * This method is invoked before `getInitialState` and therefore cannot rely                                         // 4423
   * on `this.state` or use `this.setState`.                                                                           // 4424
   *                                                                                                                   // 4425
   * @return {object}                                                                                                  // 4426
   * @optional                                                                                                         // 4427
   */                                                                                                                  // 4428
  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,                                                                      // 4429
                                                                                                                       // 4430
  /**                                                                                                                  // 4431
   * Invoked once before the component is mounted. The return value will be used                                       // 4432
   * as the initial value of `this.state`.                                                                             // 4433
   *                                                                                                                   // 4434
   *   getInitialState: function() {                                                                                   // 4435
   *     return {                                                                                                      // 4436
   *       isOn: false,                                                                                                // 4437
   *       fooBaz: new BazFoo()                                                                                        // 4438
   *     }                                                                                                             // 4439
   *   }                                                                                                               // 4440
   *                                                                                                                   // 4441
   * @return {object}                                                                                                  // 4442
   * @optional                                                                                                         // 4443
   */                                                                                                                  // 4444
  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,                                                                      // 4445
                                                                                                                       // 4446
  /**                                                                                                                  // 4447
   * Uses props from `this.props` and state from `this.state` to render the                                            // 4448
   * structure of the component.                                                                                       // 4449
   *                                                                                                                   // 4450
   * No guarantees are made about when or how often this method is invoked, so                                         // 4451
   * it must not have side effects.                                                                                    // 4452
   *                                                                                                                   // 4453
   *   render: function() {                                                                                            // 4454
   *     var name = this.props.name;                                                                                   // 4455
   *     return <div>Hello, {name}!</div>;                                                                             // 4456
   *   }                                                                                                               // 4457
   *                                                                                                                   // 4458
   * @return {ReactComponent}                                                                                          // 4459
   * @nosideeffects                                                                                                    // 4460
   * @required                                                                                                         // 4461
   */                                                                                                                  // 4462
  render: SpecPolicy.DEFINE_ONCE,                                                                                      // 4463
                                                                                                                       // 4464
                                                                                                                       // 4465
                                                                                                                       // 4466
  // ==== Delegate methods ====                                                                                        // 4467
                                                                                                                       // 4468
  /**                                                                                                                  // 4469
   * Invoked when the component is initially created and about to be mounted.                                          // 4470
   * This may have side effects, but any external subscriptions or data created                                        // 4471
   * by this method must be cleaned up in `componentWillUnmount`.                                                      // 4472
   *                                                                                                                   // 4473
   * @optional                                                                                                         // 4474
   */                                                                                                                  // 4475
  componentWillMount: SpecPolicy.DEFINE_MANY,                                                                          // 4476
                                                                                                                       // 4477
  /**                                                                                                                  // 4478
   * Invoked when the component has been mounted and has a DOM representation.                                         // 4479
   * However, there is no guarantee that the DOM node is in the document.                                              // 4480
   *                                                                                                                   // 4481
   * Use this as an opportunity to operate on the DOM when the component has                                           // 4482
   * been mounted (initialized and rendered) for the first time.                                                       // 4483
   *                                                                                                                   // 4484
   * @param {DOMElement} rootNode DOM element representing the component.                                              // 4485
   * @optional                                                                                                         // 4486
   */                                                                                                                  // 4487
  componentDidMount: SpecPolicy.DEFINE_MANY,                                                                           // 4488
                                                                                                                       // 4489
  /**                                                                                                                  // 4490
   * Invoked before the component receives new props.                                                                  // 4491
   *                                                                                                                   // 4492
   * Use this as an opportunity to react to a prop transition by updating the                                          // 4493
   * state using `this.setState`. Current props are accessed via `this.props`.                                         // 4494
   *                                                                                                                   // 4495
   *   componentWillReceiveProps: function(nextProps) {                                                                // 4496
   *     this.setState({                                                                                               // 4497
   *       likesIncreasing: nextProps.likeCount > this.props.likeCount                                                 // 4498
   *     });                                                                                                           // 4499
   *   }                                                                                                               // 4500
   *                                                                                                                   // 4501
   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop                                        // 4502
   * transition may cause a state change, but the opposite is not true. If you                                         // 4503
   * need it, you are probably looking for `componentWillUpdate`.                                                      // 4504
   *                                                                                                                   // 4505
   * @param {object} nextProps                                                                                         // 4506
   * @optional                                                                                                         // 4507
   */                                                                                                                  // 4508
  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,                                                                   // 4509
                                                                                                                       // 4510
  /**                                                                                                                  // 4511
   * Invoked while deciding if the component should be updated as a result of                                          // 4512
   * receiving new props and state.                                                                                    // 4513
   *                                                                                                                   // 4514
   * Use this as an opportunity to `return false` when you're certain that the                                         // 4515
   * transition to the new props and state will not require a component update.                                        // 4516
   *                                                                                                                   // 4517
   *   shouldComponentUpdate: function(nextProps, nextState) {                                                         // 4518
   *     return !equal(nextProps, this.props) || !equal(nextState, this.state);                                        // 4519
   *   }                                                                                                               // 4520
   *                                                                                                                   // 4521
   * @param {object} nextProps                                                                                         // 4522
   * @param {?object} nextState                                                                                        // 4523
   * @return {boolean} True if the component should update.                                                            // 4524
   * @optional                                                                                                         // 4525
   */                                                                                                                  // 4526
  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,                                                                       // 4527
                                                                                                                       // 4528
  /**                                                                                                                  // 4529
   * Invoked when the component is about to update due to a transition from                                            // 4530
   * `this.props` and `this.state` to `nextProps` and `nextState`.                                                     // 4531
   *                                                                                                                   // 4532
   * Use this as an opportunity to perform preparation before an update occurs.                                        // 4533
   *                                                                                                                   // 4534
   * NOTE: You **cannot** use `this.setState()` in this method.                                                        // 4535
   *                                                                                                                   // 4536
   * @param {object} nextProps                                                                                         // 4537
   * @param {?object} nextState                                                                                        // 4538
   * @param {ReactReconcileTransaction} transaction                                                                    // 4539
   * @optional                                                                                                         // 4540
   */                                                                                                                  // 4541
  componentWillUpdate: SpecPolicy.DEFINE_MANY,                                                                         // 4542
                                                                                                                       // 4543
  /**                                                                                                                  // 4544
   * Invoked when the component's DOM representation has been updated.                                                 // 4545
   *                                                                                                                   // 4546
   * Use this as an opportunity to operate on the DOM when the component has                                           // 4547
   * been updated.                                                                                                     // 4548
   *                                                                                                                   // 4549
   * @param {object} prevProps                                                                                         // 4550
   * @param {?object} prevState                                                                                        // 4551
   * @param {DOMElement} rootNode DOM element representing the component.                                              // 4552
   * @optional                                                                                                         // 4553
   */                                                                                                                  // 4554
  componentDidUpdate: SpecPolicy.DEFINE_MANY,                                                                          // 4555
                                                                                                                       // 4556
  /**                                                                                                                  // 4557
   * Invoked when the component is about to be removed from its parent and have                                        // 4558
   * its DOM representation destroyed.                                                                                 // 4559
   *                                                                                                                   // 4560
   * Use this as an opportunity to deallocate any external resources.                                                  // 4561
   *                                                                                                                   // 4562
   * NOTE: There is no `componentDidUnmount` since your component will have been                                       // 4563
   * destroyed by that point.                                                                                          // 4564
   *                                                                                                                   // 4565
   * @optional                                                                                                         // 4566
   */                                                                                                                  // 4567
  componentWillUnmount: SpecPolicy.DEFINE_MANY,                                                                        // 4568
                                                                                                                       // 4569
                                                                                                                       // 4570
                                                                                                                       // 4571
  // ==== Advanced methods ====                                                                                        // 4572
                                                                                                                       // 4573
  /**                                                                                                                  // 4574
   * Updates the component's currently mounted DOM representation.                                                     // 4575
   *                                                                                                                   // 4576
   * By default, this implements React's rendering and reconciliation algorithm.                                       // 4577
   * Sophisticated clients may wish to override this.                                                                  // 4578
   *                                                                                                                   // 4579
   * @param {ReactReconcileTransaction} transaction                                                                    // 4580
   * @internal                                                                                                         // 4581
   * @overridable                                                                                                      // 4582
   */                                                                                                                  // 4583
  updateComponent: SpecPolicy.OVERRIDE_BASE                                                                            // 4584
                                                                                                                       // 4585
};                                                                                                                     // 4586
                                                                                                                       // 4587
/**                                                                                                                    // 4588
 * Mapping from class specification keys to special processing functions.                                              // 4589
 *                                                                                                                     // 4590
 * Although these are declared in the specification when defining classes                                              // 4591
 * using `React.createClass`, they will not be on the component's prototype.                                           // 4592
 */                                                                                                                    // 4593
var RESERVED_SPEC_KEYS = {                                                                                             // 4594
  displayName: function(Constructor, displayName) {                                                                    // 4595
    Constructor.displayName = displayName;                                                                             // 4596
  },                                                                                                                   // 4597
  mixins: function(Constructor, mixins) {                                                                              // 4598
    if (mixins) {                                                                                                      // 4599
      for (var i = 0; i < mixins.length; i++) {                                                                        // 4600
        mixSpecIntoComponent(Constructor, mixins[i]);                                                                  // 4601
      }                                                                                                                // 4602
    }                                                                                                                  // 4603
  },                                                                                                                   // 4604
  propTypes: function(Constructor, propTypes) {                                                                        // 4605
    Constructor.propTypes = propTypes;                                                                                 // 4606
  }                                                                                                                    // 4607
};                                                                                                                     // 4608
                                                                                                                       // 4609
function validateMethodOverride(proto, name) {                                                                         // 4610
  var specPolicy = ReactCompositeComponentInterface[name];                                                             // 4611
                                                                                                                       // 4612
  // Disallow overriding of base class methods unless explicitly allowed.                                              // 4613
  if (ReactCompositeComponentMixin.hasOwnProperty(name)) {                                                             // 4614
    ("production" !== "development" ? invariant(                                                                       // 4615
      specPolicy === SpecPolicy.OVERRIDE_BASE,                                                                         // 4616
      'ReactCompositeComponentInterface: You are attempting to override ' +                                            // 4617
      '`%s` from your class specification. Ensure that your method names ' +                                           // 4618
      'do not overlap with React methods.',                                                                            // 4619
      name                                                                                                             // 4620
    ) : invariant(specPolicy === SpecPolicy.OVERRIDE_BASE));                                                           // 4621
  }                                                                                                                    // 4622
                                                                                                                       // 4623
  // Disallow defining methods more than once unless explicitly allowed.                                               // 4624
  if (proto.hasOwnProperty(name)) {                                                                                    // 4625
    ("production" !== "development" ? invariant(                                                                       // 4626
      specPolicy === SpecPolicy.DEFINE_MANY ||                                                                         // 4627
      specPolicy === SpecPolicy.DEFINE_MANY_MERGED,                                                                    // 4628
      'ReactCompositeComponentInterface: You are attempting to define ' +                                              // 4629
      '`%s` on your component more than once. This conflict may be due ' +                                             // 4630
      'to a mixin.',                                                                                                   // 4631
      name                                                                                                             // 4632
    ) : invariant(specPolicy === SpecPolicy.DEFINE_MANY ||                                                             // 4633
    specPolicy === SpecPolicy.DEFINE_MANY_MERGED));                                                                    // 4634
  }                                                                                                                    // 4635
}                                                                                                                      // 4636
                                                                                                                       // 4637
                                                                                                                       // 4638
function validateLifeCycleOnReplaceState(instance) {                                                                   // 4639
  var compositeLifeCycleState = instance._compositeLifeCycleState;                                                     // 4640
  ("production" !== "development" ? invariant(                                                                         // 4641
    instance.isMounted() ||                                                                                            // 4642
      compositeLifeCycleState === CompositeLifeCycle.MOUNTING,                                                         // 4643
    'replaceState(...): Can only update a mounted or mounting component.'                                              // 4644
  ) : invariant(instance.isMounted() ||                                                                                // 4645
    compositeLifeCycleState === CompositeLifeCycle.MOUNTING));                                                         // 4646
  ("production" !== "development" ? invariant(compositeLifeCycleState !== CompositeLifeCycle.RECEIVING_STATE,          // 4647
    'replaceState(...): Cannot update during an existing state transition ' +                                          // 4648
    '(such as within `render`). This could potentially cause an infinite ' +                                           // 4649
    'loop so it is forbidden.'                                                                                         // 4650
  ) : invariant(compositeLifeCycleState !== CompositeLifeCycle.RECEIVING_STATE));                                      // 4651
  ("production" !== "development" ? invariant(compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING,               // 4652
    'replaceState(...): Cannot update while unmounting component. This ' +                                             // 4653
    'usually means you called setState() on an unmounted component.'                                                   // 4654
  ) : invariant(compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING));                                           // 4655
}                                                                                                                      // 4656
                                                                                                                       // 4657
/**                                                                                                                    // 4658
 * Custom version of `mixInto` which handles policy validation and reserved                                            // 4659
 * specification keys when building `ReactCompositeComponent` classses.                                                // 4660
 */                                                                                                                    // 4661
function mixSpecIntoComponent(Constructor, spec) {                                                                     // 4662
  var proto = Constructor.prototype;                                                                                   // 4663
  for (var name in spec) {                                                                                             // 4664
    var property = spec[name];                                                                                         // 4665
    if (!spec.hasOwnProperty(name) || !property) {                                                                     // 4666
      continue;                                                                                                        // 4667
    }                                                                                                                  // 4668
    validateMethodOverride(proto, name);                                                                               // 4669
                                                                                                                       // 4670
    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {                                                                     // 4671
      RESERVED_SPEC_KEYS[name](Constructor, property);                                                                 // 4672
    } else {                                                                                                           // 4673
      // Setup methods on prototype:                                                                                   // 4674
      // The following member methods should not be automatically bound:                                               // 4675
      // 1. Expected ReactCompositeComponent methods (in the "interface").                                             // 4676
      // 2. Overridden methods (that were mixed in).                                                                   // 4677
      var isCompositeComponentMethod = name in ReactCompositeComponentInterface;                                       // 4678
      var isInherited = name in proto;                                                                                 // 4679
      var markedDontBind = property.__reactDontBind;                                                                   // 4680
      var isFunction = typeof property === 'function';                                                                 // 4681
      var shouldAutoBind =                                                                                             // 4682
        isFunction &&                                                                                                  // 4683
        !isCompositeComponentMethod &&                                                                                 // 4684
        !isInherited &&                                                                                                // 4685
        !markedDontBind;                                                                                               // 4686
                                                                                                                       // 4687
      if (shouldAutoBind) {                                                                                            // 4688
        if (!proto.__reactAutoBindMap) {                                                                               // 4689
          proto.__reactAutoBindMap = {};                                                                               // 4690
        }                                                                                                              // 4691
        proto.__reactAutoBindMap[name] = property;                                                                     // 4692
        proto[name] = property;                                                                                        // 4693
      } else {                                                                                                         // 4694
        if (isInherited) {                                                                                             // 4695
          // For methods which are defined more than once, call the existing                                           // 4696
          // methods before calling the new property.                                                                  // 4697
          if (ReactCompositeComponentInterface[name] ===                                                               // 4698
              SpecPolicy.DEFINE_MANY_MERGED) {                                                                         // 4699
            proto[name] = createMergedResultFunction(proto[name], property);                                           // 4700
          } else {                                                                                                     // 4701
            proto[name] = createChainedFunction(proto[name], property);                                                // 4702
          }                                                                                                            // 4703
        } else {                                                                                                       // 4704
          proto[name] = property;                                                                                      // 4705
        }                                                                                                              // 4706
      }                                                                                                                // 4707
    }                                                                                                                  // 4708
  }                                                                                                                    // 4709
}                                                                                                                      // 4710
                                                                                                                       // 4711
/**                                                                                                                    // 4712
 * Merge two objects, but throw if both contain the same key.                                                          // 4713
 *                                                                                                                     // 4714
 * @param {object} one The first object, which is mutated.                                                             // 4715
 * @param {object} two The second object                                                                               // 4716
 * @return {object} one after it has been mutated to contain everything in two.                                        // 4717
 */                                                                                                                    // 4718
function mergeObjectsWithNoDuplicateKeys(one, two) {                                                                   // 4719
  ("production" !== "development" ? invariant(                                                                         // 4720
    one && two && typeof one === 'object' && typeof two === 'object',                                                  // 4721
    'mergeObjectsWithNoDuplicateKeys(): Cannot merge non-objects'                                                      // 4722
  ) : invariant(one && two && typeof one === 'object' && typeof two === 'object'));                                    // 4723
                                                                                                                       // 4724
  objMap(two, function(value, key) {                                                                                   // 4725
    ("production" !== "development" ? invariant(                                                                       // 4726
      one[key] === undefined,                                                                                          // 4727
      'mergeObjectsWithNoDuplicateKeys(): ' +                                                                          // 4728
      'Tried to merge two objects with the same key: %s',                                                              // 4729
      key                                                                                                              // 4730
    ) : invariant(one[key] === undefined));                                                                            // 4731
    one[key] = value;                                                                                                  // 4732
  });                                                                                                                  // 4733
  return one;                                                                                                          // 4734
}                                                                                                                      // 4735
                                                                                                                       // 4736
/**                                                                                                                    // 4737
 * Creates a function that invokes two functions and merges their return values.                                       // 4738
 *                                                                                                                     // 4739
 * @param {function} one Function to invoke first.                                                                     // 4740
 * @param {function} two Function to invoke second.                                                                    // 4741
 * @return {function} Function that invokes the two argument functions.                                                // 4742
 * @private                                                                                                            // 4743
 */                                                                                                                    // 4744
function createMergedResultFunction(one, two) {                                                                        // 4745
  return function mergedResult() {                                                                                     // 4746
    return mergeObjectsWithNoDuplicateKeys(                                                                            // 4747
      one.apply(this, arguments),                                                                                      // 4748
      two.apply(this, arguments)                                                                                       // 4749
    );                                                                                                                 // 4750
  };                                                                                                                   // 4751
}                                                                                                                      // 4752
                                                                                                                       // 4753
/**                                                                                                                    // 4754
 * Creates a function that invokes two functions and ignores their return vales.                                       // 4755
 *                                                                                                                     // 4756
 * @param {function} one Function to invoke first.                                                                     // 4757
 * @param {function} two Function to invoke second.                                                                    // 4758
 * @return {function} Function that invokes the two argument functions.                                                // 4759
 * @private                                                                                                            // 4760
 */                                                                                                                    // 4761
function createChainedFunction(one, two) {                                                                             // 4762
  return function chainedFunction() {                                                                                  // 4763
    one.apply(this, arguments);                                                                                        // 4764
    two.apply(this, arguments);                                                                                        // 4765
  };                                                                                                                   // 4766
}                                                                                                                      // 4767
                                                                                                                       // 4768
/**                                                                                                                    // 4769
 * `ReactCompositeComponent` maintains an auxiliary life cycle state in                                                // 4770
 * `this._compositeLifeCycleState` (which can be null).                                                                // 4771
 *                                                                                                                     // 4772
 * This is different from the life cycle state maintained by `ReactComponent` in                                       // 4773
 * `this._lifeCycleState`. The following diagram shows how the states overlap in                                       // 4774
 * time. There are times when the CompositeLifeCycle is null - at those times it                                       // 4775
 * is only meaningful to look at ComponentLifeCycle alone.                                                             // 4776
 *                                                                                                                     // 4777
 * Top Row: ReactComponent.ComponentLifeCycle                                                                          // 4778
 * Low Row: ReactComponent.CompositeLifeCycle                                                                          // 4779
 *                                                                                                                     // 4780
 * +-------+------------------------------------------------------+--------+                                           // 4781
 * |  UN   |                    MOUNTED                           |   UN   |                                           // 4782
 * |MOUNTED|                                                      | MOUNTED|                                           // 4783
 * +-------+------------------------------------------------------+--------+                                           // 4784
 * |       ^--------+   +------+   +------+   +------+   +--------^        |                                           // 4785
 * |       |        |   |      |   |      |   |      |   |        |        |                                           // 4786
 * |    0--|MOUNTING|-0-|RECEIV|-0-|RECEIV|-0-|RECEIV|-0-|   UN   |--->0   |                                           // 4787
 * |       |        |   |PROPS |   | PROPS|   | STATE|   |MOUNTING|        |                                           // 4788
 * |       |        |   |      |   |      |   |      |   |        |        |                                           // 4789
 * |       |        |   |      |   |      |   |      |   |        |        |                                           // 4790
 * |       +--------+   +------+   +------+   +------+   +--------+        |                                           // 4791
 * |       |                                                      |        |                                           // 4792
 * +-------+------------------------------------------------------+--------+                                           // 4793
 */                                                                                                                    // 4794
var CompositeLifeCycle = keyMirror({                                                                                   // 4795
  /**                                                                                                                  // 4796
   * Components in the process of being mounted respond to state changes                                               // 4797
   * differently.                                                                                                      // 4798
   */                                                                                                                  // 4799
  MOUNTING: null,                                                                                                      // 4800
  /**                                                                                                                  // 4801
   * Components in the process of being unmounted are guarded against state                                            // 4802
   * changes.                                                                                                          // 4803
   */                                                                                                                  // 4804
  UNMOUNTING: null,                                                                                                    // 4805
  /**                                                                                                                  // 4806
   * Components that are mounted and receiving new props respond to state                                              // 4807
   * changes differently.                                                                                              // 4808
   */                                                                                                                  // 4809
  RECEIVING_PROPS: null,                                                                                               // 4810
  /**                                                                                                                  // 4811
   * Components that are mounted and receiving new state are guarded against                                           // 4812
   * additional state changes.                                                                                         // 4813
   */                                                                                                                  // 4814
  RECEIVING_STATE: null                                                                                                // 4815
});                                                                                                                    // 4816
                                                                                                                       // 4817
/**                                                                                                                    // 4818
 * @lends {ReactCompositeComponent.prototype}                                                                          // 4819
 */                                                                                                                    // 4820
var ReactCompositeComponentMixin = {                                                                                   // 4821
                                                                                                                       // 4822
  /**                                                                                                                  // 4823
   * Base constructor for all composite component.                                                                     // 4824
   *                                                                                                                   // 4825
   * @param {?object} initialProps                                                                                     // 4826
   * @param {*} children                                                                                               // 4827
   * @final                                                                                                            // 4828
   * @internal                                                                                                         // 4829
   */                                                                                                                  // 4830
  construct: function(initialProps, children) {                                                                        // 4831
    // Children can be either an array or more than one argument                                                       // 4832
    ReactComponent.Mixin.construct.apply(this, arguments);                                                             // 4833
    this.state = null;                                                                                                 // 4834
    this._pendingState = null;                                                                                         // 4835
    this._compositeLifeCycleState = null;                                                                              // 4836
  },                                                                                                                   // 4837
                                                                                                                       // 4838
  /**                                                                                                                  // 4839
   * Checks whether or not this composite component is mounted.                                                        // 4840
   * @return {boolean} True if mounted, false otherwise.                                                               // 4841
   * @protected                                                                                                        // 4842
   * @final                                                                                                            // 4843
   */                                                                                                                  // 4844
  isMounted: function() {                                                                                              // 4845
    return ReactComponent.Mixin.isMounted.call(this) &&                                                                // 4846
      this._compositeLifeCycleState !== CompositeLifeCycle.MOUNTING;                                                   // 4847
  },                                                                                                                   // 4848
                                                                                                                       // 4849
  /**                                                                                                                  // 4850
   * Initializes the component, renders markup, and registers event listeners.                                         // 4851
   *                                                                                                                   // 4852
   * @param {string} rootID DOM ID of the root node.                                                                   // 4853
   * @param {ReactReconcileTransaction} transaction                                                                    // 4854
   * @param {number} mountDepth number of components in the owner hierarchy                                            // 4855
   * @return {?string} Rendered markup to be inserted into the DOM.                                                    // 4856
   * @final                                                                                                            // 4857
   * @internal                                                                                                         // 4858
   */                                                                                                                  // 4859
  mountComponent: ReactPerf.measure(                                                                                   // 4860
    'ReactCompositeComponent',                                                                                         // 4861
    'mountComponent',                                                                                                  // 4862
    function(rootID, transaction, mountDepth) {                                                                        // 4863
      ReactComponent.Mixin.mountComponent.call(                                                                        // 4864
        this,                                                                                                          // 4865
        rootID,                                                                                                        // 4866
        transaction,                                                                                                   // 4867
        mountDepth                                                                                                     // 4868
      );                                                                                                               // 4869
      this._compositeLifeCycleState = CompositeLifeCycle.MOUNTING;                                                     // 4870
                                                                                                                       // 4871
      this._defaultProps = this.getDefaultProps ? this.getDefaultProps() : null;                                       // 4872
      this._processProps(this.props);                                                                                  // 4873
                                                                                                                       // 4874
      if (this.__reactAutoBindMap) {                                                                                   // 4875
        this._bindAutoBindMethods();                                                                                   // 4876
      }                                                                                                                // 4877
                                                                                                                       // 4878
      this.state = this.getInitialState ? this.getInitialState() : null;                                               // 4879
      this._pendingState = null;                                                                                       // 4880
      this._pendingForceUpdate = false;                                                                                // 4881
                                                                                                                       // 4882
      if (this.componentWillMount) {                                                                                   // 4883
        this.componentWillMount();                                                                                     // 4884
        // When mounting, calls to `setState` by `componentWillMount` will set                                         // 4885
        // `this._pendingState` without triggering a re-render.                                                        // 4886
        if (this._pendingState) {                                                                                      // 4887
          this.state = this._pendingState;                                                                             // 4888
          this._pendingState = null;                                                                                   // 4889
        }                                                                                                              // 4890
      }                                                                                                                // 4891
                                                                                                                       // 4892
      this._renderedComponent = this._renderValidatedComponent();                                                      // 4893
                                                                                                                       // 4894
      // Done with mounting, `setState` will now trigger UI changes.                                                   // 4895
      this._compositeLifeCycleState = null;                                                                            // 4896
      var markup = this._renderedComponent.mountComponent(                                                             // 4897
        rootID,                                                                                                        // 4898
        transaction,                                                                                                   // 4899
        mountDepth + 1                                                                                                 // 4900
      );                                                                                                               // 4901
      if (this.componentDidMount) {                                                                                    // 4902
        transaction.getReactMountReady().enqueue(this, this.componentDidMount);                                        // 4903
      }                                                                                                                // 4904
      return markup;                                                                                                   // 4905
    }                                                                                                                  // 4906
  ),                                                                                                                   // 4907
                                                                                                                       // 4908
  /**                                                                                                                  // 4909
   * Releases any resources allocated by `mountComponent`.                                                             // 4910
   *                                                                                                                   // 4911
   * @final                                                                                                            // 4912
   * @internal                                                                                                         // 4913
   */                                                                                                                  // 4914
  unmountComponent: function() {                                                                                       // 4915
    this._compositeLifeCycleState = CompositeLifeCycle.UNMOUNTING;                                                     // 4916
    if (this.componentWillUnmount) {                                                                                   // 4917
      this.componentWillUnmount();                                                                                     // 4918
    }                                                                                                                  // 4919
    this._compositeLifeCycleState = null;                                                                              // 4920
                                                                                                                       // 4921
    this._defaultProps = null;                                                                                         // 4922
                                                                                                                       // 4923
    ReactComponent.Mixin.unmountComponent.call(this);                                                                  // 4924
    this._renderedComponent.unmountComponent();                                                                        // 4925
    this._renderedComponent = null;                                                                                    // 4926
                                                                                                                       // 4927
    if (this.refs) {                                                                                                   // 4928
      this.refs = null;                                                                                                // 4929
    }                                                                                                                  // 4930
                                                                                                                       // 4931
    // Some existing components rely on this.props even after they've been                                             // 4932
    // destroyed (in event handlers).                                                                                  // 4933
    // TODO: this.props = null;                                                                                        // 4934
    // TODO: this.state = null;                                                                                        // 4935
  },                                                                                                                   // 4936
                                                                                                                       // 4937
  /**                                                                                                                  // 4938
   * Sets a subset of the state. Always use this or `replaceState` to mutate                                           // 4939
   * state. You should treat `this.state` as immutable.                                                                // 4940
   *                                                                                                                   // 4941
   * There is no guarantee that `this.state` will be immediately updated, so                                           // 4942
   * accessing `this.state` after calling this method may return the old value.                                        // 4943
   *                                                                                                                   // 4944
   * There is no guarantee that calls to `setState` will run synchronously,                                            // 4945
   * as they may eventually be batched together.  You can provide an optional                                          // 4946
   * callback that will be executed when the call to setState is actually                                              // 4947
   * completed.                                                                                                        // 4948
   *                                                                                                                   // 4949
   * @param {object} partialState Next partial state to be merged with state.                                          // 4950
   * @param {?function} callback Called after state is updated.                                                        // 4951
   * @final                                                                                                            // 4952
   * @protected                                                                                                        // 4953
   */                                                                                                                  // 4954
  setState: function(partialState, callback) {                                                                         // 4955
    // Merge with `_pendingState` if it exists, otherwise with existing state.                                         // 4956
    this.replaceState(                                                                                                 // 4957
      merge(this._pendingState || this.state, partialState),                                                           // 4958
      callback                                                                                                         // 4959
    );                                                                                                                 // 4960
  },                                                                                                                   // 4961
                                                                                                                       // 4962
  /**                                                                                                                  // 4963
   * Replaces all of the state. Always use this or `setState` to mutate state.                                         // 4964
   * You should treat `this.state` as immutable.                                                                       // 4965
   *                                                                                                                   // 4966
   * There is no guarantee that `this.state` will be immediately updated, so                                           // 4967
   * accessing `this.state` after calling this method may return the old value.                                        // 4968
   *                                                                                                                   // 4969
   * @param {object} completeState Next state.                                                                         // 4970
   * @param {?function} callback Called after state is updated.                                                        // 4971
   * @final                                                                                                            // 4972
   * @protected                                                                                                        // 4973
   */                                                                                                                  // 4974
  replaceState: function(completeState, callback) {                                                                    // 4975
    validateLifeCycleOnReplaceState(this);                                                                             // 4976
    this._pendingState = completeState;                                                                                // 4977
    ReactUpdates.enqueueUpdate(this, callback);                                                                        // 4978
  },                                                                                                                   // 4979
                                                                                                                       // 4980
  /**                                                                                                                  // 4981
   * Processes props by setting default values for unspecified props and                                               // 4982
   * asserting that the props are valid.                                                                               // 4983
   *                                                                                                                   // 4984
   * @param {object} props                                                                                             // 4985
   * @private                                                                                                          // 4986
   */                                                                                                                  // 4987
  _processProps: function(props) {                                                                                     // 4988
    var propName;                                                                                                      // 4989
    var defaultProps = this._defaultProps;                                                                             // 4990
    for (propName in defaultProps) {                                                                                   // 4991
      if (!(propName in props)) {                                                                                      // 4992
        props[propName] = defaultProps[propName];                                                                      // 4993
      }                                                                                                                // 4994
    }                                                                                                                  // 4995
    var propTypes = this.constructor.propTypes;                                                                        // 4996
    if (propTypes) {                                                                                                   // 4997
      var componentName = this.constructor.displayName;                                                                // 4998
      for (propName in propTypes) {                                                                                    // 4999
        var checkProp = propTypes[propName];                                                                           // 5000
        if (checkProp) {                                                                                               // 5001
          checkProp(props, propName, componentName);                                                                   // 5002
        }                                                                                                              // 5003
      }                                                                                                                // 5004
    }                                                                                                                  // 5005
  },                                                                                                                   // 5006
                                                                                                                       // 5007
  performUpdateIfNecessary: function() {                                                                               // 5008
    var compositeLifeCycleState = this._compositeLifeCycleState;                                                       // 5009
    // Do not trigger a state transition if we are in the middle of mounting or                                        // 5010
    // receiving props because both of those will already be doing this.                                               // 5011
    if (compositeLifeCycleState === CompositeLifeCycle.MOUNTING ||                                                     // 5012
        compositeLifeCycleState === CompositeLifeCycle.RECEIVING_PROPS) {                                              // 5013
      return;                                                                                                          // 5014
    }                                                                                                                  // 5015
    ReactComponent.Mixin.performUpdateIfNecessary.call(this);                                                          // 5016
  },                                                                                                                   // 5017
                                                                                                                       // 5018
  /**                                                                                                                  // 5019
   * If any of `_pendingProps`, `_pendingState`, or `_pendingForceUpdate` is                                           // 5020
   * set, update the component.                                                                                        // 5021
   *                                                                                                                   // 5022
   * @param {ReactReconcileTransaction} transaction                                                                    // 5023
   * @internal                                                                                                         // 5024
   */                                                                                                                  // 5025
  _performUpdateIfNecessary: function(transaction) {                                                                   // 5026
    if (this._pendingProps == null &&                                                                                  // 5027
        this._pendingState == null &&                                                                                  // 5028
        !this._pendingForceUpdate) {                                                                                   // 5029
      return;                                                                                                          // 5030
    }                                                                                                                  // 5031
                                                                                                                       // 5032
    var nextProps = this.props;                                                                                        // 5033
    if (this._pendingProps != null) {                                                                                  // 5034
      nextProps = this._pendingProps;                                                                                  // 5035
      this._processProps(nextProps);                                                                                   // 5036
      this._pendingProps = null;                                                                                       // 5037
                                                                                                                       // 5038
      this._compositeLifeCycleState = CompositeLifeCycle.RECEIVING_PROPS;                                              // 5039
      if (this.componentWillReceiveProps) {                                                                            // 5040
        this.componentWillReceiveProps(nextProps, transaction);                                                        // 5041
      }                                                                                                                // 5042
    }                                                                                                                  // 5043
                                                                                                                       // 5044
    this._compositeLifeCycleState = CompositeLifeCycle.RECEIVING_STATE;                                                // 5045
                                                                                                                       // 5046
    var nextState = this._pendingState || this.state;                                                                  // 5047
    this._pendingState = null;                                                                                         // 5048
                                                                                                                       // 5049
    if (this._pendingForceUpdate ||                                                                                    // 5050
        !this.shouldComponentUpdate ||                                                                                 // 5051
        this.shouldComponentUpdate(nextProps, nextState)) {                                                            // 5052
      this._pendingForceUpdate = false;                                                                                // 5053
      // Will set `this.props` and `this.state`.                                                                       // 5054
      this._performComponentUpdate(nextProps, nextState, transaction);                                                 // 5055
    } else {                                                                                                           // 5056
      // If it's determined that a component should not update, we still want                                          // 5057
      // to set props and state.                                                                                       // 5058
      this.props = nextProps;                                                                                          // 5059
      this.state = nextState;                                                                                          // 5060
    }                                                                                                                  // 5061
                                                                                                                       // 5062
    this._compositeLifeCycleState = null;                                                                              // 5063
  },                                                                                                                   // 5064
                                                                                                                       // 5065
  /**                                                                                                                  // 5066
   * Merges new props and state, notifies delegate methods of update and                                               // 5067
   * performs update.                                                                                                  // 5068
   *                                                                                                                   // 5069
   * @param {object} nextProps Next object to set as properties.                                                       // 5070
   * @param {?object} nextState Next object to set as state.                                                           // 5071
   * @param {ReactReconcileTransaction} transaction                                                                    // 5072
   * @private                                                                                                          // 5073
   */                                                                                                                  // 5074
  _performComponentUpdate: function(nextProps, nextState, transaction) {                                               // 5075
    var prevProps = this.props;                                                                                        // 5076
    var prevState = this.state;                                                                                        // 5077
                                                                                                                       // 5078
    if (this.componentWillUpdate) {                                                                                    // 5079
      this.componentWillUpdate(nextProps, nextState, transaction);                                                     // 5080
    }                                                                                                                  // 5081
                                                                                                                       // 5082
    this.props = nextProps;                                                                                            // 5083
    this.state = nextState;                                                                                            // 5084
                                                                                                                       // 5085
    this.updateComponent(transaction, prevProps, prevState);                                                           // 5086
                                                                                                                       // 5087
    if (this.componentDidUpdate) {                                                                                     // 5088
      transaction.getReactMountReady().enqueue(                                                                        // 5089
        this,                                                                                                          // 5090
        this.componentDidUpdate.bind(this, prevProps, prevState)                                                       // 5091
      );                                                                                                               // 5092
    }                                                                                                                  // 5093
  },                                                                                                                   // 5094
                                                                                                                       // 5095
  /**                                                                                                                  // 5096
   * Updates the component's currently mounted DOM representation.                                                     // 5097
   *                                                                                                                   // 5098
   * By default, this implements React's rendering and reconciliation algorithm.                                       // 5099
   * Sophisticated clients may wish to override this.                                                                  // 5100
   *                                                                                                                   // 5101
   * @param {ReactReconcileTransaction} transaction                                                                    // 5102
   * @param {object} prevProps                                                                                         // 5103
   * @param {?object} prevState                                                                                        // 5104
   * @internal                                                                                                         // 5105
   * @overridable                                                                                                      // 5106
   */                                                                                                                  // 5107
  updateComponent: ReactPerf.measure(                                                                                  // 5108
    'ReactCompositeComponent',                                                                                         // 5109
    'updateComponent',                                                                                                 // 5110
    function(transaction, prevProps, prevState) {                                                                      // 5111
      ReactComponent.Mixin.updateComponent.call(this, transaction, prevProps);                                         // 5112
      var currentComponent = this._renderedComponent;                                                                  // 5113
      var nextComponent = this._renderValidatedComponent();                                                            // 5114
      if (currentComponent.constructor === nextComponent.constructor) {                                                // 5115
        currentComponent.receiveComponent(nextComponent, transaction);                                                 // 5116
      } else {                                                                                                         // 5117
        // These two IDs are actually the same! But nothing should rely on that.                                       // 5118
        var thisID = this._rootNodeID;                                                                                 // 5119
        var currentComponentID = currentComponent._rootNodeID;                                                         // 5120
        currentComponent.unmountComponent();                                                                           // 5121
        this._renderedComponent = nextComponent;                                                                       // 5122
        var nextMarkup = nextComponent.mountComponent(                                                                 // 5123
          thisID,                                                                                                      // 5124
          transaction,                                                                                                 // 5125
          this._mountDepth + 1                                                                                         // 5126
        );                                                                                                             // 5127
        ReactComponent.DOMIDOperations.dangerouslyReplaceNodeWithMarkupByID(                                           // 5128
          currentComponentID,                                                                                          // 5129
          nextMarkup                                                                                                   // 5130
        );                                                                                                             // 5131
      }                                                                                                                // 5132
    }                                                                                                                  // 5133
  ),                                                                                                                   // 5134
                                                                                                                       // 5135
  /**                                                                                                                  // 5136
   * Forces an update. This should only be invoked when it is known with                                               // 5137
   * certainty that we are **not** in a DOM transaction.                                                               // 5138
   *                                                                                                                   // 5139
   * You may want to call this when you know that some deeper aspect of the                                            // 5140
   * component's state has changed but `setState` was not called.                                                      // 5141
   *                                                                                                                   // 5142
   * This will not invoke `shouldUpdateComponent`, but it will invoke                                                  // 5143
   * `componentWillUpdate` and `componentDidUpdate`.                                                                   // 5144
   *                                                                                                                   // 5145
   * @param {?function} callback Called after update is complete.                                                      // 5146
   * @final                                                                                                            // 5147
   * @protected                                                                                                        // 5148
   */                                                                                                                  // 5149
  forceUpdate: function(callback) {                                                                                    // 5150
    var compositeLifeCycleState = this._compositeLifeCycleState;                                                       // 5151
    ("production" !== "development" ? invariant(                                                                       // 5152
      this.isMounted() ||                                                                                              // 5153
        compositeLifeCycleState === CompositeLifeCycle.MOUNTING,                                                       // 5154
      'forceUpdate(...): Can only force an update on mounted or mounting ' +                                           // 5155
        'components.'                                                                                                  // 5156
    ) : invariant(this.isMounted() ||                                                                                  // 5157
      compositeLifeCycleState === CompositeLifeCycle.MOUNTING));                                                       // 5158
    ("production" !== "development" ? invariant(                                                                       // 5159
      compositeLifeCycleState !== CompositeLifeCycle.RECEIVING_STATE &&                                                // 5160
      compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING,                                                       // 5161
      'forceUpdate(...): Cannot force an update while unmounting component ' +                                         // 5162
      'or during an existing state transition (such as within `render`).'                                              // 5163
    ) : invariant(compositeLifeCycleState !== CompositeLifeCycle.RECEIVING_STATE &&                                    // 5164
    compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING));                                                       // 5165
    this._pendingForceUpdate = true;                                                                                   // 5166
    ReactUpdates.enqueueUpdate(this, callback);                                                                        // 5167
  },                                                                                                                   // 5168
                                                                                                                       // 5169
  /**                                                                                                                  // 5170
   * @private                                                                                                          // 5171
   */                                                                                                                  // 5172
  _renderValidatedComponent: function() {                                                                              // 5173
    var renderedComponent;                                                                                             // 5174
    ReactCurrentOwner.current = this;                                                                                  // 5175
    try {                                                                                                              // 5176
      renderedComponent = this.render();                                                                               // 5177
    } catch (error) {                                                                                                  // 5178
      // IE8 requires `catch` in order to use `finally`.                                                               // 5179
      throw error;                                                                                                     // 5180
    } finally {                                                                                                        // 5181
      ReactCurrentOwner.current = null;                                                                                // 5182
    }                                                                                                                  // 5183
    ("production" !== "development" ? invariant(                                                                       // 5184
      ReactComponent.isValidComponent(renderedComponent),                                                              // 5185
      '%s.render(): A valid ReactComponent must be returned. You may have ' +                                          // 5186
      'returned null, undefined, an array, or some other invalid object.',                                             // 5187
      this.constructor.displayName || 'ReactCompositeComponent'                                                        // 5188
    ) : invariant(ReactComponent.isValidComponent(renderedComponent)));                                                // 5189
    return renderedComponent;                                                                                          // 5190
  },                                                                                                                   // 5191
                                                                                                                       // 5192
  /**                                                                                                                  // 5193
   * @private                                                                                                          // 5194
   */                                                                                                                  // 5195
  _bindAutoBindMethods: function() {                                                                                   // 5196
    for (var autoBindKey in this.__reactAutoBindMap) {                                                                 // 5197
      if (!this.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {                                                      // 5198
        continue;                                                                                                      // 5199
      }                                                                                                                // 5200
      var method = this.__reactAutoBindMap[autoBindKey];                                                               // 5201
      this[autoBindKey] = this._bindAutoBindMethod(ReactErrorUtils.guard(                                              // 5202
        method,                                                                                                        // 5203
        this.constructor.displayName + '.' + autoBindKey                                                               // 5204
      ));                                                                                                              // 5205
    }                                                                                                                  // 5206
  },                                                                                                                   // 5207
                                                                                                                       // 5208
  /**                                                                                                                  // 5209
   * Binds a method to the component.                                                                                  // 5210
   *                                                                                                                   // 5211
   * @param {function} method Method to be bound.                                                                      // 5212
   * @private                                                                                                          // 5213
   */                                                                                                                  // 5214
  _bindAutoBindMethod: function(method) {                                                                              // 5215
    var component = this;                                                                                              // 5216
    var boundMethod = function() {                                                                                     // 5217
      return method.apply(component, arguments);                                                                       // 5218
    };                                                                                                                 // 5219
    if ("production" !== "development") {                                                                              // 5220
      boundMethod.__reactBoundContext = component;                                                                     // 5221
      boundMethod.__reactBoundMethod = method;                                                                         // 5222
      boundMethod.__reactBoundArguments = null;                                                                        // 5223
      var componentName = component.constructor.displayName;                                                           // 5224
      var _bind = boundMethod.bind;                                                                                    // 5225
      boundMethod.bind = function(newThis) {                                                                           // 5226
        // User is trying to bind() an autobound method; we effectively will                                           // 5227
        // ignore the value of "this" that the user is trying to use, so                                               // 5228
        // let's warn.                                                                                                 // 5229
        if (newThis !== component && newThis !== null) {                                                               // 5230
          console.warn(                                                                                                // 5231
            'bind(): React component methods may only be bound to the ' +                                              // 5232
            'component instance. See ' + componentName                                                                 // 5233
          );                                                                                                           // 5234
        } else if (arguments.length === 1) {                                                                           // 5235
          console.warn(                                                                                                // 5236
            'bind(): You are binding a component method to the component. ' +                                          // 5237
            'React does this for you automatically in a high-performance ' +                                           // 5238
            'way, so you can safely remove this call. See ' + componentName                                            // 5239
          );                                                                                                           // 5240
          return boundMethod;                                                                                          // 5241
        }                                                                                                              // 5242
        var reboundMethod = _bind.apply(boundMethod, arguments);                                                       // 5243
        reboundMethod.__reactBoundContext = component;                                                                 // 5244
        reboundMethod.__reactBoundMethod = method;                                                                     // 5245
        reboundMethod.__reactBoundArguments =                                                                          // 5246
          Array.prototype.slice.call(arguments, 1);                                                                    // 5247
        return reboundMethod;                                                                                          // 5248
      };                                                                                                               // 5249
    }                                                                                                                  // 5250
    return boundMethod;                                                                                                // 5251
  }                                                                                                                    // 5252
};                                                                                                                     // 5253
                                                                                                                       // 5254
var ReactCompositeComponentBase = function() {};                                                                       // 5255
mixInto(ReactCompositeComponentBase, ReactComponent.Mixin);                                                            // 5256
mixInto(ReactCompositeComponentBase, ReactOwner.Mixin);                                                                // 5257
mixInto(ReactCompositeComponentBase, ReactPropTransferer.Mixin);                                                       // 5258
mixInto(ReactCompositeComponentBase, ReactCompositeComponentMixin);                                                    // 5259
                                                                                                                       // 5260
/**                                                                                                                    // 5261
 * Module for creating composite components.                                                                           // 5262
 *                                                                                                                     // 5263
 * @class ReactCompositeComponent                                                                                      // 5264
 * @extends ReactComponent                                                                                             // 5265
 * @extends ReactOwner                                                                                                 // 5266
 * @extends ReactPropTransferer                                                                                        // 5267
 */                                                                                                                    // 5268
var ReactCompositeComponent = {                                                                                        // 5269
                                                                                                                       // 5270
  LifeCycle: CompositeLifeCycle,                                                                                       // 5271
                                                                                                                       // 5272
  Base: ReactCompositeComponentBase,                                                                                   // 5273
                                                                                                                       // 5274
  /**                                                                                                                  // 5275
   * Creates a composite component class given a class specification.                                                  // 5276
   *                                                                                                                   // 5277
   * @param {object} spec Class specification (which must define `render`).                                            // 5278
   * @return {function} Component constructor function.                                                                // 5279
   * @public                                                                                                           // 5280
   */                                                                                                                  // 5281
  createClass: function(spec) {                                                                                        // 5282
    var Constructor = function() {};                                                                                   // 5283
    Constructor.prototype = new ReactCompositeComponentBase();                                                         // 5284
    Constructor.prototype.constructor = Constructor;                                                                   // 5285
    mixSpecIntoComponent(Constructor, spec);                                                                           // 5286
                                                                                                                       // 5287
    ("production" !== "development" ? invariant(                                                                       // 5288
      Constructor.prototype.render,                                                                                    // 5289
      'createClass(...): Class specification must implement a `render` method.'                                        // 5290
    ) : invariant(Constructor.prototype.render));                                                                      // 5291
                                                                                                                       // 5292
    if ("production" !== "development") {                                                                              // 5293
      if (Constructor.prototype.componentShouldUpdate) {                                                               // 5294
        console.warn(                                                                                                  // 5295
          (spec.displayName || 'A component') + ' has a method called ' +                                              // 5296
          'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +                                          // 5297
          'The name is phrased as a question because the function is ' +                                               // 5298
          'expected to return a value.'                                                                                // 5299
         );                                                                                                            // 5300
      }                                                                                                                // 5301
    }                                                                                                                  // 5302
                                                                                                                       // 5303
    // Reduce time spent doing lookups by setting these on the prototype.                                              // 5304
    for (var methodName in ReactCompositeComponentInterface) {                                                         // 5305
      if (!Constructor.prototype[methodName]) {                                                                        // 5306
        Constructor.prototype[methodName] = null;                                                                      // 5307
      }                                                                                                                // 5308
    }                                                                                                                  // 5309
                                                                                                                       // 5310
    var ConvenienceConstructor = function(props, children) {                                                           // 5311
      var instance = new Constructor();                                                                                // 5312
      instance.construct.apply(instance, arguments);                                                                   // 5313
      return instance;                                                                                                 // 5314
    };                                                                                                                 // 5315
    ConvenienceConstructor.componentConstructor = Constructor;                                                         // 5316
    ConvenienceConstructor.originalSpec = spec;                                                                        // 5317
    return ConvenienceConstructor;                                                                                     // 5318
  },                                                                                                                   // 5319
                                                                                                                       // 5320
  /**                                                                                                                  // 5321
   * Checks if a value is a valid component constructor.                                                               // 5322
   *                                                                                                                   // 5323
   * @param {*}                                                                                                        // 5324
   * @return {boolean}                                                                                                 // 5325
   * @public                                                                                                           // 5326
   */                                                                                                                  // 5327
  isValidClass: function(componentClass) {                                                                             // 5328
    return componentClass instanceof Function &&                                                                       // 5329
           'componentConstructor' in componentClass &&                                                                 // 5330
           componentClass.componentConstructor instanceof Function;                                                    // 5331
  }                                                                                                                    // 5332
};                                                                                                                     // 5333
                                                                                                                       // 5334
module.exports = ReactCompositeComponent;                                                                              // 5335
                                                                                                                       // 5336
},{"./ReactComponent":28,"./ReactCurrentOwner":32,"./ReactErrorUtils":46,"./ReactOwner":58,"./ReactPerf":59,"./ReactPropTransferer":60,"./ReactUpdates":70,"./invariant":109,"./keyMirror":115,"./merge":118,"./mixInto":121,"./objMap":123}],32:[function(require,module,exports){
/**                                                                                                                    // 5338
 * Copyright 2013 Facebook, Inc.                                                                                       // 5339
 *                                                                                                                     // 5340
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 5341
 * you may not use this file except in compliance with the License.                                                    // 5342
 * You may obtain a copy of the License at                                                                             // 5343
 *                                                                                                                     // 5344
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 5345
 *                                                                                                                     // 5346
 * Unless required by applicable law or agreed to in writing, software                                                 // 5347
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 5348
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 5349
 * See the License for the specific language governing permissions and                                                 // 5350
 * limitations under the License.                                                                                      // 5351
 *                                                                                                                     // 5352
 * @providesModule ReactCurrentOwner                                                                                   // 5353
 */                                                                                                                    // 5354
                                                                                                                       // 5355
"use strict";                                                                                                          // 5356
                                                                                                                       // 5357
/**                                                                                                                    // 5358
 * Keeps track of the current owner.                                                                                   // 5359
 *                                                                                                                     // 5360
 * The current owner is the component who should own any components that are                                           // 5361
 * currently being constructed.                                                                                        // 5362
 *                                                                                                                     // 5363
 * The depth indicate how many composite components are above this render level.                                       // 5364
 */                                                                                                                    // 5365
var ReactCurrentOwner = {                                                                                              // 5366
                                                                                                                       // 5367
  /**                                                                                                                  // 5368
   * @internal                                                                                                         // 5369
   * @type {ReactComponent}                                                                                            // 5370
   */                                                                                                                  // 5371
  current: null                                                                                                        // 5372
                                                                                                                       // 5373
};                                                                                                                     // 5374
                                                                                                                       // 5375
module.exports = ReactCurrentOwner;                                                                                    // 5376
                                                                                                                       // 5377
},{}],33:[function(require,module,exports){                                                                            // 5378
/**                                                                                                                    // 5379
 * Copyright 2013 Facebook, Inc.                                                                                       // 5380
 *                                                                                                                     // 5381
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 5382
 * you may not use this file except in compliance with the License.                                                    // 5383
 * You may obtain a copy of the License at                                                                             // 5384
 *                                                                                                                     // 5385
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 5386
 *                                                                                                                     // 5387
 * Unless required by applicable law or agreed to in writing, software                                                 // 5388
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 5389
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 5390
 * See the License for the specific language governing permissions and                                                 // 5391
 * limitations under the License.                                                                                      // 5392
 *                                                                                                                     // 5393
 * @providesModule ReactDOM                                                                                            // 5394
 * @typechecks static-only                                                                                             // 5395
 */                                                                                                                    // 5396
                                                                                                                       // 5397
"use strict";                                                                                                          // 5398
                                                                                                                       // 5399
var ReactDOMComponent = require("./ReactDOMComponent");                                                                // 5400
                                                                                                                       // 5401
var mergeInto = require("./mergeInto");                                                                                // 5402
var objMapKeyVal = require("./objMapKeyVal");                                                                          // 5403
                                                                                                                       // 5404
/**                                                                                                                    // 5405
 * Creates a new React class that is idempotent and capable of containing other                                        // 5406
 * React components. It accepts event listeners and DOM properties that are                                            // 5407
 * valid according to `DOMProperty`.                                                                                   // 5408
 *                                                                                                                     // 5409
 *  - Event listeners: `onClick`, `onMouseDown`, etc.                                                                  // 5410
 *  - DOM properties: `className`, `name`, `title`, etc.                                                               // 5411
 *                                                                                                                     // 5412
 * The `style` property functions differently from the DOM API. It accepts an                                          // 5413
 * object mapping of style properties to values.                                                                       // 5414
 *                                                                                                                     // 5415
 * @param {string} tag Tag name (e.g. `div`).                                                                          // 5416
 * @param {boolean} omitClose True if the close tag should be omitted.                                                 // 5417
 * @private                                                                                                            // 5418
 */                                                                                                                    // 5419
function createDOMComponentClass(tag, omitClose) {                                                                     // 5420
  var Constructor = function() {};                                                                                     // 5421
  Constructor.prototype = new ReactDOMComponent(tag, omitClose);                                                       // 5422
  Constructor.prototype.constructor = Constructor;                                                                     // 5423
  Constructor.displayName = tag;                                                                                       // 5424
                                                                                                                       // 5425
  var ConvenienceConstructor = function(props, children) {                                                             // 5426
    var instance = new Constructor();                                                                                  // 5427
    instance.construct.apply(instance, arguments);                                                                     // 5428
    return instance;                                                                                                   // 5429
  };                                                                                                                   // 5430
  ConvenienceConstructor.componentConstructor = Constructor;                                                           // 5431
  return ConvenienceConstructor;                                                                                       // 5432
}                                                                                                                      // 5433
                                                                                                                       // 5434
/**                                                                                                                    // 5435
 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.                                          // 5436
 * This is also accessible via `React.DOM`.                                                                            // 5437
 *                                                                                                                     // 5438
 * @public                                                                                                             // 5439
 */                                                                                                                    // 5440
var ReactDOM = objMapKeyVal({                                                                                          // 5441
  a: false,                                                                                                            // 5442
  abbr: false,                                                                                                         // 5443
  address: false,                                                                                                      // 5444
  area: false,                                                                                                         // 5445
  article: false,                                                                                                      // 5446
  aside: false,                                                                                                        // 5447
  audio: false,                                                                                                        // 5448
  b: false,                                                                                                            // 5449
  base: false,                                                                                                         // 5450
  bdi: false,                                                                                                          // 5451
  bdo: false,                                                                                                          // 5452
  big: false,                                                                                                          // 5453
  blockquote: false,                                                                                                   // 5454
  body: false,                                                                                                         // 5455
  br: true,                                                                                                            // 5456
  button: false,                                                                                                       // 5457
  canvas: false,                                                                                                       // 5458
  caption: false,                                                                                                      // 5459
  cite: false,                                                                                                         // 5460
  code: false,                                                                                                         // 5461
  col: true,                                                                                                           // 5462
  colgroup: false,                                                                                                     // 5463
  data: false,                                                                                                         // 5464
  datalist: false,                                                                                                     // 5465
  dd: false,                                                                                                           // 5466
  del: false,                                                                                                          // 5467
  details: false,                                                                                                      // 5468
  dfn: false,                                                                                                          // 5469
  div: false,                                                                                                          // 5470
  dl: false,                                                                                                           // 5471
  dt: false,                                                                                                           // 5472
  em: false,                                                                                                           // 5473
  embed: true,                                                                                                         // 5474
  fieldset: false,                                                                                                     // 5475
  figcaption: false,                                                                                                   // 5476
  figure: false,                                                                                                       // 5477
  footer: false,                                                                                                       // 5478
  form: false, // NOTE: Injected, see `ReactDOMForm`.                                                                  // 5479
  h1: false,                                                                                                           // 5480
  h2: false,                                                                                                           // 5481
  h3: false,                                                                                                           // 5482
  h4: false,                                                                                                           // 5483
  h5: false,                                                                                                           // 5484
  h6: false,                                                                                                           // 5485
  head: false,                                                                                                         // 5486
  header: false,                                                                                                       // 5487
  hr: true,                                                                                                            // 5488
  html: false,                                                                                                         // 5489
  i: false,                                                                                                            // 5490
  iframe: false,                                                                                                       // 5491
  img: true,                                                                                                           // 5492
  input: true,                                                                                                         // 5493
  ins: false,                                                                                                          // 5494
  kbd: false,                                                                                                          // 5495
  keygen: true,                                                                                                        // 5496
  label: false,                                                                                                        // 5497
  legend: false,                                                                                                       // 5498
  li: false,                                                                                                           // 5499
  link: false,                                                                                                         // 5500
  main: false,                                                                                                         // 5501
  map: false,                                                                                                          // 5502
  mark: false,                                                                                                         // 5503
  menu: false,                                                                                                         // 5504
  menuitem: false, // NOTE: Close tag should be omitted, but causes problems.                                          // 5505
  meta: true,                                                                                                          // 5506
  meter: false,                                                                                                        // 5507
  nav: false,                                                                                                          // 5508
  noscript: false,                                                                                                     // 5509
  object: false,                                                                                                       // 5510
  ol: false,                                                                                                           // 5511
  optgroup: false,                                                                                                     // 5512
  option: false,                                                                                                       // 5513
  output: false,                                                                                                       // 5514
  p: false,                                                                                                            // 5515
  param: true,                                                                                                         // 5516
  pre: false,                                                                                                          // 5517
  progress: false,                                                                                                     // 5518
  q: false,                                                                                                            // 5519
  rp: false,                                                                                                           // 5520
  rt: false,                                                                                                           // 5521
  ruby: false,                                                                                                         // 5522
  s: false,                                                                                                            // 5523
  samp: false,                                                                                                         // 5524
  script: false,                                                                                                       // 5525
  section: false,                                                                                                      // 5526
  select: false,                                                                                                       // 5527
  small: false,                                                                                                        // 5528
  source: false,                                                                                                       // 5529
  span: false,                                                                                                         // 5530
  strong: false,                                                                                                       // 5531
  style: false,                                                                                                        // 5532
  sub: false,                                                                                                          // 5533
  summary: false,                                                                                                      // 5534
  sup: false,                                                                                                          // 5535
  table: false,                                                                                                        // 5536
  tbody: false,                                                                                                        // 5537
  td: false,                                                                                                           // 5538
  textarea: false, // NOTE: Injected, see `ReactDOMTextarea`.                                                          // 5539
  tfoot: false,                                                                                                        // 5540
  th: false,                                                                                                           // 5541
  thead: false,                                                                                                        // 5542
  time: false,                                                                                                         // 5543
  title: false,                                                                                                        // 5544
  tr: false,                                                                                                           // 5545
  track: true,                                                                                                         // 5546
  u: false,                                                                                                            // 5547
  ul: false,                                                                                                           // 5548
  'var': false,                                                                                                        // 5549
  video: false,                                                                                                        // 5550
  wbr: false,                                                                                                          // 5551
                                                                                                                       // 5552
  // SVG                                                                                                               // 5553
  circle: false,                                                                                                       // 5554
  g: false,                                                                                                            // 5555
  line: false,                                                                                                         // 5556
  path: false,                                                                                                         // 5557
  polyline: false,                                                                                                     // 5558
  rect: false,                                                                                                         // 5559
  svg: false,                                                                                                          // 5560
  text: false                                                                                                          // 5561
}, createDOMComponentClass);                                                                                           // 5562
                                                                                                                       // 5563
var injection = {                                                                                                      // 5564
  injectComponentClasses: function(componentClasses) {                                                                 // 5565
    mergeInto(ReactDOM, componentClasses);                                                                             // 5566
  }                                                                                                                    // 5567
};                                                                                                                     // 5568
                                                                                                                       // 5569
ReactDOM.injection = injection;                                                                                        // 5570
                                                                                                                       // 5571
module.exports = ReactDOM;                                                                                             // 5572
                                                                                                                       // 5573
},{"./ReactDOMComponent":35,"./mergeInto":120,"./objMapKeyVal":124}],34:[function(require,module,exports){             // 5574
/**                                                                                                                    // 5575
 * Copyright 2013 Facebook, Inc.                                                                                       // 5576
 *                                                                                                                     // 5577
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 5578
 * you may not use this file except in compliance with the License.                                                    // 5579
 * You may obtain a copy of the License at                                                                             // 5580
 *                                                                                                                     // 5581
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 5582
 *                                                                                                                     // 5583
 * Unless required by applicable law or agreed to in writing, software                                                 // 5584
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 5585
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 5586
 * See the License for the specific language governing permissions and                                                 // 5587
 * limitations under the License.                                                                                      // 5588
 *                                                                                                                     // 5589
 * @providesModule ReactDOMButton                                                                                      // 5590
 */                                                                                                                    // 5591
                                                                                                                       // 5592
"use strict";                                                                                                          // 5593
                                                                                                                       // 5594
var ReactCompositeComponent = require("./ReactCompositeComponent");                                                    // 5595
var ReactDOM = require("./ReactDOM");                                                                                  // 5596
                                                                                                                       // 5597
var keyMirror = require("./keyMirror");                                                                                // 5598
                                                                                                                       // 5599
// Store a reference to the <button> `ReactDOMComponent`.                                                              // 5600
var button = ReactDOM.button;                                                                                          // 5601
                                                                                                                       // 5602
var mouseListenerNames = keyMirror({                                                                                   // 5603
  onClick: true,                                                                                                       // 5604
  onDoubleClick: true,                                                                                                 // 5605
  onMouseDown: true,                                                                                                   // 5606
  onMouseMove: true,                                                                                                   // 5607
  onMouseUp: true,                                                                                                     // 5608
  onClickCapture: true,                                                                                                // 5609
  onDoubleClickCapture: true,                                                                                          // 5610
  onMouseDownCapture: true,                                                                                            // 5611
  onMouseMoveCapture: true,                                                                                            // 5612
  onMouseUpCapture: true                                                                                               // 5613
});                                                                                                                    // 5614
                                                                                                                       // 5615
/**                                                                                                                    // 5616
 * Implements a <button> native component that does not receive mouse events                                           // 5617
 * when `disabled` is set.                                                                                             // 5618
 */                                                                                                                    // 5619
var ReactDOMButton = ReactCompositeComponent.createClass({                                                             // 5620
                                                                                                                       // 5621
  render: function() {                                                                                                 // 5622
    var props = {};                                                                                                    // 5623
                                                                                                                       // 5624
    // Copy the props; except the mouse listeners if we're disabled                                                    // 5625
    for (var key in this.props) {                                                                                      // 5626
      if (this.props.hasOwnProperty(key) &&                                                                            // 5627
          (!this.props.disabled || !mouseListenerNames[key])) {                                                        // 5628
        props[key] = this.props[key];                                                                                  // 5629
      }                                                                                                                // 5630
    }                                                                                                                  // 5631
                                                                                                                       // 5632
    return button(props, this.props.children);                                                                         // 5633
  }                                                                                                                    // 5634
                                                                                                                       // 5635
});                                                                                                                    // 5636
                                                                                                                       // 5637
module.exports = ReactDOMButton;                                                                                       // 5638
                                                                                                                       // 5639
},{"./ReactCompositeComponent":31,"./ReactDOM":33,"./keyMirror":115}],35:[function(require,module,exports){            // 5640
/**                                                                                                                    // 5641
 * Copyright 2013 Facebook, Inc.                                                                                       // 5642
 *                                                                                                                     // 5643
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 5644
 * you may not use this file except in compliance with the License.                                                    // 5645
 * You may obtain a copy of the License at                                                                             // 5646
 *                                                                                                                     // 5647
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 5648
 *                                                                                                                     // 5649
 * Unless required by applicable law or agreed to in writing, software                                                 // 5650
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 5651
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 5652
 * See the License for the specific language governing permissions and                                                 // 5653
 * limitations under the License.                                                                                      // 5654
 *                                                                                                                     // 5655
 * @providesModule ReactDOMComponent                                                                                   // 5656
 * @typechecks static-only                                                                                             // 5657
 */                                                                                                                    // 5658
                                                                                                                       // 5659
"use strict";                                                                                                          // 5660
                                                                                                                       // 5661
var CSSPropertyOperations = require("./CSSPropertyOperations");                                                        // 5662
var DOMProperty = require("./DOMProperty");                                                                            // 5663
var DOMPropertyOperations = require("./DOMPropertyOperations");                                                        // 5664
var ReactComponent = require("./ReactComponent");                                                                      // 5665
var ReactEventEmitter = require("./ReactEventEmitter");                                                                // 5666
var ReactMultiChild = require("./ReactMultiChild");                                                                    // 5667
var ReactMount = require("./ReactMount");                                                                              // 5668
var ReactPerf = require("./ReactPerf");                                                                                // 5669
                                                                                                                       // 5670
var escapeTextForBrowser = require("./escapeTextForBrowser");                                                          // 5671
var invariant = require("./invariant");                                                                                // 5672
var keyOf = require("./keyOf");                                                                                        // 5673
var merge = require("./merge");                                                                                        // 5674
var mixInto = require("./mixInto");                                                                                    // 5675
                                                                                                                       // 5676
var putListener = ReactEventEmitter.putListener;                                                                       // 5677
var deleteListener = ReactEventEmitter.deleteListener;                                                                 // 5678
var registrationNames = ReactEventEmitter.registrationNames;                                                           // 5679
                                                                                                                       // 5680
// For quickly matching children type, to test if can be treated as content.                                           // 5681
var CONTENT_TYPES = {'string': true, 'number': true};                                                                  // 5682
                                                                                                                       // 5683
var STYLE = keyOf({style: null});                                                                                      // 5684
                                                                                                                       // 5685
/**                                                                                                                    // 5686
 * @param {?object} props                                                                                              // 5687
 */                                                                                                                    // 5688
function assertValidProps(props) {                                                                                     // 5689
  if (!props) {                                                                                                        // 5690
    return;                                                                                                            // 5691
  }                                                                                                                    // 5692
  // Note the use of `==` which checks for null or undefined.                                                          // 5693
  ("production" !== "development" ? invariant(                                                                         // 5694
    props.children == null || props.dangerouslySetInnerHTML == null,                                                   // 5695
    'Can only set one of `children` or `props.dangerouslySetInnerHTML`.'                                               // 5696
  ) : invariant(props.children == null || props.dangerouslySetInnerHTML == null));                                     // 5697
  ("production" !== "development" ? invariant(                                                                         // 5698
    props.style == null || typeof props.style === 'object',                                                            // 5699
    'The `style` prop expects a mapping from style properties to values, ' +                                           // 5700
    'not a string.'                                                                                                    // 5701
  ) : invariant(props.style == null || typeof props.style === 'object'));                                              // 5702
}                                                                                                                      // 5703
                                                                                                                       // 5704
/**                                                                                                                    // 5705
 * @constructor ReactDOMComponent                                                                                      // 5706
 * @extends ReactComponent                                                                                             // 5707
 * @extends ReactMultiChild                                                                                            // 5708
 */                                                                                                                    // 5709
function ReactDOMComponent(tag, omitClose) {                                                                           // 5710
  this._tagOpen = '<' + tag;                                                                                           // 5711
  this._tagClose = omitClose ? '' : '</' + tag + '>';                                                                  // 5712
  this.tagName = tag.toUpperCase();                                                                                    // 5713
}                                                                                                                      // 5714
                                                                                                                       // 5715
ReactDOMComponent.Mixin = {                                                                                            // 5716
                                                                                                                       // 5717
  /**                                                                                                                  // 5718
   * Generates root tag markup then recurses. This method has side effects and                                         // 5719
   * is not idempotent.                                                                                                // 5720
   *                                                                                                                   // 5721
   * @internal                                                                                                         // 5722
   * @param {string} rootID The root DOM ID for this node.                                                             // 5723
   * @param {ReactReconcileTransaction} transaction                                                                    // 5724
   * @param {number} mountDepth number of components in the owner hierarchy                                            // 5725
   * @return {string} The computed markup.                                                                             // 5726
   */                                                                                                                  // 5727
  mountComponent: ReactPerf.measure(                                                                                   // 5728
    'ReactDOMComponent',                                                                                               // 5729
    'mountComponent',                                                                                                  // 5730
    function(rootID, transaction, mountDepth) {                                                                        // 5731
      ReactComponent.Mixin.mountComponent.call(                                                                        // 5732
        this,                                                                                                          // 5733
        rootID,                                                                                                        // 5734
        transaction,                                                                                                   // 5735
        mountDepth                                                                                                     // 5736
      );                                                                                                               // 5737
      assertValidProps(this.props);                                                                                    // 5738
      return (                                                                                                         // 5739
        this._createOpenTagMarkup() +                                                                                  // 5740
        this._createContentMarkup(transaction) +                                                                       // 5741
        this._tagClose                                                                                                 // 5742
      );                                                                                                               // 5743
    }                                                                                                                  // 5744
  ),                                                                                                                   // 5745
                                                                                                                       // 5746
  /**                                                                                                                  // 5747
   * Creates markup for the open tag and all attributes.                                                               // 5748
   *                                                                                                                   // 5749
   * This method has side effects because events get registered.                                                       // 5750
   *                                                                                                                   // 5751
   * Iterating over object properties is faster than iterating over arrays.                                            // 5752
   * @see http://jsperf.com/obj-vs-arr-iteration                                                                       // 5753
   *                                                                                                                   // 5754
   * @private                                                                                                          // 5755
   * @return {string} Markup of opening tag.                                                                           // 5756
   */                                                                                                                  // 5757
  _createOpenTagMarkup: function() {                                                                                   // 5758
    var props = this.props;                                                                                            // 5759
    var ret = this._tagOpen;                                                                                           // 5760
                                                                                                                       // 5761
    for (var propKey in props) {                                                                                       // 5762
      if (!props.hasOwnProperty(propKey)) {                                                                            // 5763
        continue;                                                                                                      // 5764
      }                                                                                                                // 5765
      var propValue = props[propKey];                                                                                  // 5766
      if (propValue == null) {                                                                                         // 5767
        continue;                                                                                                      // 5768
      }                                                                                                                // 5769
      if (registrationNames[propKey]) {                                                                                // 5770
        putListener(this._rootNodeID, propKey, propValue);                                                             // 5771
      } else {                                                                                                         // 5772
        if (propKey === STYLE) {                                                                                       // 5773
          if (propValue) {                                                                                             // 5774
            propValue = props.style = merge(props.style);                                                              // 5775
          }                                                                                                            // 5776
          propValue = CSSPropertyOperations.createMarkupForStyles(propValue);                                          // 5777
        }                                                                                                              // 5778
        var markup =                                                                                                   // 5779
          DOMPropertyOperations.createMarkupForProperty(propKey, propValue);                                           // 5780
        if (markup) {                                                                                                  // 5781
          ret += ' ' + markup;                                                                                         // 5782
        }                                                                                                              // 5783
      }                                                                                                                // 5784
    }                                                                                                                  // 5785
                                                                                                                       // 5786
    var escapedID = escapeTextForBrowser(this._rootNodeID);                                                            // 5787
    return ret + ' ' + ReactMount.ATTR_NAME + '="' + escapedID + '">';                                                 // 5788
  },                                                                                                                   // 5789
                                                                                                                       // 5790
  /**                                                                                                                  // 5791
   * Creates markup for the content between the tags.                                                                  // 5792
   *                                                                                                                   // 5793
   * @private                                                                                                          // 5794
   * @param {ReactReconcileTransaction} transaction                                                                    // 5795
   * @return {string} Content markup.                                                                                  // 5796
   */                                                                                                                  // 5797
  _createContentMarkup: function(transaction) {                                                                        // 5798
    // Intentional use of != to avoid catching zero/false.                                                             // 5799
    var innerHTML = this.props.dangerouslySetInnerHTML;                                                                // 5800
    if (innerHTML != null) {                                                                                           // 5801
      if (innerHTML.__html != null) {                                                                                  // 5802
        return innerHTML.__html;                                                                                       // 5803
      }                                                                                                                // 5804
    } else {                                                                                                           // 5805
      var contentToUse =                                                                                               // 5806
        CONTENT_TYPES[typeof this.props.children] ? this.props.children : null;                                        // 5807
      var childrenToUse = contentToUse != null ? null : this.props.children;                                           // 5808
      if (contentToUse != null) {                                                                                      // 5809
        return escapeTextForBrowser(contentToUse);                                                                     // 5810
      } else if (childrenToUse != null) {                                                                              // 5811
        var mountImages = this.mountChildren(                                                                          // 5812
          childrenToUse,                                                                                               // 5813
          transaction                                                                                                  // 5814
        );                                                                                                             // 5815
        return mountImages.join('');                                                                                   // 5816
      }                                                                                                                // 5817
    }                                                                                                                  // 5818
    return '';                                                                                                         // 5819
  },                                                                                                                   // 5820
                                                                                                                       // 5821
  receiveComponent: function(nextComponent, transaction) {                                                             // 5822
    assertValidProps(nextComponent.props);                                                                             // 5823
    ReactComponent.Mixin.receiveComponent.call(                                                                        // 5824
      this,                                                                                                            // 5825
      nextComponent,                                                                                                   // 5826
      transaction                                                                                                      // 5827
    );                                                                                                                 // 5828
  },                                                                                                                   // 5829
                                                                                                                       // 5830
  /**                                                                                                                  // 5831
   * Updates a native DOM component after it has already been allocated and                                            // 5832
   * attached to the DOM. Reconciles the root DOM node, then recurses.                                                 // 5833
   *                                                                                                                   // 5834
   * @param {ReactReconcileTransaction} transaction                                                                    // 5835
   * @param {object} prevProps                                                                                         // 5836
   * @internal                                                                                                         // 5837
   * @overridable                                                                                                      // 5838
   */                                                                                                                  // 5839
  updateComponent: ReactPerf.measure(                                                                                  // 5840
    'ReactDOMComponent',                                                                                               // 5841
    'updateComponent',                                                                                                 // 5842
    function(transaction, prevProps) {                                                                                 // 5843
      ReactComponent.Mixin.updateComponent.call(this, transaction, prevProps);                                         // 5844
      this._updateDOMProperties(prevProps);                                                                            // 5845
      this._updateDOMChildren(prevProps, transaction);                                                                 // 5846
    }                                                                                                                  // 5847
  ),                                                                                                                   // 5848
                                                                                                                       // 5849
  /**                                                                                                                  // 5850
   * Reconciles the properties by detecting differences in property values and                                         // 5851
   * updating the DOM as necessary. This function is probably the single most                                          // 5852
   * critical path for performance optimization.                                                                       // 5853
   *                                                                                                                   // 5854
   * TODO: Benchmark whether checking for changed values in memory actually                                            // 5855
   *       improves performance (especially statically positioned elements).                                           // 5856
   * TODO: Benchmark the effects of putting this at the top since 99% of props                                         // 5857
   *       do not change for a given reconciliation.                                                                   // 5858
   * TODO: Benchmark areas that can be improved with caching.                                                          // 5859
   *                                                                                                                   // 5860
   * @private                                                                                                          // 5861
   * @param {object} lastProps                                                                                         // 5862
   */                                                                                                                  // 5863
  _updateDOMProperties: function(lastProps) {                                                                          // 5864
    var nextProps = this.props;                                                                                        // 5865
    var propKey;                                                                                                       // 5866
    var styleName;                                                                                                     // 5867
    var styleUpdates;                                                                                                  // 5868
    for (propKey in lastProps) {                                                                                       // 5869
      if (nextProps.hasOwnProperty(propKey) ||                                                                         // 5870
         !lastProps.hasOwnProperty(propKey)) {                                                                         // 5871
        continue;                                                                                                      // 5872
      }                                                                                                                // 5873
      if (propKey === STYLE) {                                                                                         // 5874
        var lastStyle = lastProps[propKey];                                                                            // 5875
        for (styleName in lastStyle) {                                                                                 // 5876
          if (lastStyle.hasOwnProperty(styleName)) {                                                                   // 5877
            styleUpdates = styleUpdates || {};                                                                         // 5878
            styleUpdates[styleName] = '';                                                                              // 5879
          }                                                                                                            // 5880
        }                                                                                                              // 5881
      } else if (registrationNames[propKey]) {                                                                         // 5882
        deleteListener(this._rootNodeID, propKey);                                                                     // 5883
      } else if (                                                                                                      // 5884
          DOMProperty.isStandardName[propKey] ||                                                                       // 5885
          DOMProperty.isCustomAttribute(propKey)) {                                                                    // 5886
        ReactComponent.DOMIDOperations.deletePropertyByID(                                                             // 5887
          this._rootNodeID,                                                                                            // 5888
          propKey                                                                                                      // 5889
        );                                                                                                             // 5890
      }                                                                                                                // 5891
    }                                                                                                                  // 5892
    for (propKey in nextProps) {                                                                                       // 5893
      var nextProp = nextProps[propKey];                                                                               // 5894
      var lastProp = lastProps[propKey];                                                                               // 5895
      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp) {                                               // 5896
        continue;                                                                                                      // 5897
      }                                                                                                                // 5898
      if (propKey === STYLE) {                                                                                         // 5899
        if (nextProp) {                                                                                                // 5900
          nextProp = nextProps.style = merge(nextProp);                                                                // 5901
        }                                                                                                              // 5902
        if (lastProp) {                                                                                                // 5903
          // Unset styles on `lastProp` but not on `nextProp`.                                                         // 5904
          for (styleName in lastProp) {                                                                                // 5905
            if (lastProp.hasOwnProperty(styleName) &&                                                                  // 5906
                !nextProp.hasOwnProperty(styleName)) {                                                                 // 5907
              styleUpdates = styleUpdates || {};                                                                       // 5908
              styleUpdates[styleName] = '';                                                                            // 5909
            }                                                                                                          // 5910
          }                                                                                                            // 5911
          // Update styles that changed since `lastProp`.                                                              // 5912
          for (styleName in nextProp) {                                                                                // 5913
            if (nextProp.hasOwnProperty(styleName) &&                                                                  // 5914
                lastProp[styleName] !== nextProp[styleName]) {                                                         // 5915
              styleUpdates = styleUpdates || {};                                                                       // 5916
              styleUpdates[styleName] = nextProp[styleName];                                                           // 5917
            }                                                                                                          // 5918
          }                                                                                                            // 5919
        } else {                                                                                                       // 5920
          // Relies on `updateStylesByID` not mutating `styleUpdates`.                                                 // 5921
          styleUpdates = nextProp;                                                                                     // 5922
        }                                                                                                              // 5923
      } else if (registrationNames[propKey]) {                                                                         // 5924
        putListener(this._rootNodeID, propKey, nextProp);                                                              // 5925
      } else if (                                                                                                      // 5926
          DOMProperty.isStandardName[propKey] ||                                                                       // 5927
          DOMProperty.isCustomAttribute(propKey)) {                                                                    // 5928
        ReactComponent.DOMIDOperations.updatePropertyByID(                                                             // 5929
          this._rootNodeID,                                                                                            // 5930
          propKey,                                                                                                     // 5931
          nextProp                                                                                                     // 5932
        );                                                                                                             // 5933
      }                                                                                                                // 5934
    }                                                                                                                  // 5935
    if (styleUpdates) {                                                                                                // 5936
      ReactComponent.DOMIDOperations.updateStylesByID(                                                                 // 5937
        this._rootNodeID,                                                                                              // 5938
        styleUpdates                                                                                                   // 5939
      );                                                                                                               // 5940
    }                                                                                                                  // 5941
  },                                                                                                                   // 5942
                                                                                                                       // 5943
  /**                                                                                                                  // 5944
   * Reconciles the children with the various properties that affect the                                               // 5945
   * children content.                                                                                                 // 5946
   *                                                                                                                   // 5947
   * @param {object} lastProps                                                                                         // 5948
   * @param {ReactReconcileTransaction} transaction                                                                    // 5949
   */                                                                                                                  // 5950
  _updateDOMChildren: function(lastProps, transaction) {                                                               // 5951
    var nextProps = this.props;                                                                                        // 5952
                                                                                                                       // 5953
    var lastContent =                                                                                                  // 5954
      CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;                                            // 5955
    var nextContent =                                                                                                  // 5956
      CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;                                            // 5957
                                                                                                                       // 5958
    var lastHtml =                                                                                                     // 5959
      lastProps.dangerouslySetInnerHTML &&                                                                             // 5960
      lastProps.dangerouslySetInnerHTML.__html;                                                                        // 5961
    var nextHtml =                                                                                                     // 5962
      nextProps.dangerouslySetInnerHTML &&                                                                             // 5963
      nextProps.dangerouslySetInnerHTML.__html;                                                                        // 5964
                                                                                                                       // 5965
    // Note the use of `!=` which checks for null or undefined.                                                        // 5966
    var lastChildren = lastContent != null ? null : lastProps.children;                                                // 5967
    var nextChildren = nextContent != null ? null : nextProps.children;                                                // 5968
                                                                                                                       // 5969
    // If we're switching from children to content/html or vice versa, remove                                          // 5970
    // the old content                                                                                                 // 5971
    var lastHasContentOrHtml = lastContent != null || lastHtml != null;                                                // 5972
    var nextHasContentOrHtml = nextContent != null || nextHtml != null;                                                // 5973
    if (lastChildren != null && nextChildren == null) {                                                                // 5974
      this.updateChildren(null, transaction);                                                                          // 5975
    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {                                                        // 5976
      this.updateTextContent('');                                                                                      // 5977
    }                                                                                                                  // 5978
                                                                                                                       // 5979
    if (nextContent != null) {                                                                                         // 5980
      if (lastContent !== nextContent) {                                                                               // 5981
        this.updateTextContent('' + nextContent);                                                                      // 5982
      }                                                                                                                // 5983
    } else if (nextHtml != null) {                                                                                     // 5984
      if (lastHtml !== nextHtml) {                                                                                     // 5985
        ReactComponent.DOMIDOperations.updateInnerHTMLByID(                                                            // 5986
          this._rootNodeID,                                                                                            // 5987
          nextHtml                                                                                                     // 5988
        );                                                                                                             // 5989
      }                                                                                                                // 5990
    } else if (nextChildren != null) {                                                                                 // 5991
      this.updateChildren(nextChildren, transaction);                                                                  // 5992
    }                                                                                                                  // 5993
  },                                                                                                                   // 5994
                                                                                                                       // 5995
  /**                                                                                                                  // 5996
   * Destroys all event registrations for this instance. Does not remove from                                          // 5997
   * the DOM. That must be done by the parent.                                                                         // 5998
   *                                                                                                                   // 5999
   * @internal                                                                                                         // 6000
   */                                                                                                                  // 6001
  unmountComponent: function() {                                                                                       // 6002
    ReactEventEmitter.deleteAllListeners(this._rootNodeID);                                                            // 6003
    ReactComponent.Mixin.unmountComponent.call(this);                                                                  // 6004
    this.unmountChildren();                                                                                            // 6005
  }                                                                                                                    // 6006
                                                                                                                       // 6007
};                                                                                                                     // 6008
                                                                                                                       // 6009
mixInto(ReactDOMComponent, ReactComponent.Mixin);                                                                      // 6010
mixInto(ReactDOMComponent, ReactDOMComponent.Mixin);                                                                   // 6011
mixInto(ReactDOMComponent, ReactMultiChild.Mixin);                                                                     // 6012
                                                                                                                       // 6013
module.exports = ReactDOMComponent;                                                                                    // 6014
                                                                                                                       // 6015
},{"./CSSPropertyOperations":4,"./DOMProperty":9,"./DOMPropertyOperations":10,"./ReactComponent":28,"./ReactEventEmitter":47,"./ReactMount":54,"./ReactMultiChild":56,"./ReactPerf":59,"./escapeTextForBrowser":95,"./invariant":109,"./keyOf":116,"./merge":118,"./mixInto":121}],36:[function(require,module,exports){
/**                                                                                                                    // 6017
 * Copyright 2013 Facebook, Inc.                                                                                       // 6018
 *                                                                                                                     // 6019
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 6020
 * you may not use this file except in compliance with the License.                                                    // 6021
 * You may obtain a copy of the License at                                                                             // 6022
 *                                                                                                                     // 6023
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 6024
 *                                                                                                                     // 6025
 * Unless required by applicable law or agreed to in writing, software                                                 // 6026
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 6027
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 6028
 * See the License for the specific language governing permissions and                                                 // 6029
 * limitations under the License.                                                                                      // 6030
 *                                                                                                                     // 6031
 * @providesModule ReactDOMForm                                                                                        // 6032
 */                                                                                                                    // 6033
                                                                                                                       // 6034
"use strict";                                                                                                          // 6035
                                                                                                                       // 6036
var ReactCompositeComponent = require("./ReactCompositeComponent");                                                    // 6037
var ReactDOM = require("./ReactDOM");                                                                                  // 6038
var ReactEventEmitter = require("./ReactEventEmitter");                                                                // 6039
var EventConstants = require("./EventConstants");                                                                      // 6040
                                                                                                                       // 6041
// Store a reference to the <form> `ReactDOMComponent`.                                                                // 6042
var form = ReactDOM.form;                                                                                              // 6043
                                                                                                                       // 6044
/**                                                                                                                    // 6045
 * Since onSubmit doesn't bubble OR capture on the top level in IE8, we need                                           // 6046
 * to capture it on the <form> element itself. There are lots of hacks we could                                        // 6047
 * do to accomplish this, but the most reliable is to make <form> a                                                    // 6048
 * composite component and use `componentDidMount` to attach the event handlers.                                       // 6049
 */                                                                                                                    // 6050
var ReactDOMForm = ReactCompositeComponent.createClass({                                                               // 6051
  render: function() {                                                                                                 // 6052
    // TODO: Instead of using `ReactDOM` directly, we should use JSX. However,                                         // 6053
    // `jshint` fails to parse JSX so in order for linting to work in the open                                         // 6054
    // source repo, we need to just use `ReactDOM.form`.                                                               // 6055
    return this.transferPropsTo(form(null, this.props.children));                                                      // 6056
  },                                                                                                                   // 6057
                                                                                                                       // 6058
  componentDidMount: function(node) {                                                                                  // 6059
    ReactEventEmitter.trapBubbledEvent(                                                                                // 6060
      EventConstants.topLevelTypes.topSubmit,                                                                          // 6061
      'submit',                                                                                                        // 6062
      node                                                                                                             // 6063
    );                                                                                                                 // 6064
  }                                                                                                                    // 6065
});                                                                                                                    // 6066
                                                                                                                       // 6067
module.exports = ReactDOMForm;                                                                                         // 6068
                                                                                                                       // 6069
},{"./EventConstants":15,"./ReactCompositeComponent":31,"./ReactDOM":33,"./ReactEventEmitter":47}],37:[function(require,module,exports){
/**                                                                                                                    // 6071
 * Copyright 2013 Facebook, Inc.                                                                                       // 6072
 *                                                                                                                     // 6073
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 6074
 * you may not use this file except in compliance with the License.                                                    // 6075
 * You may obtain a copy of the License at                                                                             // 6076
 *                                                                                                                     // 6077
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 6078
 *                                                                                                                     // 6079
 * Unless required by applicable law or agreed to in writing, software                                                 // 6080
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 6081
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 6082
 * See the License for the specific language governing permissions and                                                 // 6083
 * limitations under the License.                                                                                      // 6084
 *                                                                                                                     // 6085
 * @providesModule ReactDOMIDOperations                                                                                // 6086
 * @typechecks static-only                                                                                             // 6087
 */                                                                                                                    // 6088
                                                                                                                       // 6089
/*jslint evil: true */                                                                                                 // 6090
                                                                                                                       // 6091
"use strict";                                                                                                          // 6092
                                                                                                                       // 6093
var CSSPropertyOperations = require("./CSSPropertyOperations");                                                        // 6094
var DOMChildrenOperations = require("./DOMChildrenOperations");                                                        // 6095
var DOMPropertyOperations = require("./DOMPropertyOperations");                                                        // 6096
var ReactMount = require("./ReactMount");                                                                              // 6097
                                                                                                                       // 6098
var getTextContentAccessor = require("./getTextContentAccessor");                                                      // 6099
var invariant = require("./invariant");                                                                                // 6100
                                                                                                                       // 6101
/**                                                                                                                    // 6102
 * Errors for properties that should not be updated with `updatePropertyById()`.                                       // 6103
 *                                                                                                                     // 6104
 * @type {object}                                                                                                      // 6105
 * @private                                                                                                            // 6106
 */                                                                                                                    // 6107
var INVALID_PROPERTY_ERRORS = {                                                                                        // 6108
  dangerouslySetInnerHTML:                                                                                             // 6109
    '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',                                            // 6110
  style: '`style` must be set using `updateStylesByID()`.'                                                             // 6111
};                                                                                                                     // 6112
                                                                                                                       // 6113
/**                                                                                                                    // 6114
 * The DOM property to use when setting text content.                                                                  // 6115
 *                                                                                                                     // 6116
 * @type {string}                                                                                                      // 6117
 * @private                                                                                                            // 6118
 */                                                                                                                    // 6119
var textContentAccessor = getTextContentAccessor() || 'NA';                                                            // 6120
                                                                                                                       // 6121
var LEADING_SPACE = /^ /;                                                                                              // 6122
                                                                                                                       // 6123
/**                                                                                                                    // 6124
 * Operations used to process updates to DOM nodes. This is made injectable via                                        // 6125
 * `ReactComponent.DOMIDOperations`.                                                                                   // 6126
 */                                                                                                                    // 6127
var ReactDOMIDOperations = {                                                                                           // 6128
                                                                                                                       // 6129
  /**                                                                                                                  // 6130
   * Updates a DOM node with new property values. This should only be used to                                          // 6131
   * update DOM properties in `DOMProperty`.                                                                           // 6132
   *                                                                                                                   // 6133
   * @param {string} id ID of the node to update.                                                                      // 6134
   * @param {string} name A valid property name, see `DOMProperty`.                                                    // 6135
   * @param {*} value New value of the property.                                                                       // 6136
   * @internal                                                                                                         // 6137
   */                                                                                                                  // 6138
  updatePropertyByID: function(id, name, value) {                                                                      // 6139
    var node = ReactMount.getNode(id);                                                                                 // 6140
    ("production" !== "development" ? invariant(                                                                       // 6141
      !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),                                                                   // 6142
      'updatePropertyByID(...): %s',                                                                                   // 6143
      INVALID_PROPERTY_ERRORS[name]                                                                                    // 6144
    ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));                                                     // 6145
                                                                                                                       // 6146
    // If we're updating to null or undefined, we should remove the property                                           // 6147
    // from the DOM node instead of inadvertantly setting to a string. This                                            // 6148
    // brings us in line with the same behavior we have on initial render.                                             // 6149
    if (value != null) {                                                                                               // 6150
      DOMPropertyOperations.setValueForProperty(node, name, value);                                                    // 6151
    } else {                                                                                                           // 6152
      DOMPropertyOperations.deleteValueForProperty(node, name);                                                        // 6153
    }                                                                                                                  // 6154
  },                                                                                                                   // 6155
                                                                                                                       // 6156
  /**                                                                                                                  // 6157
   * Updates a DOM node to remove a property. This should only be used to remove                                       // 6158
   * DOM properties in `DOMProperty`.                                                                                  // 6159
   *                                                                                                                   // 6160
   * @param {string} id ID of the node to update.                                                                      // 6161
   * @param {string} name A property name to remove, see `DOMProperty`.                                                // 6162
   * @internal                                                                                                         // 6163
   */                                                                                                                  // 6164
  deletePropertyByID: function(id, name, value) {                                                                      // 6165
    var node = ReactMount.getNode(id);                                                                                 // 6166
    ("production" !== "development" ? invariant(                                                                       // 6167
      !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),                                                                   // 6168
      'updatePropertyByID(...): %s',                                                                                   // 6169
      INVALID_PROPERTY_ERRORS[name]                                                                                    // 6170
    ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));                                                     // 6171
    DOMPropertyOperations.deleteValueForProperty(node, name, value);                                                   // 6172
  },                                                                                                                   // 6173
                                                                                                                       // 6174
  /**                                                                                                                  // 6175
   * Updates a DOM node with new style values. If a value is specified as '',                                          // 6176
   * the corresponding style property will be unset.                                                                   // 6177
   *                                                                                                                   // 6178
   * @param {string} id ID of the node to update.                                                                      // 6179
   * @param {object} styles Mapping from styles to values.                                                             // 6180
   * @internal                                                                                                         // 6181
   */                                                                                                                  // 6182
  updateStylesByID: function(id, styles) {                                                                             // 6183
    var node = ReactMount.getNode(id);                                                                                 // 6184
    CSSPropertyOperations.setValueForStyles(node, styles);                                                             // 6185
  },                                                                                                                   // 6186
                                                                                                                       // 6187
  /**                                                                                                                  // 6188
   * Updates a DOM node's innerHTML.                                                                                   // 6189
   *                                                                                                                   // 6190
   * @param {string} id ID of the node to update.                                                                      // 6191
   * @param {string} html An HTML string.                                                                              // 6192
   * @internal                                                                                                         // 6193
   */                                                                                                                  // 6194
  updateInnerHTMLByID: function(id, html) {                                                                            // 6195
    var node = ReactMount.getNode(id);                                                                                 // 6196
    // HACK: IE8- normalize whitespace in innerHTML, removing leading spaces.                                          // 6197
    // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html                                            // 6198
    node.innerHTML = html.replace(LEADING_SPACE, '&nbsp;');                                                            // 6199
  },                                                                                                                   // 6200
                                                                                                                       // 6201
  /**                                                                                                                  // 6202
   * Updates a DOM node's text content set by `props.content`.                                                         // 6203
   *                                                                                                                   // 6204
   * @param {string} id ID of the node to update.                                                                      // 6205
   * @param {string} content Text content.                                                                             // 6206
   * @internal                                                                                                         // 6207
   */                                                                                                                  // 6208
  updateTextContentByID: function(id, content) {                                                                       // 6209
    var node = ReactMount.getNode(id);                                                                                 // 6210
    node[textContentAccessor] = content;                                                                               // 6211
  },                                                                                                                   // 6212
                                                                                                                       // 6213
  /**                                                                                                                  // 6214
   * Replaces a DOM node that exists in the document with markup.                                                      // 6215
   *                                                                                                                   // 6216
   * @param {string} id ID of child to be replaced.                                                                    // 6217
   * @param {string} markup Dangerous markup to inject in place of child.                                              // 6218
   * @internal                                                                                                         // 6219
   * @see {Danger.dangerouslyReplaceNodeWithMarkup}                                                                    // 6220
   */                                                                                                                  // 6221
  dangerouslyReplaceNodeWithMarkupByID: function(id, markup) {                                                         // 6222
    var node = ReactMount.getNode(id);                                                                                 // 6223
    DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);                                              // 6224
  },                                                                                                                   // 6225
                                                                                                                       // 6226
  /**                                                                                                                  // 6227
   * Updates a component's children by processing a series of updates.                                                 // 6228
   *                                                                                                                   // 6229
   * @param {array<object>} updates List of update configurations.                                                     // 6230
   * @param {array<string>} markup List of markup strings.                                                             // 6231
   * @internal                                                                                                         // 6232
   */                                                                                                                  // 6233
  dangerouslyProcessChildrenUpdates: function(updates, markup) {                                                       // 6234
    for (var i = 0; i < updates.length; i++) {                                                                         // 6235
      updates[i].parentNode = ReactMount.getNode(updates[i].parentID);                                                 // 6236
    }                                                                                                                  // 6237
    DOMChildrenOperations.processUpdates(updates, markup);                                                             // 6238
  }                                                                                                                    // 6239
                                                                                                                       // 6240
};                                                                                                                     // 6241
                                                                                                                       // 6242
module.exports = ReactDOMIDOperations;                                                                                 // 6243
                                                                                                                       // 6244
},{"./CSSPropertyOperations":4,"./DOMChildrenOperations":8,"./DOMPropertyOperations":10,"./ReactMount":54,"./getTextContentAccessor":106,"./invariant":109}],38:[function(require,module,exports){
/**                                                                                                                    // 6246
 * Copyright 2013 Facebook, Inc.                                                                                       // 6247
 *                                                                                                                     // 6248
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 6249
 * you may not use this file except in compliance with the License.                                                    // 6250
 * You may obtain a copy of the License at                                                                             // 6251
 *                                                                                                                     // 6252
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 6253
 *                                                                                                                     // 6254
 * Unless required by applicable law or agreed to in writing, software                                                 // 6255
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 6256
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 6257
 * See the License for the specific language governing permissions and                                                 // 6258
 * limitations under the License.                                                                                      // 6259
 *                                                                                                                     // 6260
 * @providesModule ReactDOMInput                                                                                       // 6261
 */                                                                                                                    // 6262
                                                                                                                       // 6263
"use strict";                                                                                                          // 6264
                                                                                                                       // 6265
var DOMPropertyOperations = require("./DOMPropertyOperations");                                                        // 6266
var LinkedValueMixin = require("./LinkedValueMixin");                                                                  // 6267
var ReactCompositeComponent = require("./ReactCompositeComponent");                                                    // 6268
var ReactDOM = require("./ReactDOM");                                                                                  // 6269
var ReactMount = require("./ReactMount");                                                                              // 6270
                                                                                                                       // 6271
var invariant = require("./invariant");                                                                                // 6272
var merge = require("./merge");                                                                                        // 6273
                                                                                                                       // 6274
// Store a reference to the <input> `ReactDOMComponent`.                                                               // 6275
var input = ReactDOM.input;                                                                                            // 6276
                                                                                                                       // 6277
var instancesByReactID = {};                                                                                           // 6278
                                                                                                                       // 6279
/**                                                                                                                    // 6280
 * Implements an <input> native component that allows setting these optional                                           // 6281
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.                                                    // 6282
 *                                                                                                                     // 6283
 * If `checked` or `value` are not supplied (or null/undefined), user actions                                          // 6284
 * that affect the checked state or value will trigger updates to the element.                                         // 6285
 *                                                                                                                     // 6286
 * If they are supplied (and not null/undefined), the rendered element will not                                        // 6287
 * trigger updates to the element. Instead, the props must change in order for                                         // 6288
 * the rendered element to be updated.                                                                                 // 6289
 *                                                                                                                     // 6290
 * The rendered element will be initialized as unchecked (or `defaultChecked`)                                         // 6291
 * with an empty value (or `defaultValue`).                                                                            // 6292
 *                                                                                                                     // 6293
 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html                                             // 6294
 */                                                                                                                    // 6295
var ReactDOMInput = ReactCompositeComponent.createClass({                                                              // 6296
  mixins: [LinkedValueMixin],                                                                                          // 6297
                                                                                                                       // 6298
  getInitialState: function() {                                                                                        // 6299
    var defaultValue = this.props.defaultValue;                                                                        // 6300
    return {                                                                                                           // 6301
      checked: this.props.defaultChecked || false,                                                                     // 6302
      value: defaultValue != null ? defaultValue : null                                                                // 6303
    };                                                                                                                 // 6304
  },                                                                                                                   // 6305
                                                                                                                       // 6306
  shouldComponentUpdate: function() {                                                                                  // 6307
    // Defer any updates to this component during the `onChange` handler.                                              // 6308
    return !this._isChanging;                                                                                          // 6309
  },                                                                                                                   // 6310
                                                                                                                       // 6311
  render: function() {                                                                                                 // 6312
    // Clone `this.props` so we don't mutate the input.                                                                // 6313
    var props = merge(this.props);                                                                                     // 6314
                                                                                                                       // 6315
    props.defaultChecked = null;                                                                                       // 6316
    props.defaultValue = null;                                                                                         // 6317
    props.checked =                                                                                                    // 6318
      this.props.checked != null ? this.props.checked : this.state.checked;                                            // 6319
                                                                                                                       // 6320
    var value = this.getValue();                                                                                       // 6321
    props.value = value != null ? value : this.state.value;                                                            // 6322
                                                                                                                       // 6323
    props.onChange = this._handleChange;                                                                               // 6324
                                                                                                                       // 6325
    return input(props, this.props.children);                                                                          // 6326
  },                                                                                                                   // 6327
                                                                                                                       // 6328
  componentDidMount: function(rootNode) {                                                                              // 6329
    var id = ReactMount.getID(rootNode);                                                                               // 6330
    instancesByReactID[id] = this;                                                                                     // 6331
  },                                                                                                                   // 6332
                                                                                                                       // 6333
  componentWillUnmount: function() {                                                                                   // 6334
    var rootNode = this.getDOMNode();                                                                                  // 6335
    var id = ReactMount.getID(rootNode);                                                                               // 6336
    delete instancesByReactID[id];                                                                                     // 6337
  },                                                                                                                   // 6338
                                                                                                                       // 6339
  componentDidUpdate: function(prevProps, prevState, rootNode) {                                                       // 6340
    if (this.props.checked != null) {                                                                                  // 6341
      DOMPropertyOperations.setValueForProperty(                                                                       // 6342
        rootNode,                                                                                                      // 6343
        'checked',                                                                                                     // 6344
        this.props.checked || false                                                                                    // 6345
      );                                                                                                               // 6346
    }                                                                                                                  // 6347
                                                                                                                       // 6348
    var value = this.getValue();                                                                                       // 6349
    if (value != null) {                                                                                               // 6350
      // Cast `value` to a string to ensure the value is set correctly. While                                          // 6351
      // browsers typically do this as necessary, jsdom doesn't.                                                       // 6352
      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);                                        // 6353
    }                                                                                                                  // 6354
  },                                                                                                                   // 6355
                                                                                                                       // 6356
  _handleChange: function(event) {                                                                                     // 6357
    var returnValue;                                                                                                   // 6358
    var onChange = this.getOnChange();                                                                                 // 6359
    if (onChange) {                                                                                                    // 6360
      this._isChanging = true;                                                                                         // 6361
      returnValue = onChange(event);                                                                                   // 6362
      this._isChanging = false;                                                                                        // 6363
    }                                                                                                                  // 6364
    this.setState({                                                                                                    // 6365
      checked: event.target.checked,                                                                                   // 6366
      value: event.target.value                                                                                        // 6367
    });                                                                                                                // 6368
                                                                                                                       // 6369
    var name = this.props.name;                                                                                        // 6370
    if (this.props.type === 'radio' && name != null) {                                                                 // 6371
      var rootNode = this.getDOMNode();                                                                                // 6372
      // If `rootNode.form` was non-null, then we could try `form.elements`,                                           // 6373
      // but that sometimes behaves strangely in IE8. We could also try using                                          // 6374
      // `form.getElementsByName`, but that will only return direct children                                           // 6375
      // and won't include inputs that use the HTML5 `form=` attribute. Since                                          // 6376
      // the input might not even be in a form, let's just use the global                                              // 6377
      // `getElementsByName` to ensure we don't miss anything.                                                         // 6378
      var group = document.getElementsByName(name);                                                                    // 6379
      for (var i = 0, groupLen = group.length; i < groupLen; i++) {                                                    // 6380
        var otherNode = group[i];                                                                                      // 6381
        if (otherNode === rootNode ||                                                                                  // 6382
            otherNode.nodeName !== 'INPUT' || otherNode.type !== 'radio' ||                                            // 6383
            otherNode.form !== rootNode.form) {                                                                        // 6384
          continue;                                                                                                    // 6385
        }                                                                                                              // 6386
        var otherID = ReactMount.getID(otherNode);                                                                     // 6387
        ("production" !== "development" ? invariant(                                                                   // 6388
          otherID,                                                                                                     // 6389
          'ReactDOMInput: Mixing React and non-React radio inputs with the ' +                                         // 6390
          'same `name` is not supported.'                                                                              // 6391
        ) : invariant(otherID));                                                                                       // 6392
        var otherInstance = instancesByReactID[otherID];                                                               // 6393
        ("production" !== "development" ? invariant(                                                                   // 6394
          otherInstance,                                                                                               // 6395
          'ReactDOMInput: Unknown radio button ID %s.',                                                                // 6396
          otherID                                                                                                      // 6397
        ) : invariant(otherInstance));                                                                                 // 6398
        // In some cases, this will actually change the `checked` state value.                                         // 6399
        // In other cases, there's no change but this forces a reconcile upon                                          // 6400
        // which componentDidUpdate will reset the DOM property to whatever it                                         // 6401
        // should be.                                                                                                  // 6402
        otherInstance.setState({                                                                                       // 6403
          checked: false                                                                                               // 6404
        });                                                                                                            // 6405
      }                                                                                                                // 6406
    }                                                                                                                  // 6407
                                                                                                                       // 6408
    return returnValue;                                                                                                // 6409
  }                                                                                                                    // 6410
                                                                                                                       // 6411
});                                                                                                                    // 6412
                                                                                                                       // 6413
module.exports = ReactDOMInput;                                                                                        // 6414
                                                                                                                       // 6415
},{"./DOMPropertyOperations":10,"./LinkedValueMixin":23,"./ReactCompositeComponent":31,"./ReactDOM":33,"./ReactMount":54,"./invariant":109,"./merge":118}],39:[function(require,module,exports){
/**                                                                                                                    // 6417
 * Copyright 2013 Facebook, Inc.                                                                                       // 6418
 *                                                                                                                     // 6419
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 6420
 * you may not use this file except in compliance with the License.                                                    // 6421
 * You may obtain a copy of the License at                                                                             // 6422
 *                                                                                                                     // 6423
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 6424
 *                                                                                                                     // 6425
 * Unless required by applicable law or agreed to in writing, software                                                 // 6426
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 6427
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 6428
 * See the License for the specific language governing permissions and                                                 // 6429
 * limitations under the License.                                                                                      // 6430
 *                                                                                                                     // 6431
 * @providesModule ReactDOMOption                                                                                      // 6432
 */                                                                                                                    // 6433
                                                                                                                       // 6434
"use strict";                                                                                                          // 6435
                                                                                                                       // 6436
var ReactCompositeComponent = require("./ReactCompositeComponent");                                                    // 6437
var ReactDOM = require("./ReactDOM");                                                                                  // 6438
                                                                                                                       // 6439
// Store a reference to the <option> `ReactDOMComponent`.                                                              // 6440
var option = ReactDOM.option;                                                                                          // 6441
                                                                                                                       // 6442
/**                                                                                                                    // 6443
 * Implements an <option> native component that warns when `selected` is set.                                          // 6444
 */                                                                                                                    // 6445
var ReactDOMOption = ReactCompositeComponent.createClass({                                                             // 6446
                                                                                                                       // 6447
  componentWillMount: function() {                                                                                     // 6448
    // TODO (yungsters): Remove support for `selected` in <option>.                                                    // 6449
    if (this.props.selected != null) {                                                                                 // 6450
      if ("production" !== "development") {                                                                            // 6451
        console.warn(                                                                                                  // 6452
          'Use the `defaultValue` or `value` props on <select> instead of ' +                                          // 6453
          'setting `selected` on <option>.'                                                                            // 6454
        );                                                                                                             // 6455
      }                                                                                                                // 6456
    }                                                                                                                  // 6457
  },                                                                                                                   // 6458
                                                                                                                       // 6459
  render: function() {                                                                                                 // 6460
    return option(this.props, this.props.children);                                                                    // 6461
  }                                                                                                                    // 6462
                                                                                                                       // 6463
});                                                                                                                    // 6464
                                                                                                                       // 6465
module.exports = ReactDOMOption;                                                                                       // 6466
                                                                                                                       // 6467
},{"./ReactCompositeComponent":31,"./ReactDOM":33}],40:[function(require,module,exports){                              // 6468
/**                                                                                                                    // 6469
 * Copyright 2013 Facebook, Inc.                                                                                       // 6470
 *                                                                                                                     // 6471
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 6472
 * you may not use this file except in compliance with the License.                                                    // 6473
 * You may obtain a copy of the License at                                                                             // 6474
 *                                                                                                                     // 6475
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 6476
 *                                                                                                                     // 6477
 * Unless required by applicable law or agreed to in writing, software                                                 // 6478
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 6479
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 6480
 * See the License for the specific language governing permissions and                                                 // 6481
 * limitations under the License.                                                                                      // 6482
 *                                                                                                                     // 6483
 * @providesModule ReactDOMSelect                                                                                      // 6484
 */                                                                                                                    // 6485
                                                                                                                       // 6486
"use strict";                                                                                                          // 6487
                                                                                                                       // 6488
var LinkedValueMixin = require("./LinkedValueMixin");                                                                  // 6489
var ReactCompositeComponent = require("./ReactCompositeComponent");                                                    // 6490
var ReactDOM = require("./ReactDOM");                                                                                  // 6491
                                                                                                                       // 6492
var invariant = require("./invariant");                                                                                // 6493
var merge = require("./merge");                                                                                        // 6494
                                                                                                                       // 6495
// Store a reference to the <select> `ReactDOMComponent`.                                                              // 6496
var select = ReactDOM.select;                                                                                          // 6497
                                                                                                                       // 6498
/**                                                                                                                    // 6499
 * Validation function for `value` and `defaultValue`.                                                                 // 6500
 * @private                                                                                                            // 6501
 */                                                                                                                    // 6502
function selectValueType(props, propName, componentName) {                                                             // 6503
  if (props[propName] == null) {                                                                                       // 6504
    return;                                                                                                            // 6505
  }                                                                                                                    // 6506
  if (props.multiple) {                                                                                                // 6507
    ("production" !== "development" ? invariant(                                                                       // 6508
      Array.isArray(props[propName]),                                                                                  // 6509
      'The `%s` prop supplied to <select> must be an array if `multiple` is ' +                                        // 6510
      'true.',                                                                                                         // 6511
      propName                                                                                                         // 6512
    ) : invariant(Array.isArray(props[propName])));                                                                    // 6513
  } else {                                                                                                             // 6514
    ("production" !== "development" ? invariant(                                                                       // 6515
      !Array.isArray(props[propName]),                                                                                 // 6516
      'The `%s` prop supplied to <select> must be a scalar value if ' +                                                // 6517
      '`multiple` is false.',                                                                                          // 6518
      propName                                                                                                         // 6519
    ) : invariant(!Array.isArray(props[propName])));                                                                   // 6520
  }                                                                                                                    // 6521
}                                                                                                                      // 6522
                                                                                                                       // 6523
/**                                                                                                                    // 6524
 * If `value` is supplied, updates <option> elements on mount and update.                                              // 6525
 * @private                                                                                                            // 6526
 */                                                                                                                    // 6527
function updateOptions() {                                                                                             // 6528
  /*jshint validthis:true */                                                                                           // 6529
  var propValue = this.getValue();                                                                                     // 6530
  var value = propValue != null ? propValue : this.state.value;                                                        // 6531
  var options = this.getDOMNode().options;                                                                             // 6532
  var selectedValue = '' + value;                                                                                      // 6533
                                                                                                                       // 6534
  for (var i = 0, l = options.length; i < l; i++) {                                                                    // 6535
    var selected = this.props.multiple ?                                                                               // 6536
      selectedValue.indexOf(options[i].value) >= 0 :                                                                   // 6537
      selected = options[i].value === selectedValue;                                                                   // 6538
                                                                                                                       // 6539
    if (selected !== options[i].selected) {                                                                            // 6540
      options[i].selected = selected;                                                                                  // 6541
    }                                                                                                                  // 6542
  }                                                                                                                    // 6543
}                                                                                                                      // 6544
                                                                                                                       // 6545
/**                                                                                                                    // 6546
 * Implements a <select> native component that allows optionally setting the                                           // 6547
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a                                        // 6548
 * string. If `multiple` is true, the prop must be an array of strings.                                                // 6549
 *                                                                                                                     // 6550
 * If `value` is not supplied (or null/undefined), user actions that change the                                        // 6551
 * selected option will trigger updates to the rendered options.                                                       // 6552
 *                                                                                                                     // 6553
 * If it is supplied (and not null/undefined), the rendered options will not                                           // 6554
 * update in response to user actions. Instead, the `value` prop must change in                                        // 6555
 * order for the rendered options to update.                                                                           // 6556
 *                                                                                                                     // 6557
 * If `defaultValue` is provided, any options with the supplied values will be                                         // 6558
 * selected.                                                                                                           // 6559
 */                                                                                                                    // 6560
var ReactDOMSelect = ReactCompositeComponent.createClass({                                                             // 6561
  mixins: [LinkedValueMixin],                                                                                          // 6562
                                                                                                                       // 6563
  propTypes: {                                                                                                         // 6564
    defaultValue: selectValueType,                                                                                     // 6565
    value: selectValueType                                                                                             // 6566
  },                                                                                                                   // 6567
                                                                                                                       // 6568
  getInitialState: function() {                                                                                        // 6569
    return {value: this.props.defaultValue || (this.props.multiple ? [] : '')};                                        // 6570
  },                                                                                                                   // 6571
                                                                                                                       // 6572
  componentWillReceiveProps: function(nextProps) {                                                                     // 6573
    if (!this.props.multiple && nextProps.multiple) {                                                                  // 6574
      this.setState({value: [this.state.value]});                                                                      // 6575
    } else if (this.props.multiple && !nextProps.multiple) {                                                           // 6576
      this.setState({value: this.state.value[0]});                                                                     // 6577
    }                                                                                                                  // 6578
  },                                                                                                                   // 6579
                                                                                                                       // 6580
  shouldComponentUpdate: function() {                                                                                  // 6581
    // Defer any updates to this component during the `onChange` handler.                                              // 6582
    return !this._isChanging;                                                                                          // 6583
  },                                                                                                                   // 6584
                                                                                                                       // 6585
  render: function() {                                                                                                 // 6586
    // Clone `this.props` so we don't mutate the input.                                                                // 6587
    var props = merge(this.props);                                                                                     // 6588
                                                                                                                       // 6589
    props.onChange = this._handleChange;                                                                               // 6590
    props.value = null;                                                                                                // 6591
                                                                                                                       // 6592
    return select(props, this.props.children);                                                                         // 6593
  },                                                                                                                   // 6594
                                                                                                                       // 6595
  componentDidMount: updateOptions,                                                                                    // 6596
                                                                                                                       // 6597
  componentDidUpdate: updateOptions,                                                                                   // 6598
                                                                                                                       // 6599
  _handleChange: function(event) {                                                                                     // 6600
    var returnValue;                                                                                                   // 6601
    var onChange = this.getOnChange();                                                                                 // 6602
    if (onChange) {                                                                                                    // 6603
      this._isChanging = true;                                                                                         // 6604
      returnValue = onChange(event);                                                                                   // 6605
      this._isChanging = false;                                                                                        // 6606
    }                                                                                                                  // 6607
                                                                                                                       // 6608
    var selectedValue;                                                                                                 // 6609
    if (this.props.multiple) {                                                                                         // 6610
      selectedValue = [];                                                                                              // 6611
      var options = event.target.options;                                                                              // 6612
      for (var i = 0, l = options.length; i < l; i++) {                                                                // 6613
        if (options[i].selected) {                                                                                     // 6614
          selectedValue.push(options[i].value);                                                                        // 6615
        }                                                                                                              // 6616
      }                                                                                                                // 6617
    } else {                                                                                                           // 6618
      selectedValue = event.target.value;                                                                              // 6619
    }                                                                                                                  // 6620
                                                                                                                       // 6621
    this.setState({value: selectedValue});                                                                             // 6622
    return returnValue;                                                                                                // 6623
  }                                                                                                                    // 6624
                                                                                                                       // 6625
});                                                                                                                    // 6626
                                                                                                                       // 6627
module.exports = ReactDOMSelect;                                                                                       // 6628
                                                                                                                       // 6629
},{"./LinkedValueMixin":23,"./ReactCompositeComponent":31,"./ReactDOM":33,"./invariant":109,"./merge":118}],41:[function(require,module,exports){
/**                                                                                                                    // 6631
 * Copyright 2013 Facebook, Inc.                                                                                       // 6632
 *                                                                                                                     // 6633
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 6634
 * you may not use this file except in compliance with the License.                                                    // 6635
 * You may obtain a copy of the License at                                                                             // 6636
 *                                                                                                                     // 6637
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 6638
 *                                                                                                                     // 6639
 * Unless required by applicable law or agreed to in writing, software                                                 // 6640
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 6641
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 6642
 * See the License for the specific language governing permissions and                                                 // 6643
 * limitations under the License.                                                                                      // 6644
 *                                                                                                                     // 6645
 * @providesModule ReactDOMSelection                                                                                   // 6646
 */                                                                                                                    // 6647
                                                                                                                       // 6648
"use strict";                                                                                                          // 6649
                                                                                                                       // 6650
var getNodeForCharacterOffset = require("./getNodeForCharacterOffset");                                                // 6651
var getTextContentAccessor = require("./getTextContentAccessor");                                                      // 6652
                                                                                                                       // 6653
/**                                                                                                                    // 6654
 * Get the appropriate anchor and focus node/offset pairs for IE.                                                      // 6655
 *                                                                                                                     // 6656
 * The catch here is that IE's selection API doesn't provide information                                               // 6657
 * about whether the selection is forward or backward, so we have to                                                   // 6658
 * behave as though it's always forward.                                                                               // 6659
 *                                                                                                                     // 6660
 * IE text differs from modern selection in that it behaves as though                                                  // 6661
 * block elements end with a new line. This means character offsets will                                               // 6662
 * differ between the two APIs.                                                                                        // 6663
 *                                                                                                                     // 6664
 * @param {DOMElement} node                                                                                            // 6665
 * @return {object}                                                                                                    // 6666
 */                                                                                                                    // 6667
function getIEOffsets(node) {                                                                                          // 6668
  var selection = document.selection;                                                                                  // 6669
  var selectedRange = selection.createRange();                                                                         // 6670
  var selectedLength = selectedRange.text.length;                                                                      // 6671
                                                                                                                       // 6672
  // Duplicate selection so we can move range without breaking user selection.                                         // 6673
  var fromStart = selectedRange.duplicate();                                                                           // 6674
  fromStart.moveToElementText(node);                                                                                   // 6675
  fromStart.setEndPoint('EndToStart', selectedRange);                                                                  // 6676
                                                                                                                       // 6677
  var startOffset = fromStart.text.length;                                                                             // 6678
  var endOffset = startOffset + selectedLength;                                                                        // 6679
                                                                                                                       // 6680
  return {                                                                                                             // 6681
    start: startOffset,                                                                                                // 6682
    end: endOffset                                                                                                     // 6683
  };                                                                                                                   // 6684
}                                                                                                                      // 6685
                                                                                                                       // 6686
/**                                                                                                                    // 6687
 * @param {DOMElement} node                                                                                            // 6688
 * @return {?object}                                                                                                   // 6689
 */                                                                                                                    // 6690
function getModernOffsets(node) {                                                                                      // 6691
  var selection = window.getSelection();                                                                               // 6692
                                                                                                                       // 6693
  if (selection.rangeCount === 0) {                                                                                    // 6694
    return null;                                                                                                       // 6695
  }                                                                                                                    // 6696
                                                                                                                       // 6697
  var anchorNode = selection.anchorNode;                                                                               // 6698
  var anchorOffset = selection.anchorOffset;                                                                           // 6699
  var focusNode = selection.focusNode;                                                                                 // 6700
  var focusOffset = selection.focusOffset;                                                                             // 6701
                                                                                                                       // 6702
  var currentRange = selection.getRangeAt(0);                                                                          // 6703
  var rangeLength = currentRange.toString().length;                                                                    // 6704
                                                                                                                       // 6705
  var tempRange = currentRange.cloneRange();                                                                           // 6706
  tempRange.selectNodeContents(node);                                                                                  // 6707
  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);                                             // 6708
                                                                                                                       // 6709
  var start = tempRange.toString().length;                                                                             // 6710
  var end = start + rangeLength;                                                                                       // 6711
                                                                                                                       // 6712
  // Detect whether the selection is backward.                                                                         // 6713
  var detectionRange = document.createRange();                                                                         // 6714
  detectionRange.setStart(anchorNode, anchorOffset);                                                                   // 6715
  detectionRange.setEnd(focusNode, focusOffset);                                                                       // 6716
  var isBackward = detectionRange.collapsed;                                                                           // 6717
  detectionRange.detach();                                                                                             // 6718
                                                                                                                       // 6719
  return {                                                                                                             // 6720
    start: isBackward ? end : start,                                                                                   // 6721
    end: isBackward ? start : end                                                                                      // 6722
  };                                                                                                                   // 6723
}                                                                                                                      // 6724
                                                                                                                       // 6725
/**                                                                                                                    // 6726
 * @param {DOMElement|DOMTextNode} node                                                                                // 6727
 * @param {object} offsets                                                                                             // 6728
 */                                                                                                                    // 6729
function setIEOffsets(node, offsets) {                                                                                 // 6730
  var range = document.selection.createRange().duplicate();                                                            // 6731
  var start, end;                                                                                                      // 6732
                                                                                                                       // 6733
  if (typeof offsets.end === 'undefined') {                                                                            // 6734
    start = offsets.start;                                                                                             // 6735
    end = start;                                                                                                       // 6736
  } else if (offsets.start > offsets.end) {                                                                            // 6737
    start = offsets.end;                                                                                               // 6738
    end = offsets.start;                                                                                               // 6739
  } else {                                                                                                             // 6740
    start = offsets.start;                                                                                             // 6741
    end = offsets.end;                                                                                                 // 6742
  }                                                                                                                    // 6743
                                                                                                                       // 6744
  range.moveToElementText(node);                                                                                       // 6745
  range.moveStart('character', start);                                                                                 // 6746
  range.setEndPoint('EndToStart', range);                                                                              // 6747
  range.moveEnd('character', end - start);                                                                             // 6748
  range.select();                                                                                                      // 6749
}                                                                                                                      // 6750
                                                                                                                       // 6751
/**                                                                                                                    // 6752
 * In modern non-IE browsers, we can support both forward and backward                                                 // 6753
 * selections.                                                                                                         // 6754
 *                                                                                                                     // 6755
 * Note: IE10+ supports the Selection object, but it does not support                                                  // 6756
 * the `extend` method, which means that even in modern IE, it's not possible                                          // 6757
 * to programatically create a backward selection. Thus, for all IE                                                    // 6758
 * versions, we use the old IE API to create our selections.                                                           // 6759
 *                                                                                                                     // 6760
 * @param {DOMElement|DOMTextNode} node                                                                                // 6761
 * @param {object} offsets                                                                                             // 6762
 */                                                                                                                    // 6763
function setModernOffsets(node, offsets) {                                                                             // 6764
  var selection = window.getSelection();                                                                               // 6765
                                                                                                                       // 6766
  var length = node[getTextContentAccessor()].length;                                                                  // 6767
  var start = Math.min(offsets.start, length);                                                                         // 6768
  var end = typeof offsets.end === 'undefined' ?                                                                       // 6769
            start : Math.min(offsets.end, length);                                                                     // 6770
                                                                                                                       // 6771
  // IE 11 uses modern selection, but doesn't support the extend method.                                               // 6772
  // Flip backward selections, so we can set with a single range.                                                      // 6773
  if (!selection.extend && start > end) {                                                                              // 6774
    var temp = end;                                                                                                    // 6775
    end = start;                                                                                                       // 6776
    start = temp;                                                                                                      // 6777
  }                                                                                                                    // 6778
                                                                                                                       // 6779
  var startMarker = getNodeForCharacterOffset(node, start);                                                            // 6780
  var endMarker = getNodeForCharacterOffset(node, end);                                                                // 6781
                                                                                                                       // 6782
  if (startMarker && endMarker) {                                                                                      // 6783
    var range = document.createRange();                                                                                // 6784
    range.setStart(startMarker.node, startMarker.offset);                                                              // 6785
    selection.removeAllRanges();                                                                                       // 6786
                                                                                                                       // 6787
    if (start > end) {                                                                                                 // 6788
      selection.addRange(range);                                                                                       // 6789
      selection.extend(endMarker.node, endMarker.offset);                                                              // 6790
    } else {                                                                                                           // 6791
      range.setEnd(endMarker.node, endMarker.offset);                                                                  // 6792
      selection.addRange(range);                                                                                       // 6793
    }                                                                                                                  // 6794
                                                                                                                       // 6795
    range.detach();                                                                                                    // 6796
  }                                                                                                                    // 6797
}                                                                                                                      // 6798
                                                                                                                       // 6799
var ReactDOMSelection = {                                                                                              // 6800
  /**                                                                                                                  // 6801
   * @param {DOMElement} node                                                                                          // 6802
   */                                                                                                                  // 6803
  getOffsets: function(node) {                                                                                         // 6804
    var getOffsets = document.selection ? getIEOffsets : getModernOffsets;                                             // 6805
    return getOffsets(node);                                                                                           // 6806
  },                                                                                                                   // 6807
                                                                                                                       // 6808
  /**                                                                                                                  // 6809
   * @param {DOMElement|DOMTextNode} node                                                                              // 6810
   * @param {object} offsets                                                                                           // 6811
   */                                                                                                                  // 6812
  setOffsets: function(node, offsets) {                                                                                // 6813
    var setOffsets = document.selection ? setIEOffsets : setModernOffsets;                                             // 6814
    setOffsets(node, offsets);                                                                                         // 6815
  }                                                                                                                    // 6816
};                                                                                                                     // 6817
                                                                                                                       // 6818
module.exports = ReactDOMSelection;                                                                                    // 6819
                                                                                                                       // 6820
},{"./getNodeForCharacterOffset":104,"./getTextContentAccessor":106}],42:[function(require,module,exports){            // 6821
/**                                                                                                                    // 6822
 * Copyright 2013 Facebook, Inc.                                                                                       // 6823
 *                                                                                                                     // 6824
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 6825
 * you may not use this file except in compliance with the License.                                                    // 6826
 * You may obtain a copy of the License at                                                                             // 6827
 *                                                                                                                     // 6828
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 6829
 *                                                                                                                     // 6830
 * Unless required by applicable law or agreed to in writing, software                                                 // 6831
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 6832
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 6833
 * See the License for the specific language governing permissions and                                                 // 6834
 * limitations under the License.                                                                                      // 6835
 *                                                                                                                     // 6836
 * @providesModule ReactDOMTextarea                                                                                    // 6837
 */                                                                                                                    // 6838
                                                                                                                       // 6839
"use strict";                                                                                                          // 6840
                                                                                                                       // 6841
var DOMPropertyOperations = require("./DOMPropertyOperations");                                                        // 6842
var LinkedValueMixin = require("./LinkedValueMixin");                                                                  // 6843
var ReactCompositeComponent = require("./ReactCompositeComponent");                                                    // 6844
var ReactDOM = require("./ReactDOM");                                                                                  // 6845
                                                                                                                       // 6846
var invariant = require("./invariant");                                                                                // 6847
var merge = require("./merge");                                                                                        // 6848
                                                                                                                       // 6849
// Store a reference to the <textarea> `ReactDOMComponent`.                                                            // 6850
var textarea = ReactDOM.textarea;                                                                                      // 6851
                                                                                                                       // 6852
/**                                                                                                                    // 6853
 * Implements a <textarea> native component that allows setting `value`, and                                           // 6854
 * `defaultValue`. This differs from the traditional DOM API because value is                                          // 6855
 * usually set as PCDATA children.                                                                                     // 6856
 *                                                                                                                     // 6857
 * If `value` is not supplied (or null/undefined), user actions that affect the                                        // 6858
 * value will trigger updates to the element.                                                                          // 6859
 *                                                                                                                     // 6860
 * If `value` is supplied (and not null/undefined), the rendered element will                                          // 6861
 * not trigger updates to the element. Instead, the `value` prop must change in                                        // 6862
 * order for the rendered element to be updated.                                                                       // 6863
 *                                                                                                                     // 6864
 * The rendered element will be initialized with an empty value, the prop                                              // 6865
 * `defaultValue` if specified, or the children content (deprecated).                                                  // 6866
 */                                                                                                                    // 6867
var ReactDOMTextarea = ReactCompositeComponent.createClass({                                                           // 6868
  mixins: [LinkedValueMixin],                                                                                          // 6869
                                                                                                                       // 6870
  getInitialState: function() {                                                                                        // 6871
    var defaultValue = this.props.defaultValue;                                                                        // 6872
    // TODO (yungsters): Remove support for children content in <textarea>.                                            // 6873
    var children = this.props.children;                                                                                // 6874
    if (children != null) {                                                                                            // 6875
      if ("production" !== "development") {                                                                            // 6876
        console.warn(                                                                                                  // 6877
          'Use the `defaultValue` or `value` props instead of setting ' +                                              // 6878
          'children on <textarea>.'                                                                                    // 6879
        );                                                                                                             // 6880
      }                                                                                                                // 6881
      ("production" !== "development" ? invariant(                                                                     // 6882
        defaultValue == null,                                                                                          // 6883
        'If you supply `defaultValue` on a <textarea>, do not pass children.'                                          // 6884
      ) : invariant(defaultValue == null));                                                                            // 6885
      if (Array.isArray(children)) {                                                                                   // 6886
        ("production" !== "development" ? invariant(                                                                   // 6887
          children.length <= 1,                                                                                        // 6888
          '<textarea> can only have at most one child.'                                                                // 6889
        ) : invariant(children.length <= 1));                                                                          // 6890
        children = children[0];                                                                                        // 6891
      }                                                                                                                // 6892
                                                                                                                       // 6893
      defaultValue = '' + children;                                                                                    // 6894
    }                                                                                                                  // 6895
    if (defaultValue == null) {                                                                                        // 6896
      defaultValue = '';                                                                                               // 6897
    }                                                                                                                  // 6898
    var value = this.getValue();                                                                                       // 6899
    return {                                                                                                           // 6900
      // We save the initial value so that `ReactDOMComponent` doesn't update                                          // 6901
      // `textContent` (unnecessary since we update value).                                                            // 6902
      // The initial value can be a boolean or object so that's why it's                                               // 6903
      // forced to be a string.                                                                                        // 6904
      initialValue: '' + (value != null ? value : defaultValue),                                                       // 6905
      value: defaultValue                                                                                              // 6906
    };                                                                                                                 // 6907
  },                                                                                                                   // 6908
                                                                                                                       // 6909
  shouldComponentUpdate: function() {                                                                                  // 6910
    // Defer any updates to this component during the `onChange` handler.                                              // 6911
    return !this._isChanging;                                                                                          // 6912
  },                                                                                                                   // 6913
                                                                                                                       // 6914
  render: function() {                                                                                                 // 6915
    // Clone `this.props` so we don't mutate the input.                                                                // 6916
    var props = merge(this.props);                                                                                     // 6917
    var value = this.getValue();                                                                                       // 6918
                                                                                                                       // 6919
    ("production" !== "development" ? invariant(                                                                       // 6920
      props.dangerouslySetInnerHTML == null,                                                                           // 6921
      '`dangerouslySetInnerHTML` does not make sense on <textarea>.'                                                   // 6922
    ) : invariant(props.dangerouslySetInnerHTML == null));                                                             // 6923
                                                                                                                       // 6924
    props.defaultValue = null;                                                                                         // 6925
    props.value = value != null ? value : this.state.value;                                                            // 6926
    props.onChange = this._handleChange;                                                                               // 6927
                                                                                                                       // 6928
    // Always set children to the same thing. In IE9, the selection range will                                         // 6929
    // get reset if `textContent` is mutated.                                                                          // 6930
    return textarea(props, this.state.initialValue);                                                                   // 6931
  },                                                                                                                   // 6932
                                                                                                                       // 6933
  componentDidUpdate: function(prevProps, prevState, rootNode) {                                                       // 6934
    var value = this.getValue();                                                                                       // 6935
    if (value != null) {                                                                                               // 6936
      // Cast `value` to a string to ensure the value is set correctly. While                                          // 6937
      // browsers typically do this as necessary, jsdom doesn't.                                                       // 6938
      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);                                        // 6939
    }                                                                                                                  // 6940
  },                                                                                                                   // 6941
                                                                                                                       // 6942
  _handleChange: function(event) {                                                                                     // 6943
    var returnValue;                                                                                                   // 6944
    var onChange = this.getOnChange();                                                                                 // 6945
    if (onChange) {                                                                                                    // 6946
      this._isChanging = true;                                                                                         // 6947
      returnValue = onChange(event);                                                                                   // 6948
      this._isChanging = false;                                                                                        // 6949
    }                                                                                                                  // 6950
    this.setState({value: event.target.value});                                                                        // 6951
    return returnValue;                                                                                                // 6952
  }                                                                                                                    // 6953
                                                                                                                       // 6954
});                                                                                                                    // 6955
                                                                                                                       // 6956
module.exports = ReactDOMTextarea;                                                                                     // 6957
                                                                                                                       // 6958
},{"./DOMPropertyOperations":10,"./LinkedValueMixin":23,"./ReactCompositeComponent":31,"./ReactDOM":33,"./invariant":109,"./merge":118}],43:[function(require,module,exports){
/**                                                                                                                    // 6960
 * Copyright 2013 Facebook, Inc.                                                                                       // 6961
 *                                                                                                                     // 6962
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 6963
 * you may not use this file except in compliance with the License.                                                    // 6964
 * You may obtain a copy of the License at                                                                             // 6965
 *                                                                                                                     // 6966
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 6967
 *                                                                                                                     // 6968
 * Unless required by applicable law or agreed to in writing, software                                                 // 6969
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 6970
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 6971
 * See the License for the specific language governing permissions and                                                 // 6972
 * limitations under the License.                                                                                      // 6973
 *                                                                                                                     // 6974
 * @providesModule ReactDefaultBatchingStrategy                                                                        // 6975
 */                                                                                                                    // 6976
                                                                                                                       // 6977
"use strict";                                                                                                          // 6978
                                                                                                                       // 6979
var ReactUpdates = require("./ReactUpdates");                                                                          // 6980
var Transaction = require("./Transaction");                                                                            // 6981
                                                                                                                       // 6982
var emptyFunction = require("./emptyFunction");                                                                        // 6983
var mixInto = require("./mixInto");                                                                                    // 6984
                                                                                                                       // 6985
var RESET_BATCHED_UPDATES = {                                                                                          // 6986
  initialize: emptyFunction,                                                                                           // 6987
  close: function() {                                                                                                  // 6988
    ReactDefaultBatchingStrategy.isBatchingUpdates = false;                                                            // 6989
  }                                                                                                                    // 6990
};                                                                                                                     // 6991
                                                                                                                       // 6992
var FLUSH_BATCHED_UPDATES = {                                                                                          // 6993
  initialize: emptyFunction,                                                                                           // 6994
  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)                                                           // 6995
};                                                                                                                     // 6996
                                                                                                                       // 6997
var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];                                             // 6998
                                                                                                                       // 6999
function ReactDefaultBatchingStrategyTransaction() {                                                                   // 7000
  this.reinitializeTransaction();                                                                                      // 7001
}                                                                                                                      // 7002
                                                                                                                       // 7003
mixInto(ReactDefaultBatchingStrategyTransaction, Transaction.Mixin);                                                   // 7004
mixInto(ReactDefaultBatchingStrategyTransaction, {                                                                     // 7005
  getTransactionWrappers: function() {                                                                                 // 7006
    return TRANSACTION_WRAPPERS;                                                                                       // 7007
  }                                                                                                                    // 7008
});                                                                                                                    // 7009
                                                                                                                       // 7010
var transaction = new ReactDefaultBatchingStrategyTransaction();                                                       // 7011
                                                                                                                       // 7012
var ReactDefaultBatchingStrategy = {                                                                                   // 7013
  isBatchingUpdates: false,                                                                                            // 7014
                                                                                                                       // 7015
  /**                                                                                                                  // 7016
   * Call the provided function in a context within which calls to `setState`                                          // 7017
   * and friends are batched such that components aren't updated unnecessarily.                                        // 7018
   */                                                                                                                  // 7019
  batchedUpdates: function(callback, param) {                                                                          // 7020
    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;                                       // 7021
                                                                                                                       // 7022
    ReactDefaultBatchingStrategy.isBatchingUpdates = true;                                                             // 7023
                                                                                                                       // 7024
    // The code is written this way to avoid extra allocations                                                         // 7025
    if (alreadyBatchingUpdates) {                                                                                      // 7026
      callback(param);                                                                                                 // 7027
    } else {                                                                                                           // 7028
      transaction.perform(callback, null, param);                                                                      // 7029
    }                                                                                                                  // 7030
  }                                                                                                                    // 7031
};                                                                                                                     // 7032
                                                                                                                       // 7033
module.exports = ReactDefaultBatchingStrategy;                                                                         // 7034
                                                                                                                       // 7035
},{"./ReactUpdates":70,"./Transaction":83,"./emptyFunction":94,"./mixInto":121}],44:[function(require,module,exports){ // 7036
/**                                                                                                                    // 7037
 * Copyright 2013 Facebook, Inc.                                                                                       // 7038
 *                                                                                                                     // 7039
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 7040
 * you may not use this file except in compliance with the License.                                                    // 7041
 * You may obtain a copy of the License at                                                                             // 7042
 *                                                                                                                     // 7043
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 7044
 *                                                                                                                     // 7045
 * Unless required by applicable law or agreed to in writing, software                                                 // 7046
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 7047
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 7048
 * See the License for the specific language governing permissions and                                                 // 7049
 * limitations under the License.                                                                                      // 7050
 *                                                                                                                     // 7051
 * @providesModule ReactDefaultInjection                                                                               // 7052
 */                                                                                                                    // 7053
                                                                                                                       // 7054
"use strict";                                                                                                          // 7055
                                                                                                                       // 7056
var ReactDOM = require("./ReactDOM");                                                                                  // 7057
var ReactDOMButton = require("./ReactDOMButton");                                                                      // 7058
var ReactDOMForm = require("./ReactDOMForm");                                                                          // 7059
var ReactDOMInput = require("./ReactDOMInput");                                                                        // 7060
var ReactDOMOption = require("./ReactDOMOption");                                                                      // 7061
var ReactDOMSelect = require("./ReactDOMSelect");                                                                      // 7062
var ReactDOMTextarea = require("./ReactDOMTextarea");                                                                  // 7063
var ReactEventEmitter = require("./ReactEventEmitter");                                                                // 7064
var ReactEventTopLevelCallback = require("./ReactEventTopLevelCallback");                                              // 7065
var ReactPerf = require("./ReactPerf");                                                                                // 7066
                                                                                                                       // 7067
var DefaultDOMPropertyConfig = require("./DefaultDOMPropertyConfig");                                                  // 7068
var DOMProperty = require("./DOMProperty");                                                                            // 7069
                                                                                                                       // 7070
var ChangeEventPlugin = require("./ChangeEventPlugin");                                                                // 7071
var CompositionEventPlugin = require("./CompositionEventPlugin");                                                      // 7072
var DefaultEventPluginOrder = require("./DefaultEventPluginOrder");                                                    // 7073
var EnterLeaveEventPlugin = require("./EnterLeaveEventPlugin");                                                        // 7074
var EventPluginHub = require("./EventPluginHub");                                                                      // 7075
var MobileSafariClickEventPlugin = require("./MobileSafariClickEventPlugin");                                          // 7076
var ReactInstanceHandles = require("./ReactInstanceHandles");                                                          // 7077
var SelectEventPlugin = require("./SelectEventPlugin");                                                                // 7078
var SimpleEventPlugin = require("./SimpleEventPlugin");                                                                // 7079
                                                                                                                       // 7080
var ReactDefaultBatchingStrategy = require("./ReactDefaultBatchingStrategy");                                          // 7081
var ReactUpdates = require("./ReactUpdates");                                                                          // 7082
                                                                                                                       // 7083
function inject() {                                                                                                    // 7084
  ReactEventEmitter.TopLevelCallbackCreator = ReactEventTopLevelCallback;                                              // 7085
  /**                                                                                                                  // 7086
   * Inject module for resolving DOM hierarchy and plugin ordering.                                                    // 7087
   */                                                                                                                  // 7088
  EventPluginHub.injection.injectEventPluginOrder(DefaultEventPluginOrder);                                            // 7089
  EventPluginHub.injection.injectInstanceHandle(ReactInstanceHandles);                                                 // 7090
                                                                                                                       // 7091
  /**                                                                                                                  // 7092
   * Some important event plugins included by default (without having to require                                       // 7093
   * them).                                                                                                            // 7094
   */                                                                                                                  // 7095
  EventPluginHub.injection.injectEventPluginsByName({                                                                  // 7096
    SimpleEventPlugin: SimpleEventPlugin,                                                                              // 7097
    EnterLeaveEventPlugin: EnterLeaveEventPlugin,                                                                      // 7098
    ChangeEventPlugin: ChangeEventPlugin,                                                                              // 7099
    CompositionEventPlugin: CompositionEventPlugin,                                                                    // 7100
    MobileSafariClickEventPlugin: MobileSafariClickEventPlugin,                                                        // 7101
    SelectEventPlugin: SelectEventPlugin                                                                               // 7102
  });                                                                                                                  // 7103
                                                                                                                       // 7104
  ReactDOM.injection.injectComponentClasses({                                                                          // 7105
    button: ReactDOMButton,                                                                                            // 7106
    form: ReactDOMForm,                                                                                                // 7107
    input: ReactDOMInput,                                                                                              // 7108
    option: ReactDOMOption,                                                                                            // 7109
    select: ReactDOMSelect,                                                                                            // 7110
    textarea: ReactDOMTextarea                                                                                         // 7111
  });                                                                                                                  // 7112
                                                                                                                       // 7113
  DOMProperty.injection.injectDOMPropertyConfig(DefaultDOMPropertyConfig);                                             // 7114
                                                                                                                       // 7115
  if ("production" !== "development") {                                                                                // 7116
    ReactPerf.injection.injectMeasure(require("./ReactDefaultPerf").measure);                                          // 7117
  }                                                                                                                    // 7118
                                                                                                                       // 7119
  ReactUpdates.injection.injectBatchingStrategy(                                                                       // 7120
    ReactDefaultBatchingStrategy                                                                                       // 7121
  );                                                                                                                   // 7122
}                                                                                                                      // 7123
                                                                                                                       // 7124
module.exports = {                                                                                                     // 7125
  inject: inject                                                                                                       // 7126
};                                                                                                                     // 7127
                                                                                                                       // 7128
},{"./ChangeEventPlugin":6,"./CompositionEventPlugin":7,"./DOMProperty":9,"./DefaultDOMPropertyConfig":12,"./DefaultEventPluginOrder":13,"./EnterLeaveEventPlugin":14,"./EventPluginHub":17,"./MobileSafariClickEventPlugin":24,"./ReactDOM":33,"./ReactDOMButton":34,"./ReactDOMForm":36,"./ReactDOMInput":38,"./ReactDOMOption":39,"./ReactDOMSelect":40,"./ReactDOMTextarea":42,"./ReactDefaultBatchingStrategy":43,"./ReactDefaultPerf":45,"./ReactEventEmitter":47,"./ReactEventTopLevelCallback":49,"./ReactInstanceHandles":51,"./ReactPerf":59,"./ReactUpdates":70,"./SelectEventPlugin":72,"./SimpleEventPlugin":73}],45:[function(require,module,exports){
/**                                                                                                                    // 7130
 * Copyright 2013 Facebook, Inc.                                                                                       // 7131
 *                                                                                                                     // 7132
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 7133
 * you may not use this file except in compliance with the License.                                                    // 7134
 * You may obtain a copy of the License at                                                                             // 7135
 *                                                                                                                     // 7136
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 7137
 *                                                                                                                     // 7138
 * Unless required by applicable law or agreed to in writing, software                                                 // 7139
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 7140
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 7141
 * See the License for the specific language governing permissions and                                                 // 7142
 * limitations under the License.                                                                                      // 7143
 *                                                                                                                     // 7144
 * @providesModule ReactDefaultPerf                                                                                    // 7145
 * @typechecks static-only                                                                                             // 7146
 */                                                                                                                    // 7147
                                                                                                                       // 7148
"use strict";                                                                                                          // 7149
                                                                                                                       // 7150
var performanceNow = require("./performanceNow");                                                                      // 7151
                                                                                                                       // 7152
var ReactDefaultPerf = {};                                                                                             // 7153
                                                                                                                       // 7154
if ("production" !== "development") {                                                                                  // 7155
  ReactDefaultPerf = {                                                                                                 // 7156
    /**                                                                                                                // 7157
     * Gets the stored information for a given object's function.                                                      // 7158
     *                                                                                                                 // 7159
     * @param {string} objName                                                                                         // 7160
     * @param {string} fnName                                                                                          // 7161
     * @return {?object}                                                                                               // 7162
     */                                                                                                                // 7163
    getInfo: function(objName, fnName) {                                                                               // 7164
      if (!this.info[objName] || !this.info[objName][fnName]) {                                                        // 7165
        return null;                                                                                                   // 7166
      }                                                                                                                // 7167
      return this.info[objName][fnName];                                                                               // 7168
    },                                                                                                                 // 7169
                                                                                                                       // 7170
    /**                                                                                                                // 7171
     * Gets the logs pertaining to a given object's function.                                                          // 7172
     *                                                                                                                 // 7173
     * @param {string} objName                                                                                         // 7174
     * @param {string} fnName                                                                                          // 7175
     * @return {?array<object>}                                                                                        // 7176
     */                                                                                                                // 7177
    getLogs: function(objName, fnName) {                                                                               // 7178
      if (!this.getInfo(objName, fnName)) {                                                                            // 7179
        return null;                                                                                                   // 7180
      }                                                                                                                // 7181
      return this.logs.filter(function(log) {                                                                          // 7182
        return log.objName === objName && log.fnName === fnName;                                                       // 7183
      });                                                                                                              // 7184
    },                                                                                                                 // 7185
                                                                                                                       // 7186
    /**                                                                                                                // 7187
     * Runs through the logs and builds an array of arrays, where each array                                           // 7188
     * walks through the mounting/updating of each component underneath.                                               // 7189
     *                                                                                                                 // 7190
     * @param {string} rootID The reactID of the root node, e.g. '.r[2cpyq]'                                           // 7191
     * @return {array<array>}                                                                                          // 7192
     */                                                                                                                // 7193
    getRawRenderHistory: function(rootID) {                                                                            // 7194
      var history = [];                                                                                                // 7195
      /**                                                                                                              // 7196
       * Since logs are added after the method returns, the logs are in a sense                                        // 7197
       * upside-down: the inner-most elements from mounting/updating are logged                                        // 7198
       * first, and the last addition to the log is the top renderComponent.                                           // 7199
       * Therefore, we flip the logs upside down for ease of processing, and                                           // 7200
       * reverse the history array at the end so the earliest event has index 0.                                       // 7201
       */                                                                                                              // 7202
      var logs = this.logs.filter(function(log) {                                                                      // 7203
        return log.reactID.indexOf(rootID) === 0;                                                                      // 7204
      }).reverse();                                                                                                    // 7205
                                                                                                                       // 7206
      var subHistory = [];                                                                                             // 7207
      logs.forEach(function(log, i) {                                                                                  // 7208
        if (i && log.reactID === rootID && logs[i - 1].reactID !== rootID) {                                           // 7209
          subHistory.length && history.push(subHistory);                                                               // 7210
          subHistory = [];                                                                                             // 7211
        }                                                                                                              // 7212
        subHistory.push(log);                                                                                          // 7213
      });                                                                                                              // 7214
      if (subHistory.length) {                                                                                         // 7215
        history.push(subHistory);                                                                                      // 7216
      }                                                                                                                // 7217
      return history.reverse();                                                                                        // 7218
    },                                                                                                                 // 7219
                                                                                                                       // 7220
    /**                                                                                                                // 7221
     * Runs through the logs and builds an array of strings, where each string                                         // 7222
     * is a multiline formatted way of walking through the mounting/updating                                           // 7223
     * underneath.                                                                                                     // 7224
     *                                                                                                                 // 7225
     * @param {string} rootID The reactID of the root node, e.g. '.r[2cpyq]'                                           // 7226
     * @return {array<string>}                                                                                         // 7227
     */                                                                                                                // 7228
    getRenderHistory: function(rootID) {                                                                               // 7229
      var history = this.getRawRenderHistory(rootID);                                                                  // 7230
                                                                                                                       // 7231
      return history.map(function(subHistory) {                                                                        // 7232
        var headerString = (                                                                                           // 7233
          'log# Component (execution time) [bloat from logging]\n' +                                                   // 7234
          '================================================================\n'                                         // 7235
        );                                                                                                             // 7236
        return headerString + subHistory.map(function(log) {                                                           // 7237
          // Add two spaces for every layer in the reactID.                                                            // 7238
          var indents = '\t' + Array(log.reactID.split('.[').length).join('  ');                                       // 7239
          var delta = _microTime(log.timing.delta);                                                                    // 7240
          var bloat = _microTime(log.timing.timeToLog);                                                                // 7241
                                                                                                                       // 7242
          return log.index + indents + log.name + ' (' + delta + 'ms)' +                                               // 7243
            ' [' + bloat + 'ms]';                                                                                      // 7244
        }).join('\n');                                                                                                 // 7245
      });                                                                                                              // 7246
    },                                                                                                                 // 7247
                                                                                                                       // 7248
    /**                                                                                                                // 7249
     * Print the render history from `getRenderHistory` using console.log.                                             // 7250
     * This is currently the best way to display perf data from                                                        // 7251
     * any React component; working on that.                                                                           // 7252
     *                                                                                                                 // 7253
     * @param {string} rootID The reactID of the root node, e.g. '.r[2cpyq]'                                           // 7254
     * @param {number} index                                                                                           // 7255
     */                                                                                                                // 7256
    printRenderHistory: function(rootID, index) {                                                                      // 7257
      var history = this.getRenderHistory(rootID);                                                                     // 7258
      if (!history[index]) {                                                                                           // 7259
        console.warn(                                                                                                  // 7260
          'Index', index, 'isn\'t available! ' +                                                                       // 7261
          'The render history is', history.length, 'long.'                                                             // 7262
        );                                                                                                             // 7263
        return;                                                                                                        // 7264
      }                                                                                                                // 7265
      console.log(                                                                                                     // 7266
        'Loading render history #' + (index + 1) +                                                                     // 7267
        ' of ' + history.length + ':\n' + history[index]                                                               // 7268
      );                                                                                                               // 7269
    },                                                                                                                 // 7270
                                                                                                                       // 7271
    /**                                                                                                                // 7272
     * Prints the heatmap legend to console, showing how the colors correspond                                         // 7273
     * with render times. This relies on console.log styles.                                                           // 7274
     */                                                                                                                // 7275
    printHeatmapLegend: function() {                                                                                   // 7276
      if (!this.options.heatmap.enabled) {                                                                             // 7277
        return;                                                                                                        // 7278
      }                                                                                                                // 7279
      var max = this.info.React                                                                                        // 7280
        && this.info.React.renderComponent                                                                             // 7281
        && this.info.React.renderComponent.max;                                                                        // 7282
      if (max) {                                                                                                       // 7283
        var logStr = 'Heatmap: ';                                                                                      // 7284
        for (var ii = 0; ii <= 10 * max; ii += max) {                                                                  // 7285
          logStr += '%c ' + (Math.round(ii) / 10) + 'ms ';                                                             // 7286
        }                                                                                                              // 7287
        console.log(                                                                                                   // 7288
          logStr,                                                                                                      // 7289
          'background-color: hsla(100, 100%, 50%, 0.6);',                                                              // 7290
          'background-color: hsla( 90, 100%, 50%, 0.6);',                                                              // 7291
          'background-color: hsla( 80, 100%, 50%, 0.6);',                                                              // 7292
          'background-color: hsla( 70, 100%, 50%, 0.6);',                                                              // 7293
          'background-color: hsla( 60, 100%, 50%, 0.6);',                                                              // 7294
          'background-color: hsla( 50, 100%, 50%, 0.6);',                                                              // 7295
          'background-color: hsla( 40, 100%, 50%, 0.6);',                                                              // 7296
          'background-color: hsla( 30, 100%, 50%, 0.6);',                                                              // 7297
          'background-color: hsla( 20, 100%, 50%, 0.6);',                                                              // 7298
          'background-color: hsla( 10, 100%, 50%, 0.6);',                                                              // 7299
          'background-color: hsla(  0, 100%, 50%, 0.6);'                                                               // 7300
        );                                                                                                             // 7301
      }                                                                                                                // 7302
    },                                                                                                                 // 7303
                                                                                                                       // 7304
    /**                                                                                                                // 7305
     * Measure a given function with logging information, and calls a callback                                         // 7306
     * if there is one.                                                                                                // 7307
     *                                                                                                                 // 7308
     * @param {string} objName                                                                                         // 7309
     * @param {string} fnName                                                                                          // 7310
     * @param {function} func                                                                                          // 7311
     * @return {function}                                                                                              // 7312
     */                                                                                                                // 7313
    measure: function(objName, fnName, func) {                                                                         // 7314
      var info = _getNewInfo(objName, fnName);                                                                         // 7315
                                                                                                                       // 7316
      var fnArgs = _getFnArguments(func);                                                                              // 7317
                                                                                                                       // 7318
      return function() {                                                                                              // 7319
        var timeBeforeFn = performanceNow();                                                                           // 7320
        var fnReturn = func.apply(this, arguments);                                                                    // 7321
        var timeAfterFn = performanceNow();                                                                            // 7322
                                                                                                                       // 7323
        /**                                                                                                            // 7324
         * Hold onto arguments in a readable way: args[1] -> args.component.                                           // 7325
         * args is also passed to the callback, so if you want to save an                                              // 7326
         * argument in the log, do so in the callback.                                                                 // 7327
         */                                                                                                            // 7328
        var args = {};                                                                                                 // 7329
        for (var i = 0; i < arguments.length; i++) {                                                                   // 7330
          args[fnArgs[i]] = arguments[i];                                                                              // 7331
        }                                                                                                              // 7332
                                                                                                                       // 7333
        var log = {                                                                                                    // 7334
          index: ReactDefaultPerf.logs.length,                                                                         // 7335
          fnName: fnName,                                                                                              // 7336
          objName: objName,                                                                                            // 7337
          timing: {                                                                                                    // 7338
            before: timeBeforeFn,                                                                                      // 7339
            after: timeAfterFn,                                                                                        // 7340
            delta: timeAfterFn - timeBeforeFn                                                                          // 7341
          }                                                                                                            // 7342
        };                                                                                                             // 7343
                                                                                                                       // 7344
        ReactDefaultPerf.logs.push(log);                                                                               // 7345
                                                                                                                       // 7346
        /**                                                                                                            // 7347
         * The callback gets:                                                                                          // 7348
         * - this (the component)                                                                                      // 7349
         * - the original method's arguments                                                                           // 7350
         * - what the method returned                                                                                  // 7351
         * - the log object, and                                                                                       // 7352
         * - the wrapped method's info object.                                                                         // 7353
         */                                                                                                            // 7354
        var callback = _getCallback(objName, fnName);                                                                  // 7355
        callback && callback(this, args, fnReturn, log, info);                                                         // 7356
                                                                                                                       // 7357
        log.timing.timeToLog = performanceNow() - timeAfterFn;                                                         // 7358
                                                                                                                       // 7359
        return fnReturn;                                                                                               // 7360
      };                                                                                                               // 7361
    },                                                                                                                 // 7362
                                                                                                                       // 7363
    /**                                                                                                                // 7364
     * Holds information on wrapped objects/methods.                                                                   // 7365
     * For instance, ReactDefaultPerf.info.React.renderComponent                                                       // 7366
     */                                                                                                                // 7367
    info: {},                                                                                                          // 7368
                                                                                                                       // 7369
    /**                                                                                                                // 7370
     * Holds all of the logs. Filter this to pull desired information.                                                 // 7371
     */                                                                                                                // 7372
    logs: [],                                                                                                          // 7373
                                                                                                                       // 7374
    /**                                                                                                                // 7375
     * Toggle settings for ReactDefaultPerf                                                                            // 7376
     */                                                                                                                // 7377
    options: {                                                                                                         // 7378
      /**                                                                                                              // 7379
       * The heatmap sets the background color of the React containers                                                 // 7380
       * according to how much total time has been spent rendering them.                                               // 7381
       * The most temporally expensive component is set as pure red,                                                   // 7382
       * and the others are colored from green to red as a fraction                                                    // 7383
       * of that max component time.                                                                                   // 7384
       */                                                                                                              // 7385
      heatmap: {                                                                                                       // 7386
        enabled: true                                                                                                  // 7387
      }                                                                                                                // 7388
    }                                                                                                                  // 7389
  };                                                                                                                   // 7390
                                                                                                                       // 7391
  /**                                                                                                                  // 7392
   * Gets a info area for a given object's function, adding a new one if                                               // 7393
   * necessary.                                                                                                        // 7394
   *                                                                                                                   // 7395
   * @param {string} objName                                                                                           // 7396
   * @param {string} fnName                                                                                            // 7397
   * @return {object}                                                                                                  // 7398
   */                                                                                                                  // 7399
  var _getNewInfo = function(objName, fnName) {                                                                        // 7400
    var info = ReactDefaultPerf.getInfo(objName, fnName);                                                              // 7401
    if (info) {                                                                                                        // 7402
      return info;                                                                                                     // 7403
    }                                                                                                                  // 7404
    ReactDefaultPerf.info[objName] = ReactDefaultPerf.info[objName] || {};                                             // 7405
                                                                                                                       // 7406
    return ReactDefaultPerf.info[objName][fnName] = {                                                                  // 7407
      getLogs: function() {                                                                                            // 7408
        return ReactDefaultPerf.getLogs(objName, fnName);                                                              // 7409
      }                                                                                                                // 7410
    };                                                                                                                 // 7411
  };                                                                                                                   // 7412
                                                                                                                       // 7413
  /**                                                                                                                  // 7414
   * Gets a list of the argument names from a function's definition.                                                   // 7415
   * This is useful for storing arguments by their names within wrapFn().                                              // 7416
   *                                                                                                                   // 7417
   * @param {function} fn                                                                                              // 7418
   * @return {array<string>}                                                                                           // 7419
   */                                                                                                                  // 7420
  var _getFnArguments = function(fn) {                                                                                 // 7421
    var STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg;                                                           // 7422
    var fnStr = fn.toString().replace(STRIP_COMMENTS, '');                                                             // 7423
    fnStr = fnStr.slice(fnStr.indexOf('(') + 1, fnStr.indexOf(')'));                                                   // 7424
    return fnStr.match(/([^\s,]+)/g);                                                                                  // 7425
  };                                                                                                                   // 7426
                                                                                                                       // 7427
  /**                                                                                                                  // 7428
   * Store common callbacks within ReactDefaultPerf.                                                                   // 7429
   *                                                                                                                   // 7430
   * @param {string} objName                                                                                           // 7431
   * @param {string} fnName                                                                                            // 7432
   * @return {?function}                                                                                               // 7433
   */                                                                                                                  // 7434
  var _getCallback = function(objName, fnName) {                                                                       // 7435
    switch (objName + '.' + fnName) {                                                                                  // 7436
      case 'React.renderComponent':                                                                                    // 7437
        return _renderComponentCallback;                                                                               // 7438
      case 'ReactDOMComponent.mountComponent':                                                                         // 7439
      case 'ReactDOMComponent.updateComponent':                                                                        // 7440
        return _nativeComponentCallback;                                                                               // 7441
      case 'ReactCompositeComponent.mountComponent':                                                                   // 7442
      case 'ReactCompositeComponent.updateComponent':                                                                  // 7443
        return _compositeComponentCallback;                                                                            // 7444
      default:                                                                                                         // 7445
        return null;                                                                                                   // 7446
    }                                                                                                                  // 7447
  };                                                                                                                   // 7448
                                                                                                                       // 7449
  /**                                                                                                                  // 7450
   * Callback function for React.renderComponent                                                                       // 7451
   *                                                                                                                   // 7452
   * @param {object} component                                                                                         // 7453
   * @param {object} args                                                                                              // 7454
   * @param {?object} fnReturn                                                                                         // 7455
   * @param {object} log                                                                                               // 7456
   * @param {object} info                                                                                              // 7457
   */                                                                                                                  // 7458
  var _renderComponentCallback =                                                                                       // 7459
    function(component, args, fnReturn, log, info) {                                                                   // 7460
    log.name = args.nextComponent.constructor.displayName || '[unknown]';                                              // 7461
    log.reactID = fnReturn._rootNodeID || null;                                                                        // 7462
                                                                                                                       // 7463
    if (ReactDefaultPerf.options.heatmap.enabled) {                                                                    // 7464
      var container = args.container;                                                                                  // 7465
      if (!container.loggedByReactDefaultPerf) {                                                                       // 7466
        container.loggedByReactDefaultPerf = true;                                                                     // 7467
        info.components = info.components || [];                                                                       // 7468
        info.components.push(container);                                                                               // 7469
      }                                                                                                                // 7470
                                                                                                                       // 7471
      container.count = container.count || 0;                                                                          // 7472
      container.count += log.timing.delta;                                                                             // 7473
      info.max = info.max || 0;                                                                                        // 7474
      if (container.count > info.max) {                                                                                // 7475
        info.max = container.count;                                                                                    // 7476
        info.components.forEach(function(component) {                                                                  // 7477
          _setHue(component, 100 - 100 * component.count / info.max);                                                  // 7478
        });                                                                                                            // 7479
      } else {                                                                                                         // 7480
        _setHue(container, 100 - 100 * container.count / info.max);                                                    // 7481
      }                                                                                                                // 7482
    }                                                                                                                  // 7483
  };                                                                                                                   // 7484
                                                                                                                       // 7485
  /**                                                                                                                  // 7486
   * Callback function for ReactDOMComponent                                                                           // 7487
   *                                                                                                                   // 7488
   * @param {object} component                                                                                         // 7489
   * @param {object} args                                                                                              // 7490
   * @param {?object} fnReturn                                                                                         // 7491
   * @param {object} log                                                                                               // 7492
   * @param {object} info                                                                                              // 7493
   */                                                                                                                  // 7494
  var _nativeComponentCallback =                                                                                       // 7495
    function(component, args, fnReturn, log, info) {                                                                   // 7496
    log.name = component.tagName || '[unknown]';                                                                       // 7497
    log.reactID = component._rootNodeID;                                                                               // 7498
  };                                                                                                                   // 7499
                                                                                                                       // 7500
  /**                                                                                                                  // 7501
   * Callback function for ReactCompositeComponent                                                                     // 7502
   *                                                                                                                   // 7503
   * @param {object} component                                                                                         // 7504
   * @param {object} args                                                                                              // 7505
   * @param {?object} fnReturn                                                                                         // 7506
   * @param {object} log                                                                                               // 7507
   * @param {object} info                                                                                              // 7508
   */                                                                                                                  // 7509
  var _compositeComponentCallback =                                                                                    // 7510
    function(component, args, fnReturn, log, info) {                                                                   // 7511
    log.name = component.constructor.displayName || '[unknown]';                                                       // 7512
    log.reactID = component._rootNodeID;                                                                               // 7513
  };                                                                                                                   // 7514
                                                                                                                       // 7515
  /**                                                                                                                  // 7516
   * Using the hsl() background-color attribute, colors an element.                                                    // 7517
   *                                                                                                                   // 7518
   * @param {DOMElement} el                                                                                            // 7519
   * @param {number} hue [0 for red, 120 for green, 240 for blue]                                                      // 7520
   */                                                                                                                  // 7521
  var _setHue = function(el, hue) {                                                                                    // 7522
    el.style.backgroundColor = 'hsla(' + hue + ', 100%, 50%, 0.6)';                                                    // 7523
  };                                                                                                                   // 7524
                                                                                                                       // 7525
  /**                                                                                                                  // 7526
   * Round to the thousandth place.                                                                                    // 7527
   * @param {number} time                                                                                              // 7528
   * @return {number}                                                                                                  // 7529
   */                                                                                                                  // 7530
  var _microTime = function(time) {                                                                                    // 7531
    return Math.round(time * 1000) / 1000;                                                                             // 7532
  };                                                                                                                   // 7533
}                                                                                                                      // 7534
                                                                                                                       // 7535
module.exports = ReactDefaultPerf;                                                                                     // 7536
                                                                                                                       // 7537
},{"./performanceNow":125}],46:[function(require,module,exports){                                                      // 7538
/**                                                                                                                    // 7539
 * Copyright 2013 Facebook, Inc.                                                                                       // 7540
 *                                                                                                                     // 7541
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 7542
 * you may not use this file except in compliance with the License.                                                    // 7543
 * You may obtain a copy of the License at                                                                             // 7544
 *                                                                                                                     // 7545
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 7546
 *                                                                                                                     // 7547
 * Unless required by applicable law or agreed to in writing, software                                                 // 7548
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 7549
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 7550
 * See the License for the specific language governing permissions and                                                 // 7551
 * limitations under the License.                                                                                      // 7552
 *                                                                                                                     // 7553
 * @providesModule ReactErrorUtils                                                                                     // 7554
 * @typechecks                                                                                                         // 7555
 */                                                                                                                    // 7556
                                                                                                                       // 7557
var ReactErrorUtils = {                                                                                                // 7558
  /**                                                                                                                  // 7559
   * Creates a guarded version of a function. This is supposed to make debugging                                       // 7560
   * of event handlers easier. This implementation provides only basic error                                           // 7561
   * logging and re-throws the error.                                                                                  // 7562
   *                                                                                                                   // 7563
   * @param {function} func Function to be executed                                                                    // 7564
   * @param {string} name The name of the guard                                                                        // 7565
   * @return {function}                                                                                                // 7566
   */                                                                                                                  // 7567
  guard: function(func, name) {                                                                                        // 7568
    if ("production" !== "development") {                                                                              // 7569
      return function guarded() {                                                                                      // 7570
        try {                                                                                                          // 7571
          return func.apply(this, arguments);                                                                          // 7572
        } catch(ex) {                                                                                                  // 7573
          console.error(name + ': ' + ex.message);                                                                     // 7574
          throw ex;                                                                                                    // 7575
        }                                                                                                              // 7576
      };                                                                                                               // 7577
    } else {                                                                                                           // 7578
      return func;                                                                                                     // 7579
    }                                                                                                                  // 7580
  }                                                                                                                    // 7581
};                                                                                                                     // 7582
                                                                                                                       // 7583
module.exports = ReactErrorUtils;                                                                                      // 7584
                                                                                                                       // 7585
},{}],47:[function(require,module,exports){                                                                            // 7586
/**                                                                                                                    // 7587
 * Copyright 2013 Facebook, Inc.                                                                                       // 7588
 *                                                                                                                     // 7589
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 7590
 * you may not use this file except in compliance with the License.                                                    // 7591
 * You may obtain a copy of the License at                                                                             // 7592
 *                                                                                                                     // 7593
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 7594
 *                                                                                                                     // 7595
 * Unless required by applicable law or agreed to in writing, software                                                 // 7596
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 7597
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 7598
 * See the License for the specific language governing permissions and                                                 // 7599
 * limitations under the License.                                                                                      // 7600
 *                                                                                                                     // 7601
 * @providesModule ReactEventEmitter                                                                                   // 7602
 * @typechecks static-only                                                                                             // 7603
 */                                                                                                                    // 7604
                                                                                                                       // 7605
"use strict";                                                                                                          // 7606
                                                                                                                       // 7607
var EventConstants = require("./EventConstants");                                                                      // 7608
var EventListener = require("./EventListener");                                                                        // 7609
var EventPluginHub = require("./EventPluginHub");                                                                      // 7610
var ExecutionEnvironment = require("./ExecutionEnvironment");                                                          // 7611
var ReactEventEmitterMixin = require("./ReactEventEmitterMixin");                                                      // 7612
var ViewportMetrics = require("./ViewportMetrics");                                                                    // 7613
                                                                                                                       // 7614
var invariant = require("./invariant");                                                                                // 7615
var isEventSupported = require("./isEventSupported");                                                                  // 7616
var merge = require("./merge");                                                                                        // 7617
                                                                                                                       // 7618
/**                                                                                                                    // 7619
 * Summary of `ReactEventEmitter` event handling:                                                                      // 7620
 *                                                                                                                     // 7621
 *  - Top-level delegation is used to trap native browser events. We normalize                                         // 7622
 *    and de-duplicate events to account for browser quirks.                                                           // 7623
 *                                                                                                                     // 7624
 *  - Forward these native events (with the associated top-level type used to                                          // 7625
 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want                                        // 7626
 *    to extract any synthetic events.                                                                                 // 7627
 *                                                                                                                     // 7628
 *  - The `EventPluginHub` will then process each event by annotating them with                                        // 7629
 *    "dispatches", a sequence of listeners and IDs that care about that event.                                        // 7630
 *                                                                                                                     // 7631
 *  - The `EventPluginHub` then dispatches the events.                                                                 // 7632
 *                                                                                                                     // 7633
 * Overview of React and the event system:                                                                             // 7634
 *                                                                                                                     // 7635
 *                   .                                                                                                 // 7636
 * +------------+    .                                                                                                 // 7637
 * |    DOM     |    .                                                                                                 // 7638
 * +------------+    .                         +-----------+                                                           // 7639
 *       +           .               +--------+|SimpleEvent|                                                           // 7640
 *       |           .               |         |Plugin     |                                                           // 7641
 * +-----|------+    .               v         +-----------+                                                           // 7642
 * |     |      |    .    +--------------+                    +------------+                                           // 7643
 * |     +-----------.--->|EventPluginHub|                    |    Event   |                                           // 7644
 * |            |    .    |              |     +-----------+  | Propagators|                                           // 7645
 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|                                           // 7646
 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|                                           // 7647
 * |            |    .    |              |     +-----------+  |  utilities |                                           // 7648
 * |     +-----------.---------+         |                    +------------+                                           // 7649
 * |     |      |    .    +----|---------+                                                                             // 7650
 * +-----|------+    .         |      ^        +-----------+                                                           // 7651
 *       |           .         |      |        |Enter/Leave|                                                           // 7652
 *       +           .         |      +-------+|Plugin     |                                                           // 7653
 * +-------------+   .         v               +-----------+                                                           // 7654
 * | application |   .    +----------+                                                                                 // 7655
 * |-------------|   .    | callback |                                                                                 // 7656
 * |             |   .    | registry |                                                                                 // 7657
 * |             |   .    +----------+                                                                                 // 7658
 * +-------------+   .                                                                                                 // 7659
 *                   .                                                                                                 // 7660
 *    React Core     .  General Purpose Event Plugin System                                                            // 7661
 */                                                                                                                    // 7662
                                                                                                                       // 7663
/**                                                                                                                    // 7664
 * Traps top-level events by using event bubbling.                                                                     // 7665
 *                                                                                                                     // 7666
 * @param {string} topLevelType Record from `EventConstants`.                                                          // 7667
 * @param {string} handlerBaseName Event name (e.g. "click").                                                          // 7668
 * @param {DOMEventTarget} element Element on which to attach listener.                                                // 7669
 * @internal                                                                                                           // 7670
 */                                                                                                                    // 7671
function trapBubbledEvent(topLevelType, handlerBaseName, element) {                                                    // 7672
  EventListener.listen(                                                                                                // 7673
    element,                                                                                                           // 7674
    handlerBaseName,                                                                                                   // 7675
    ReactEventEmitter.TopLevelCallbackCreator.createTopLevelCallback(                                                  // 7676
      topLevelType                                                                                                     // 7677
    )                                                                                                                  // 7678
  );                                                                                                                   // 7679
}                                                                                                                      // 7680
                                                                                                                       // 7681
/**                                                                                                                    // 7682
 * Traps a top-level event by using event capturing.                                                                   // 7683
 *                                                                                                                     // 7684
 * @param {string} topLevelType Record from `EventConstants`.                                                          // 7685
 * @param {string} handlerBaseName Event name (e.g. "click").                                                          // 7686
 * @param {DOMEventTarget} element Element on which to attach listener.                                                // 7687
 * @internal                                                                                                           // 7688
 */                                                                                                                    // 7689
function trapCapturedEvent(topLevelType, handlerBaseName, element) {                                                   // 7690
  EventListener.capture(                                                                                               // 7691
    element,                                                                                                           // 7692
    handlerBaseName,                                                                                                   // 7693
    ReactEventEmitter.TopLevelCallbackCreator.createTopLevelCallback(                                                  // 7694
      topLevelType                                                                                                     // 7695
    )                                                                                                                  // 7696
  );                                                                                                                   // 7697
}                                                                                                                      // 7698
                                                                                                                       // 7699
/**                                                                                                                    // 7700
 * Listens to window scroll and resize events. We cache scroll values so that                                          // 7701
 * application code can access them without triggering reflows.                                                        // 7702
 *                                                                                                                     // 7703
 * NOTE: Scroll events do not bubble.                                                                                  // 7704
 *                                                                                                                     // 7705
 * @private                                                                                                            // 7706
 * @see http://www.quirksmode.org/dom/events/scroll.html                                                               // 7707
 */                                                                                                                    // 7708
function registerScrollValueMonitoring() {                                                                             // 7709
  var refresh = ViewportMetrics.refreshScrollValues;                                                                   // 7710
  EventListener.listen(window, 'scroll', refresh);                                                                     // 7711
  EventListener.listen(window, 'resize', refresh);                                                                     // 7712
}                                                                                                                      // 7713
                                                                                                                       // 7714
/**                                                                                                                    // 7715
 * `ReactEventEmitter` is used to attach top-level event listeners. For example:                                       // 7716
 *                                                                                                                     // 7717
 *   ReactEventEmitter.putListener('myID', 'onClick', myFunction);                                                     // 7718
 *                                                                                                                     // 7719
 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.                                        // 7720
 *                                                                                                                     // 7721
 * @internal                                                                                                           // 7722
 */                                                                                                                    // 7723
var ReactEventEmitter = merge(ReactEventEmitterMixin, {                                                                // 7724
                                                                                                                       // 7725
  /**                                                                                                                  // 7726
   * React references `ReactEventTopLevelCallback` using this property in order                                        // 7727
   * to allow dependency injection.                                                                                    // 7728
   */                                                                                                                  // 7729
  TopLevelCallbackCreator: null,                                                                                       // 7730
                                                                                                                       // 7731
  /**                                                                                                                  // 7732
   * Ensures that top-level event delegation listeners are installed.                                                  // 7733
   *                                                                                                                   // 7734
   * There are issues with listening to both touch events and mouse events on                                          // 7735
   * the top-level, so we make the caller choose which one to listen to. (If                                           // 7736
   * there's a touch top-level listeners, anchors don't receive clicks for some                                        // 7737
   * reason, and only in some cases).                                                                                  // 7738
   *                                                                                                                   // 7739
   * @param {boolean} touchNotMouse Listen to touch events instead of mouse.                                           // 7740
   * @param {DOMDocument} contentDocument DOM document to listen on                                                    // 7741
   */                                                                                                                  // 7742
  ensureListening: function(touchNotMouse, contentDocument) {                                                          // 7743
    ("production" !== "development" ? invariant(                                                                       // 7744
      ExecutionEnvironment.canUseDOM,                                                                                  // 7745
      'ensureListening(...): Cannot toggle event listening in a Worker ' +                                             // 7746
      'thread. This is likely a bug in the framework. Please report ' +                                                // 7747
      'immediately.'                                                                                                   // 7748
    ) : invariant(ExecutionEnvironment.canUseDOM));                                                                    // 7749
    ("production" !== "development" ? invariant(                                                                       // 7750
      ReactEventEmitter.TopLevelCallbackCreator,                                                                       // 7751
      'ensureListening(...): Cannot be called without a top level callback ' +                                         // 7752
      'creator being injected.'                                                                                        // 7753
    ) : invariant(ReactEventEmitter.TopLevelCallbackCreator));                                                         // 7754
    // Call out to base implementation.                                                                                // 7755
    ReactEventEmitterMixin.ensureListening.call(                                                                       // 7756
      ReactEventEmitter,                                                                                               // 7757
      {                                                                                                                // 7758
        touchNotMouse: touchNotMouse,                                                                                  // 7759
        contentDocument: contentDocument                                                                               // 7760
      }                                                                                                                // 7761
    );                                                                                                                 // 7762
  },                                                                                                                   // 7763
                                                                                                                       // 7764
  /**                                                                                                                  // 7765
   * Sets whether or not any created callbacks should be enabled.                                                      // 7766
   *                                                                                                                   // 7767
   * @param {boolean} enabled True if callbacks should be enabled.                                                     // 7768
   */                                                                                                                  // 7769
  setEnabled: function(enabled) {                                                                                      // 7770
    ("production" !== "development" ? invariant(                                                                       // 7771
      ExecutionEnvironment.canUseDOM,                                                                                  // 7772
      'setEnabled(...): Cannot toggle event listening in a Worker thread. ' +                                          // 7773
      'This is likely a bug in the framework. Please report immediately.'                                              // 7774
    ) : invariant(ExecutionEnvironment.canUseDOM));                                                                    // 7775
    if (ReactEventEmitter.TopLevelCallbackCreator) {                                                                   // 7776
      ReactEventEmitter.TopLevelCallbackCreator.setEnabled(enabled);                                                   // 7777
    }                                                                                                                  // 7778
  },                                                                                                                   // 7779
                                                                                                                       // 7780
  /**                                                                                                                  // 7781
   * @return {boolean} True if callbacks are enabled.                                                                  // 7782
   */                                                                                                                  // 7783
  isEnabled: function() {                                                                                              // 7784
    return !!(                                                                                                         // 7785
      ReactEventEmitter.TopLevelCallbackCreator &&                                                                     // 7786
      ReactEventEmitter.TopLevelCallbackCreator.isEnabled()                                                            // 7787
    );                                                                                                                 // 7788
  },                                                                                                                   // 7789
                                                                                                                       // 7790
  /**                                                                                                                  // 7791
   * We listen for bubbled touch events on the document object.                                                        // 7792
   *                                                                                                                   // 7793
   * Firefox v8.01 (and possibly others) exhibited strange behavior when                                               // 7794
   * mounting `onmousemove` events at some node that was not the document                                              // 7795
   * element. The symptoms were that if your mouse is not moving over something                                        // 7796
   * contained within that mount point (for example on the background) the                                             // 7797
   * top-level listeners for `onmousemove` won't be called. However, if you                                            // 7798
   * register the `mousemove` on the document object, then it will of course                                           // 7799
   * catch all `mousemove`s. This along with iOS quirks, justifies restricting                                         // 7800
   * top-level listeners to the document object only, at least for these                                               // 7801
   * movement types of events and possibly all events.                                                                 // 7802
   *                                                                                                                   // 7803
   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html                                         // 7804
   *                                                                                                                   // 7805
   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but                                         // 7806
   * they bubble to document.                                                                                          // 7807
   *                                                                                                                   // 7808
   * @param {boolean} touchNotMouse Listen to touch events instead of mouse.                                           // 7809
   * @param {DOMDocument} contentDocument Document which owns the container                                            // 7810
   * @private                                                                                                          // 7811
   * @see http://www.quirksmode.org/dom/events/keys.html.                                                              // 7812
   */                                                                                                                  // 7813
  listenAtTopLevel: function(touchNotMouse, contentDocument) {                                                         // 7814
    ("production" !== "development" ? invariant(                                                                       // 7815
      !contentDocument._isListening,                                                                                   // 7816
      'listenAtTopLevel(...): Cannot setup top-level listener more than once.'                                         // 7817
    ) : invariant(!contentDocument._isListening));                                                                     // 7818
    var topLevelTypes = EventConstants.topLevelTypes;                                                                  // 7819
    var mountAt = contentDocument;                                                                                     // 7820
                                                                                                                       // 7821
    registerScrollValueMonitoring();                                                                                   // 7822
    trapBubbledEvent(topLevelTypes.topMouseOver, 'mouseover', mountAt);                                                // 7823
    trapBubbledEvent(topLevelTypes.topMouseDown, 'mousedown', mountAt);                                                // 7824
    trapBubbledEvent(topLevelTypes.topMouseUp, 'mouseup', mountAt);                                                    // 7825
    trapBubbledEvent(topLevelTypes.topMouseMove, 'mousemove', mountAt);                                                // 7826
    trapBubbledEvent(topLevelTypes.topMouseOut, 'mouseout', mountAt);                                                  // 7827
    trapBubbledEvent(topLevelTypes.topClick, 'click', mountAt);                                                        // 7828
    trapBubbledEvent(topLevelTypes.topDoubleClick, 'dblclick', mountAt);                                               // 7829
    trapBubbledEvent(topLevelTypes.topContextMenu, 'contextmenu', mountAt);                                            // 7830
    if (touchNotMouse) {                                                                                               // 7831
      trapBubbledEvent(topLevelTypes.topTouchStart, 'touchstart', mountAt);                                            // 7832
      trapBubbledEvent(topLevelTypes.topTouchEnd, 'touchend', mountAt);                                                // 7833
      trapBubbledEvent(topLevelTypes.topTouchMove, 'touchmove', mountAt);                                              // 7834
      trapBubbledEvent(topLevelTypes.topTouchCancel, 'touchcancel', mountAt);                                          // 7835
    }                                                                                                                  // 7836
    trapBubbledEvent(topLevelTypes.topKeyUp, 'keyup', mountAt);                                                        // 7837
    trapBubbledEvent(topLevelTypes.topKeyPress, 'keypress', mountAt);                                                  // 7838
    trapBubbledEvent(topLevelTypes.topKeyDown, 'keydown', mountAt);                                                    // 7839
    trapBubbledEvent(topLevelTypes.topInput, 'input', mountAt);                                                        // 7840
    trapBubbledEvent(topLevelTypes.topChange, 'change', mountAt);                                                      // 7841
    trapBubbledEvent(                                                                                                  // 7842
      topLevelTypes.topSelectionChange,                                                                                // 7843
      'selectionchange',                                                                                               // 7844
      mountAt                                                                                                          // 7845
    );                                                                                                                 // 7846
                                                                                                                       // 7847
    trapBubbledEvent(                                                                                                  // 7848
      topLevelTypes.topCompositionEnd,                                                                                 // 7849
      'compositionend',                                                                                                // 7850
      mountAt                                                                                                          // 7851
    );                                                                                                                 // 7852
    trapBubbledEvent(                                                                                                  // 7853
      topLevelTypes.topCompositionStart,                                                                               // 7854
      'compositionstart',                                                                                              // 7855
      mountAt                                                                                                          // 7856
    );                                                                                                                 // 7857
    trapBubbledEvent(                                                                                                  // 7858
      topLevelTypes.topCompositionUpdate,                                                                              // 7859
      'compositionupdate',                                                                                             // 7860
      mountAt                                                                                                          // 7861
    );                                                                                                                 // 7862
                                                                                                                       // 7863
    if (isEventSupported('drag')) {                                                                                    // 7864
      trapBubbledEvent(topLevelTypes.topDrag, 'drag', mountAt);                                                        // 7865
      trapBubbledEvent(topLevelTypes.topDragEnd, 'dragend', mountAt);                                                  // 7866
      trapBubbledEvent(topLevelTypes.topDragEnter, 'dragenter', mountAt);                                              // 7867
      trapBubbledEvent(topLevelTypes.topDragExit, 'dragexit', mountAt);                                                // 7868
      trapBubbledEvent(topLevelTypes.topDragLeave, 'dragleave', mountAt);                                              // 7869
      trapBubbledEvent(topLevelTypes.topDragOver, 'dragover', mountAt);                                                // 7870
      trapBubbledEvent(topLevelTypes.topDragStart, 'dragstart', mountAt);                                              // 7871
      trapBubbledEvent(topLevelTypes.topDrop, 'drop', mountAt);                                                        // 7872
    }                                                                                                                  // 7873
                                                                                                                       // 7874
    if (isEventSupported('wheel')) {                                                                                   // 7875
      trapBubbledEvent(topLevelTypes.topWheel, 'wheel', mountAt);                                                      // 7876
    } else if (isEventSupported('mousewheel')) {                                                                       // 7877
      trapBubbledEvent(topLevelTypes.topWheel, 'mousewheel', mountAt);                                                 // 7878
    } else {                                                                                                           // 7879
      // Firefox needs to capture a different mouse scroll event.                                                      // 7880
      // @see http://www.quirksmode.org/dom/events/tests/scroll.html                                                   // 7881
      trapBubbledEvent(topLevelTypes.topWheel, 'DOMMouseScroll', mountAt);                                             // 7882
    }                                                                                                                  // 7883
                                                                                                                       // 7884
    // IE<9 does not support capturing so just trap the bubbled event there.                                           // 7885
    if (isEventSupported('scroll', true)) {                                                                            // 7886
      trapCapturedEvent(topLevelTypes.topScroll, 'scroll', mountAt);                                                   // 7887
    } else {                                                                                                           // 7888
      trapBubbledEvent(topLevelTypes.topScroll, 'scroll', window);                                                     // 7889
    }                                                                                                                  // 7890
                                                                                                                       // 7891
    if (isEventSupported('focus', true)) {                                                                             // 7892
      trapCapturedEvent(topLevelTypes.topFocus, 'focus', mountAt);                                                     // 7893
      trapCapturedEvent(topLevelTypes.topBlur, 'blur', mountAt);                                                       // 7894
    } else if (isEventSupported('focusin')) {                                                                          // 7895
      // IE has `focusin` and `focusout` events which bubble.                                                          // 7896
      // @see                                                                                                          // 7897
      // http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html                                           // 7898
      trapBubbledEvent(topLevelTypes.topFocus, 'focusin', mountAt);                                                    // 7899
      trapBubbledEvent(topLevelTypes.topBlur, 'focusout', mountAt);                                                    // 7900
    }                                                                                                                  // 7901
                                                                                                                       // 7902
    if (isEventSupported('copy')) {                                                                                    // 7903
      trapBubbledEvent(topLevelTypes.topCopy, 'copy', mountAt);                                                        // 7904
      trapBubbledEvent(topLevelTypes.topCut, 'cut', mountAt);                                                          // 7905
      trapBubbledEvent(topLevelTypes.topPaste, 'paste', mountAt);                                                      // 7906
    }                                                                                                                  // 7907
  },                                                                                                                   // 7908
                                                                                                                       // 7909
  registrationNames: EventPluginHub.registrationNames,                                                                 // 7910
                                                                                                                       // 7911
  putListener: EventPluginHub.putListener,                                                                             // 7912
                                                                                                                       // 7913
  getListener: EventPluginHub.getListener,                                                                             // 7914
                                                                                                                       // 7915
  deleteListener: EventPluginHub.deleteListener,                                                                       // 7916
                                                                                                                       // 7917
  deleteAllListeners: EventPluginHub.deleteAllListeners,                                                               // 7918
                                                                                                                       // 7919
  trapBubbledEvent: trapBubbledEvent,                                                                                  // 7920
                                                                                                                       // 7921
  trapCapturedEvent: trapCapturedEvent                                                                                 // 7922
                                                                                                                       // 7923
});                                                                                                                    // 7924
                                                                                                                       // 7925
                                                                                                                       // 7926
module.exports = ReactEventEmitter;                                                                                    // 7927
                                                                                                                       // 7928
},{"./EventConstants":15,"./EventListener":16,"./EventPluginHub":17,"./ExecutionEnvironment":21,"./ReactEventEmitterMixin":48,"./ViewportMetrics":84,"./invariant":109,"./isEventSupported":110,"./merge":118}],48:[function(require,module,exports){
/**                                                                                                                    // 7930
 * Copyright 2013 Facebook, Inc.                                                                                       // 7931
 *                                                                                                                     // 7932
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 7933
 * you may not use this file except in compliance with the License.                                                    // 7934
 * You may obtain a copy of the License at                                                                             // 7935
 *                                                                                                                     // 7936
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 7937
 *                                                                                                                     // 7938
 * Unless required by applicable law or agreed to in writing, software                                                 // 7939
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 7940
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 7941
 * See the License for the specific language governing permissions and                                                 // 7942
 * limitations under the License.                                                                                      // 7943
 *                                                                                                                     // 7944
 * @providesModule ReactEventEmitterMixin                                                                              // 7945
 */                                                                                                                    // 7946
                                                                                                                       // 7947
"use strict";                                                                                                          // 7948
                                                                                                                       // 7949
var EventPluginHub = require("./EventPluginHub");                                                                      // 7950
var ReactUpdates = require("./ReactUpdates");                                                                          // 7951
                                                                                                                       // 7952
function runEventQueueInBatch(events) {                                                                                // 7953
  EventPluginHub.enqueueEvents(events);                                                                                // 7954
  EventPluginHub.processEventQueue();                                                                                  // 7955
}                                                                                                                      // 7956
                                                                                                                       // 7957
var ReactEventEmitterMixin = {                                                                                         // 7958
  /**                                                                                                                  // 7959
   * Whether or not `ensureListening` has been invoked.                                                                // 7960
   * @type {boolean}                                                                                                   // 7961
   * @private                                                                                                          // 7962
   */                                                                                                                  // 7963
  _isListening: false,                                                                                                 // 7964
                                                                                                                       // 7965
  /**                                                                                                                  // 7966
   * Function, must be implemented. Listens to events on the top level of the                                          // 7967
   * application.                                                                                                      // 7968
   *                                                                                                                   // 7969
   * @abstract                                                                                                         // 7970
   *                                                                                                                   // 7971
   * listenAtTopLevel: null,                                                                                           // 7972
   */                                                                                                                  // 7973
                                                                                                                       // 7974
  /**                                                                                                                  // 7975
   * Ensures that top-level event delegation listeners are installed.                                                  // 7976
   *                                                                                                                   // 7977
   * There are issues with listening to both touch events and mouse events on                                          // 7978
   * the top-level, so we make the caller choose which one to listen to. (If                                           // 7979
   * there's a touch top-level listeners, anchors don't receive clicks for some                                        // 7980
   * reason, and only in some cases).                                                                                  // 7981
   *                                                                                                                   // 7982
   * @param {*} config Configuration passed through to `listenAtTopLevel`.                                             // 7983
   */                                                                                                                  // 7984
  ensureListening: function(config) {                                                                                  // 7985
    if (!config.contentDocument._reactIsListening) {                                                                   // 7986
      this.listenAtTopLevel(config.touchNotMouse, config.contentDocument);                                             // 7987
      config.contentDocument._reactIsListening = true;                                                                 // 7988
    }                                                                                                                  // 7989
  },                                                                                                                   // 7990
                                                                                                                       // 7991
  /**                                                                                                                  // 7992
   * Streams a fired top-level event to `EventPluginHub` where plugins have the                                        // 7993
   * opportunity to create `ReactEvent`s to be dispatched.                                                             // 7994
   *                                                                                                                   // 7995
   * @param {string} topLevelType Record from `EventConstants`.                                                        // 7996
   * @param {object} topLevelTarget The listening component root node.                                                 // 7997
   * @param {string} topLevelTargetID ID of `topLevelTarget`.                                                          // 7998
   * @param {object} nativeEvent Native environment event.                                                             // 7999
   */                                                                                                                  // 8000
  handleTopLevel: function(                                                                                            // 8001
      topLevelType,                                                                                                    // 8002
      topLevelTarget,                                                                                                  // 8003
      topLevelTargetID,                                                                                                // 8004
      nativeEvent) {                                                                                                   // 8005
    var events = EventPluginHub.extractEvents(                                                                         // 8006
      topLevelType,                                                                                                    // 8007
      topLevelTarget,                                                                                                  // 8008
      topLevelTargetID,                                                                                                // 8009
      nativeEvent                                                                                                      // 8010
    );                                                                                                                 // 8011
                                                                                                                       // 8012
    // Event queue being processed in the same cycle allows `preventDefault`.                                          // 8013
    ReactUpdates.batchedUpdates(runEventQueueInBatch, events);                                                         // 8014
  }                                                                                                                    // 8015
};                                                                                                                     // 8016
                                                                                                                       // 8017
module.exports = ReactEventEmitterMixin;                                                                               // 8018
                                                                                                                       // 8019
},{"./EventPluginHub":17,"./ReactUpdates":70}],49:[function(require,module,exports){                                   // 8020
/**                                                                                                                    // 8021
 * Copyright 2013 Facebook, Inc.                                                                                       // 8022
 *                                                                                                                     // 8023
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 8024
 * you may not use this file except in compliance with the License.                                                    // 8025
 * You may obtain a copy of the License at                                                                             // 8026
 *                                                                                                                     // 8027
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 8028
 *                                                                                                                     // 8029
 * Unless required by applicable law or agreed to in writing, software                                                 // 8030
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 8031
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 8032
 * See the License for the specific language governing permissions and                                                 // 8033
 * limitations under the License.                                                                                      // 8034
 *                                                                                                                     // 8035
 * @providesModule ReactEventTopLevelCallback                                                                          // 8036
 * @typechecks static-only                                                                                             // 8037
 */                                                                                                                    // 8038
                                                                                                                       // 8039
"use strict";                                                                                                          // 8040
                                                                                                                       // 8041
var ReactEventEmitter = require("./ReactEventEmitter");                                                                // 8042
var ReactMount = require("./ReactMount");                                                                              // 8043
                                                                                                                       // 8044
var getEventTarget = require("./getEventTarget");                                                                      // 8045
                                                                                                                       // 8046
/**                                                                                                                    // 8047
 * @type {boolean}                                                                                                     // 8048
 * @private                                                                                                            // 8049
 */                                                                                                                    // 8050
var _topLevelListenersEnabled = true;                                                                                  // 8051
                                                                                                                       // 8052
/**                                                                                                                    // 8053
 * Top-level callback creator used to implement event handling using delegation.                                       // 8054
 * This is used via dependency injection.                                                                              // 8055
 */                                                                                                                    // 8056
var ReactEventTopLevelCallback = {                                                                                     // 8057
                                                                                                                       // 8058
  /**                                                                                                                  // 8059
   * Sets whether or not any created callbacks should be enabled.                                                      // 8060
   *                                                                                                                   // 8061
   * @param {boolean} enabled True if callbacks should be enabled.                                                     // 8062
   */                                                                                                                  // 8063
  setEnabled: function(enabled) {                                                                                      // 8064
    _topLevelListenersEnabled = !!enabled;                                                                             // 8065
  },                                                                                                                   // 8066
                                                                                                                       // 8067
  /**                                                                                                                  // 8068
   * @return {boolean} True if callbacks are enabled.                                                                  // 8069
   */                                                                                                                  // 8070
  isEnabled: function() {                                                                                              // 8071
    return _topLevelListenersEnabled;                                                                                  // 8072
  },                                                                                                                   // 8073
                                                                                                                       // 8074
  /**                                                                                                                  // 8075
   * Creates a callback for the supplied `topLevelType` that could be added as                                         // 8076
   * a listener to the document. The callback computes a `topLevelTarget` which                                        // 8077
   * should be the root node of a mounted React component where the listener                                           // 8078
   * is attached.                                                                                                      // 8079
   *                                                                                                                   // 8080
   * @param {string} topLevelType Record from `EventConstants`.                                                        // 8081
   * @return {function} Callback for handling top-level events.                                                        // 8082
   */                                                                                                                  // 8083
  createTopLevelCallback: function(topLevelType) {                                                                     // 8084
    return function(nativeEvent) {                                                                                     // 8085
      if (!_topLevelListenersEnabled) {                                                                                // 8086
        return;                                                                                                        // 8087
      }                                                                                                                // 8088
      // TODO: Remove when synthetic events are ready, this is for IE<9.                                               // 8089
      if (nativeEvent.srcElement &&                                                                                    // 8090
          nativeEvent.srcElement !== nativeEvent.target) {                                                             // 8091
        nativeEvent.target = nativeEvent.srcElement;                                                                   // 8092
      }                                                                                                                // 8093
      var topLevelTarget = ReactMount.getFirstReactDOM(                                                                // 8094
        getEventTarget(nativeEvent)                                                                                    // 8095
      ) || window;                                                                                                     // 8096
      var topLevelTargetID = ReactMount.getID(topLevelTarget) || '';                                                   // 8097
      ReactEventEmitter.handleTopLevel(                                                                                // 8098
        topLevelType,                                                                                                  // 8099
        topLevelTarget,                                                                                                // 8100
        topLevelTargetID,                                                                                              // 8101
        nativeEvent                                                                                                    // 8102
      );                                                                                                               // 8103
    };                                                                                                                 // 8104
  }                                                                                                                    // 8105
                                                                                                                       // 8106
};                                                                                                                     // 8107
                                                                                                                       // 8108
module.exports = ReactEventTopLevelCallback;                                                                           // 8109
                                                                                                                       // 8110
},{"./ReactEventEmitter":47,"./ReactMount":54,"./getEventTarget":102}],50:[function(require,module,exports){           // 8111
/**                                                                                                                    // 8112
 * Copyright 2013 Facebook, Inc.                                                                                       // 8113
 *                                                                                                                     // 8114
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 8115
 * you may not use this file except in compliance with the License.                                                    // 8116
 * You may obtain a copy of the License at                                                                             // 8117
 *                                                                                                                     // 8118
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 8119
 *                                                                                                                     // 8120
 * Unless required by applicable law or agreed to in writing, software                                                 // 8121
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 8122
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 8123
 * See the License for the specific language governing permissions and                                                 // 8124
 * limitations under the License.                                                                                      // 8125
 *                                                                                                                     // 8126
 * @providesModule ReactInputSelection                                                                                 // 8127
 */                                                                                                                    // 8128
                                                                                                                       // 8129
"use strict";                                                                                                          // 8130
                                                                                                                       // 8131
var ReactDOMSelection = require("./ReactDOMSelection");                                                                // 8132
                                                                                                                       // 8133
var containsNode = require("./containsNode");                                                                          // 8134
var getActiveElement = require("./getActiveElement");                                                                  // 8135
                                                                                                                       // 8136
function isInDocument(node) {                                                                                          // 8137
  return containsNode(document.documentElement, node);                                                                 // 8138
}                                                                                                                      // 8139
                                                                                                                       // 8140
/**                                                                                                                    // 8141
 * @ReactInputSelection: React input selection module. Based on Selection.js,                                          // 8142
 * but modified to be suitable for react and has a couple of bug fixes (doesn't                                        // 8143
 * assume buttons have range selections allowed).                                                                      // 8144
 * Input selection module for React.                                                                                   // 8145
 */                                                                                                                    // 8146
var ReactInputSelection = {                                                                                            // 8147
                                                                                                                       // 8148
  hasSelectionCapabilities: function(elem) {                                                                           // 8149
    return elem && (                                                                                                   // 8150
      (elem.nodeName === 'INPUT' && elem.type === 'text') ||                                                           // 8151
      elem.nodeName === 'TEXTAREA' ||                                                                                  // 8152
      elem.contentEditable === 'true'                                                                                  // 8153
    );                                                                                                                 // 8154
  },                                                                                                                   // 8155
                                                                                                                       // 8156
  getSelectionInformation: function() {                                                                                // 8157
    var focusedElem = getActiveElement();                                                                              // 8158
    return {                                                                                                           // 8159
      focusedElem: focusedElem,                                                                                        // 8160
      selectionRange:                                                                                                  // 8161
          ReactInputSelection.hasSelectionCapabilities(focusedElem) ?                                                  // 8162
          ReactInputSelection.getSelection(focusedElem) :                                                              // 8163
          null                                                                                                         // 8164
    };                                                                                                                 // 8165
  },                                                                                                                   // 8166
                                                                                                                       // 8167
  /**                                                                                                                  // 8168
   * @restoreSelection: If any selection information was potentially lost,                                             // 8169
   * restore it. This is useful when performing operations that could remove dom                                       // 8170
   * nodes and place them back in, resulting in focus being lost.                                                      // 8171
   */                                                                                                                  // 8172
  restoreSelection: function(priorSelectionInformation) {                                                              // 8173
    var curFocusedElem = getActiveElement();                                                                           // 8174
    var priorFocusedElem = priorSelectionInformation.focusedElem;                                                      // 8175
    var priorSelectionRange = priorSelectionInformation.selectionRange;                                                // 8176
    if (curFocusedElem !== priorFocusedElem &&                                                                         // 8177
        isInDocument(priorFocusedElem)) {                                                                              // 8178
      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {                                            // 8179
        ReactInputSelection.setSelection(                                                                              // 8180
          priorFocusedElem,                                                                                            // 8181
          priorSelectionRange                                                                                          // 8182
        );                                                                                                             // 8183
      }                                                                                                                // 8184
      priorFocusedElem.focus();                                                                                        // 8185
    }                                                                                                                  // 8186
  },                                                                                                                   // 8187
                                                                                                                       // 8188
  /**                                                                                                                  // 8189
   * @getSelection: Gets the selection bounds of a focused textarea, input or                                          // 8190
   * contentEditable node.                                                                                             // 8191
   * -@input: Look up selection bounds of this input                                                                   // 8192
   * -@return {start: selectionStart, end: selectionEnd}                                                               // 8193
   */                                                                                                                  // 8194
  getSelection: function(input) {                                                                                      // 8195
    var selection;                                                                                                     // 8196
                                                                                                                       // 8197
    if ('selectionStart' in input) {                                                                                   // 8198
      // Modern browser with input or textarea.                                                                        // 8199
      selection = {                                                                                                    // 8200
        start: input.selectionStart,                                                                                   // 8201
        end: input.selectionEnd                                                                                        // 8202
      };                                                                                                               // 8203
    } else if (document.selection && input.nodeName === 'INPUT') {                                                     // 8204
      // IE8 input.                                                                                                    // 8205
      var range = document.selection.createRange();                                                                    // 8206
      // There can only be one selection per document in IE, so it must                                                // 8207
      // be in our element.                                                                                            // 8208
      if (range.parentElement() === input) {                                                                           // 8209
        selection = {                                                                                                  // 8210
          start: -range.moveStart('character', -input.value.length),                                                   // 8211
          end: -range.moveEnd('character', -input.value.length)                                                        // 8212
        };                                                                                                             // 8213
      }                                                                                                                // 8214
    } else {                                                                                                           // 8215
      // Content editable or old IE textarea.                                                                          // 8216
      selection = ReactDOMSelection.getOffsets(input);                                                                 // 8217
    }                                                                                                                  // 8218
                                                                                                                       // 8219
    return selection || {start: 0, end: 0};                                                                            // 8220
  },                                                                                                                   // 8221
                                                                                                                       // 8222
  /**                                                                                                                  // 8223
   * @setSelection: Sets the selection bounds of a textarea or input and focuses                                       // 8224
   * the input.                                                                                                        // 8225
   * -@input     Set selection bounds of this input or textarea                                                        // 8226
   * -@offsets   Object of same form that is returned from get*                                                        // 8227
   */                                                                                                                  // 8228
  setSelection: function(input, offsets) {                                                                             // 8229
    var start = offsets.start;                                                                                         // 8230
    var end = offsets.end;                                                                                             // 8231
    if (typeof end === 'undefined') {                                                                                  // 8232
      end = start;                                                                                                     // 8233
    }                                                                                                                  // 8234
                                                                                                                       // 8235
    if ('selectionStart' in input) {                                                                                   // 8236
      input.selectionStart = start;                                                                                    // 8237
      input.selectionEnd = Math.min(end, input.value.length);                                                          // 8238
    } else if (document.selection && input.nodeName === 'INPUT') {                                                     // 8239
      var range = input.createTextRange();                                                                             // 8240
      range.collapse(true);                                                                                            // 8241
      range.moveStart('character', start);                                                                             // 8242
      range.moveEnd('character', end - start);                                                                         // 8243
      range.select();                                                                                                  // 8244
    } else {                                                                                                           // 8245
      ReactDOMSelection.setOffsets(input, offsets);                                                                    // 8246
    }                                                                                                                  // 8247
  }                                                                                                                    // 8248
};                                                                                                                     // 8249
                                                                                                                       // 8250
module.exports = ReactInputSelection;                                                                                  // 8251
                                                                                                                       // 8252
},{"./ReactDOMSelection":41,"./containsNode":87,"./getActiveElement":101}],51:[function(require,module,exports){       // 8253
/**                                                                                                                    // 8254
 * Copyright 2013 Facebook, Inc.                                                                                       // 8255
 *                                                                                                                     // 8256
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 8257
 * you may not use this file except in compliance with the License.                                                    // 8258
 * You may obtain a copy of the License at                                                                             // 8259
 *                                                                                                                     // 8260
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 8261
 *                                                                                                                     // 8262
 * Unless required by applicable law or agreed to in writing, software                                                 // 8263
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 8264
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 8265
 * See the License for the specific language governing permissions and                                                 // 8266
 * limitations under the License.                                                                                      // 8267
 *                                                                                                                     // 8268
 * @providesModule ReactInstanceHandles                                                                                // 8269
 * @typechecks static-only                                                                                             // 8270
 */                                                                                                                    // 8271
                                                                                                                       // 8272
"use strict";                                                                                                          // 8273
                                                                                                                       // 8274
var invariant = require("./invariant");                                                                                // 8275
                                                                                                                       // 8276
var SEPARATOR = '.';                                                                                                   // 8277
var SEPARATOR_LENGTH = SEPARATOR.length;                                                                               // 8278
                                                                                                                       // 8279
/**                                                                                                                    // 8280
 * Maximum depth of traversals before we consider the possibility of a bad ID.                                         // 8281
 */                                                                                                                    // 8282
var MAX_TREE_DEPTH = 100;                                                                                              // 8283
                                                                                                                       // 8284
/**                                                                                                                    // 8285
 * Size of the reactRoot ID space. We generate random numbers for React root                                           // 8286
 * IDs and if there's a collision the events and DOM update system will                                                // 8287
 * get confused. If we assume 100 React components per page, and a user                                                // 8288
 * loads 1 page per minute 24/7 for 50 years, with a mount point space of                                              // 8289
 * 9,999,999 the likelihood of never having a collision is 99.997%.                                                    // 8290
 */                                                                                                                    // 8291
var GLOBAL_MOUNT_POINT_MAX = 9999999;                                                                                  // 8292
                                                                                                                       // 8293
/**                                                                                                                    // 8294
 * Creates a DOM ID prefix to use when mounting React components.                                                      // 8295
 *                                                                                                                     // 8296
 * @param {number} index A unique integer                                                                              // 8297
 * @return {string} React root ID.                                                                                     // 8298
 * @internal                                                                                                           // 8299
 */                                                                                                                    // 8300
function getReactRootIDString(index) {                                                                                 // 8301
  return SEPARATOR + 'r[' + index.toString(36) + ']';                                                                  // 8302
}                                                                                                                      // 8303
                                                                                                                       // 8304
/**                                                                                                                    // 8305
 * Checks if a character in the supplied ID is a separator or the end.                                                 // 8306
 *                                                                                                                     // 8307
 * @param {string} id A React DOM ID.                                                                                  // 8308
 * @param {number} index Index of the character to check.                                                              // 8309
 * @return {boolean} True if the character is a separator or end of the ID.                                            // 8310
 * @private                                                                                                            // 8311
 */                                                                                                                    // 8312
function isBoundary(id, index) {                                                                                       // 8313
  return id.charAt(index) === SEPARATOR || index === id.length;                                                        // 8314
}                                                                                                                      // 8315
                                                                                                                       // 8316
/**                                                                                                                    // 8317
 * Checks if the supplied string is a valid React DOM ID.                                                              // 8318
 *                                                                                                                     // 8319
 * @param {string} id A React DOM ID, maybe.                                                                           // 8320
 * @return {boolean} True if the string is a valid React DOM ID.                                                       // 8321
 * @private                                                                                                            // 8322
 */                                                                                                                    // 8323
function isValidID(id) {                                                                                               // 8324
  return id === '' || (                                                                                                // 8325
    id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR                                               // 8326
  );                                                                                                                   // 8327
}                                                                                                                      // 8328
                                                                                                                       // 8329
/**                                                                                                                    // 8330
 * Checks if the first ID is an ancestor of or equal to the second ID.                                                 // 8331
 *                                                                                                                     // 8332
 * @param {string} ancestorID                                                                                          // 8333
 * @param {string} descendantID                                                                                        // 8334
 * @return {boolean} True if `ancestorID` is an ancestor of `descendantID`.                                            // 8335
 * @internal                                                                                                           // 8336
 */                                                                                                                    // 8337
function isAncestorIDOf(ancestorID, descendantID) {                                                                    // 8338
  return (                                                                                                             // 8339
    descendantID.indexOf(ancestorID) === 0 &&                                                                          // 8340
    isBoundary(descendantID, ancestorID.length)                                                                        // 8341
  );                                                                                                                   // 8342
}                                                                                                                      // 8343
                                                                                                                       // 8344
/**                                                                                                                    // 8345
 * Gets the parent ID of the supplied React DOM ID, `id`.                                                              // 8346
 *                                                                                                                     // 8347
 * @param {string} id ID of a component.                                                                               // 8348
 * @return {string} ID of the parent, or an empty string.                                                              // 8349
 * @private                                                                                                            // 8350
 */                                                                                                                    // 8351
function getParentID(id) {                                                                                             // 8352
  return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';                                                            // 8353
}                                                                                                                      // 8354
                                                                                                                       // 8355
/**                                                                                                                    // 8356
 * Gets the next DOM ID on the tree path from the supplied `ancestorID` to the                                         // 8357
 * supplied `destinationID`. If they are equal, the ID is returned.                                                    // 8358
 *                                                                                                                     // 8359
 * @param {string} ancestorID ID of an ancestor node of `destinationID`.                                               // 8360
 * @param {string} destinationID ID of the destination node.                                                           // 8361
 * @return {string} Next ID on the path from `ancestorID` to `destinationID`.                                          // 8362
 * @private                                                                                                            // 8363
 */                                                                                                                    // 8364
function getNextDescendantID(ancestorID, destinationID) {                                                              // 8365
  ("production" !== "development" ? invariant(                                                                         // 8366
    isValidID(ancestorID) && isValidID(destinationID),                                                                 // 8367
    'getNextDescendantID(%s, %s): Received an invalid React DOM ID.',                                                  // 8368
    ancestorID,                                                                                                        // 8369
    destinationID                                                                                                      // 8370
  ) : invariant(isValidID(ancestorID) && isValidID(destinationID)));                                                   // 8371
  ("production" !== "development" ? invariant(                                                                         // 8372
    isAncestorIDOf(ancestorID, destinationID),                                                                         // 8373
    'getNextDescendantID(...): React has made an invalid assumption about ' +                                          // 8374
    'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.',                                                     // 8375
    ancestorID,                                                                                                        // 8376
    destinationID                                                                                                      // 8377
  ) : invariant(isAncestorIDOf(ancestorID, destinationID)));                                                           // 8378
  if (ancestorID === destinationID) {                                                                                  // 8379
    return ancestorID;                                                                                                 // 8380
  }                                                                                                                    // 8381
  // Skip over the ancestor and the immediate separator. Traverse until we hit                                         // 8382
  // another separator or we reach the end of `destinationID`.                                                         // 8383
  var start = ancestorID.length + SEPARATOR_LENGTH;                                                                    // 8384
  for (var i = start; i < destinationID.length; i++) {                                                                 // 8385
    if (isBoundary(destinationID, i)) {                                                                                // 8386
      break;                                                                                                           // 8387
    }                                                                                                                  // 8388
  }                                                                                                                    // 8389
  return destinationID.substr(0, i);                                                                                   // 8390
}                                                                                                                      // 8391
                                                                                                                       // 8392
/**                                                                                                                    // 8393
 * Gets the nearest common ancestor ID of two IDs.                                                                     // 8394
 *                                                                                                                     // 8395
 * Using this ID scheme, the nearest common ancestor ID is the longest common                                          // 8396
 * prefix of the two IDs that immediately preceded a "marker" in both strings.                                         // 8397
 *                                                                                                                     // 8398
 * @param {string} oneID                                                                                               // 8399
 * @param {string} twoID                                                                                               // 8400
 * @return {string} Nearest common ancestor ID, or the empty string if none.                                           // 8401
 * @private                                                                                                            // 8402
 */                                                                                                                    // 8403
function getFirstCommonAncestorID(oneID, twoID) {                                                                      // 8404
  var minLength = Math.min(oneID.length, twoID.length);                                                                // 8405
  if (minLength === 0) {                                                                                               // 8406
    return '';                                                                                                         // 8407
  }                                                                                                                    // 8408
  var lastCommonMarkerIndex = 0;                                                                                       // 8409
  // Use `<=` to traverse until the "EOL" of the shorter string.                                                       // 8410
  for (var i = 0; i <= minLength; i++) {                                                                               // 8411
    if (isBoundary(oneID, i) && isBoundary(twoID, i)) {                                                                // 8412
      lastCommonMarkerIndex = i;                                                                                       // 8413
    } else if (oneID.charAt(i) !== twoID.charAt(i)) {                                                                  // 8414
      break;                                                                                                           // 8415
    }                                                                                                                  // 8416
  }                                                                                                                    // 8417
  var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);                                                        // 8418
  ("production" !== "development" ? invariant(                                                                         // 8419
    isValidID(longestCommonID),                                                                                        // 8420
    'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s',                                             // 8421
    oneID,                                                                                                             // 8422
    twoID,                                                                                                             // 8423
    longestCommonID                                                                                                    // 8424
  ) : invariant(isValidID(longestCommonID)));                                                                          // 8425
  return longestCommonID;                                                                                              // 8426
}                                                                                                                      // 8427
                                                                                                                       // 8428
/**                                                                                                                    // 8429
 * Traverses the parent path between two IDs (either up or down). The IDs must                                         // 8430
 * not be the same, and there must exist a parent path between them.                                                   // 8431
 *                                                                                                                     // 8432
 * @param {?string} start ID at which to start traversal.                                                              // 8433
 * @param {?string} stop ID at which to end traversal.                                                                 // 8434
 * @param {function} cb Callback to invoke each ID with.                                                               // 8435
 * @param {?boolean} skipFirst Whether or not to skip the first node.                                                  // 8436
 * @param {?boolean} skipLast Whether or not to skip the last node.                                                    // 8437
 * @private                                                                                                            // 8438
 */                                                                                                                    // 8439
function traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {                                               // 8440
  start = start || '';                                                                                                 // 8441
  stop = stop || '';                                                                                                   // 8442
  ("production" !== "development" ? invariant(                                                                         // 8443
    start !== stop,                                                                                                    // 8444
    'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.',                                         // 8445
    start                                                                                                              // 8446
  ) : invariant(start !== stop));                                                                                      // 8447
  var traverseUp = isAncestorIDOf(stop, start);                                                                        // 8448
  ("production" !== "development" ? invariant(                                                                         // 8449
    traverseUp || isAncestorIDOf(start, stop),                                                                         // 8450
    'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' +                                         // 8451
    'not have a parent path.',                                                                                         // 8452
    start,                                                                                                             // 8453
    stop                                                                                                               // 8454
  ) : invariant(traverseUp || isAncestorIDOf(start, stop)));                                                           // 8455
  // Traverse from `start` to `stop` one depth at a time.                                                              // 8456
  var depth = 0;                                                                                                       // 8457
  var traverse = traverseUp ? getParentID : getNextDescendantID;                                                       // 8458
  for (var id = start; /* until break */; id = traverse(id, stop)) {                                                   // 8459
    if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {                                                  // 8460
      cb(id, traverseUp, arg);                                                                                         // 8461
    }                                                                                                                  // 8462
    if (id === stop) {                                                                                                 // 8463
      // Only break //after// visiting `stop`.                                                                         // 8464
      break;                                                                                                           // 8465
    }                                                                                                                  // 8466
    ("production" !== "development" ? invariant(                                                                       // 8467
      depth++ < MAX_TREE_DEPTH,                                                                                        // 8468
      'traverseParentPath(%s, %s, ...): Detected an infinite loop while ' +                                            // 8469
      'traversing the React DOM ID tree. This may be due to malformed IDs: %s',                                        // 8470
      start, stop                                                                                                      // 8471
    ) : invariant(depth++ < MAX_TREE_DEPTH));                                                                          // 8472
  }                                                                                                                    // 8473
}                                                                                                                      // 8474
                                                                                                                       // 8475
/**                                                                                                                    // 8476
 * Manages the IDs assigned to DOM representations of React components. This                                           // 8477
 * uses a specific scheme in order to traverse the DOM efficiently (e.g. in                                            // 8478
 * order to simulate events).                                                                                          // 8479
 *                                                                                                                     // 8480
 * @internal                                                                                                           // 8481
 */                                                                                                                    // 8482
var ReactInstanceHandles = {                                                                                           // 8483
                                                                                                                       // 8484
  createReactRootID: function() {                                                                                      // 8485
    return getReactRootIDString(                                                                                       // 8486
      Math.ceil(Math.random() * GLOBAL_MOUNT_POINT_MAX)                                                                // 8487
    );                                                                                                                 // 8488
  },                                                                                                                   // 8489
                                                                                                                       // 8490
  /**                                                                                                                  // 8491
   * Constructs a React ID by joining a root ID with a name.                                                           // 8492
   *                                                                                                                   // 8493
   * @param {string} rootID Root ID of a parent component.                                                             // 8494
   * @param {string} name A component's name (as flattened children).                                                  // 8495
   * @return {string} A React ID.                                                                                      // 8496
   * @internal                                                                                                         // 8497
   */                                                                                                                  // 8498
  createReactID: function(rootID, name) {                                                                              // 8499
    return rootID + SEPARATOR + name;                                                                                  // 8500
  },                                                                                                                   // 8501
                                                                                                                       // 8502
  /**                                                                                                                  // 8503
   * Gets the DOM ID of the React component that is the root of the tree that                                          // 8504
   * contains the React component with the supplied DOM ID.                                                            // 8505
   *                                                                                                                   // 8506
   * @param {string} id DOM ID of a React component.                                                                   // 8507
   * @return {?string} DOM ID of the React component that is the root.                                                 // 8508
   * @internal                                                                                                         // 8509
   */                                                                                                                  // 8510
  getReactRootIDFromNodeID: function(id) {                                                                             // 8511
    var regexResult = /\.r\[[^\]]+\]/.exec(id);                                                                        // 8512
    return regexResult && regexResult[0];                                                                              // 8513
  },                                                                                                                   // 8514
                                                                                                                       // 8515
  /**                                                                                                                  // 8516
   * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that                                          // 8517
   * should would receive a `mouseEnter` or `mouseLeave` event.                                                        // 8518
   *                                                                                                                   // 8519
   * NOTE: Does not invoke the callback on the nearest common ancestor because                                         // 8520
   * nothing "entered" or "left" that element.                                                                         // 8521
   *                                                                                                                   // 8522
   * @param {string} leaveID ID being left.                                                                            // 8523
   * @param {string} enterID ID being entered.                                                                         // 8524
   * @param {function} cb Callback to invoke on each entered/left ID.                                                  // 8525
   * @param {*} upArg Argument to invoke the callback with on left IDs.                                                // 8526
   * @param {*} downArg Argument to invoke the callback with on entered IDs.                                           // 8527
   * @internal                                                                                                         // 8528
   */                                                                                                                  // 8529
  traverseEnterLeave: function(leaveID, enterID, cb, upArg, downArg) {                                                 // 8530
    var ancestorID = getFirstCommonAncestorID(leaveID, enterID);                                                       // 8531
    if (ancestorID !== leaveID) {                                                                                      // 8532
      traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);                                                 // 8533
    }                                                                                                                  // 8534
    if (ancestorID !== enterID) {                                                                                      // 8535
      traverseParentPath(ancestorID, enterID, cb, downArg, true, false);                                               // 8536
    }                                                                                                                  // 8537
  },                                                                                                                   // 8538
                                                                                                                       // 8539
  /**                                                                                                                  // 8540
   * Simulates the traversal of a two-phase, capture/bubble event dispatch.                                            // 8541
   *                                                                                                                   // 8542
   * NOTE: This traversal happens on IDs without touching the DOM.                                                     // 8543
   *                                                                                                                   // 8544
   * @param {string} targetID ID of the target node.                                                                   // 8545
   * @param {function} cb Callback to invoke.                                                                          // 8546
   * @param {*} arg Argument to invoke the callback with.                                                              // 8547
   * @internal                                                                                                         // 8548
   */                                                                                                                  // 8549
  traverseTwoPhase: function(targetID, cb, arg) {                                                                      // 8550
    if (targetID) {                                                                                                    // 8551
      traverseParentPath('', targetID, cb, arg, true, false);                                                          // 8552
      traverseParentPath(targetID, '', cb, arg, false, true);                                                          // 8553
    }                                                                                                                  // 8554
  },                                                                                                                   // 8555
                                                                                                                       // 8556
  /**                                                                                                                  // 8557
   * Exposed for unit testing.                                                                                         // 8558
   * @private                                                                                                          // 8559
   */                                                                                                                  // 8560
  _getFirstCommonAncestorID: getFirstCommonAncestorID,                                                                 // 8561
                                                                                                                       // 8562
  /**                                                                                                                  // 8563
   * Exposed for unit testing.                                                                                         // 8564
   * @private                                                                                                          // 8565
   */                                                                                                                  // 8566
  _getNextDescendantID: getNextDescendantID,                                                                           // 8567
                                                                                                                       // 8568
  isAncestorIDOf: isAncestorIDOf,                                                                                      // 8569
                                                                                                                       // 8570
  SEPARATOR: SEPARATOR                                                                                                 // 8571
                                                                                                                       // 8572
};                                                                                                                     // 8573
                                                                                                                       // 8574
module.exports = ReactInstanceHandles;                                                                                 // 8575
                                                                                                                       // 8576
},{"./invariant":109}],52:[function(require,module,exports){                                                           // 8577
/**                                                                                                                    // 8578
 * Copyright 2013 Facebook, Inc.                                                                                       // 8579
 *                                                                                                                     // 8580
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 8581
 * you may not use this file except in compliance with the License.                                                    // 8582
 * You may obtain a copy of the License at                                                                             // 8583
 *                                                                                                                     // 8584
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 8585
 *                                                                                                                     // 8586
 * Unless required by applicable law or agreed to in writing, software                                                 // 8587
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 8588
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 8589
 * See the License for the specific language governing permissions and                                                 // 8590
 * limitations under the License.                                                                                      // 8591
 *                                                                                                                     // 8592
 * @providesModule ReactLink                                                                                           // 8593
 * @typechecks static-only                                                                                             // 8594
 */                                                                                                                    // 8595
                                                                                                                       // 8596
"use strict";                                                                                                          // 8597
                                                                                                                       // 8598
/**                                                                                                                    // 8599
 * ReactLink encapsulates a common pattern in which a component wants to modify                                        // 8600
 * a prop received from its parent. ReactLink allows the parent to pass down a                                         // 8601
 * value coupled with a callback that, when invoked, expresses an intent to                                            // 8602
 * modify that value. For example:                                                                                     // 8603
 *                                                                                                                     // 8604
 * React.createClass({                                                                                                 // 8605
 *   getInitialState: function() {                                                                                     // 8606
 *     return {value: ''};                                                                                             // 8607
 *   },                                                                                                                // 8608
 *   render: function() {                                                                                              // 8609
 *     var valueLink = new ReactLink(this.state.value, this._handleValueChange);                                       // 8610
 *     return <input valueLink={valueLink} />;                                                                         // 8611
 *   },                                                                                                                // 8612
 *   this._handleValueChange: function(newValue) {                                                                     // 8613
 *     this.setState({value: newValue});                                                                               // 8614
 *   }                                                                                                                 // 8615
 * });                                                                                                                 // 8616
 *                                                                                                                     // 8617
 * We have provided some sugary mixins to make the creation and                                                        // 8618
 * consumption of ReactLink easier; see LinkedValueMixin and LinkedStateMixin.                                         // 8619
 */                                                                                                                    // 8620
                                                                                                                       // 8621
/**                                                                                                                    // 8622
 * @param {*} value current value of the link                                                                          // 8623
 * @param {function} requestChange callback to request a change                                                        // 8624
 */                                                                                                                    // 8625
function ReactLink(value, requestChange) {                                                                             // 8626
  this.value = value;                                                                                                  // 8627
  this.requestChange = requestChange;                                                                                  // 8628
}                                                                                                                      // 8629
                                                                                                                       // 8630
module.exports = ReactLink;                                                                                            // 8631
                                                                                                                       // 8632
},{}],53:[function(require,module,exports){                                                                            // 8633
/**                                                                                                                    // 8634
 * Copyright 2013 Facebook, Inc.                                                                                       // 8635
 *                                                                                                                     // 8636
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 8637
 * you may not use this file except in compliance with the License.                                                    // 8638
 * You may obtain a copy of the License at                                                                             // 8639
 *                                                                                                                     // 8640
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 8641
 *                                                                                                                     // 8642
 * Unless required by applicable law or agreed to in writing, software                                                 // 8643
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 8644
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 8645
 * See the License for the specific language governing permissions and                                                 // 8646
 * limitations under the License.                                                                                      // 8647
 *                                                                                                                     // 8648
 * @providesModule ReactMarkupChecksum                                                                                 // 8649
 */                                                                                                                    // 8650
                                                                                                                       // 8651
"use strict";                                                                                                          // 8652
                                                                                                                       // 8653
var adler32 = require("./adler32");                                                                                    // 8654
                                                                                                                       // 8655
var ReactMarkupChecksum = {                                                                                            // 8656
  CHECKSUM_ATTR_NAME: 'data-react-checksum',                                                                           // 8657
                                                                                                                       // 8658
  /**                                                                                                                  // 8659
   * @param {string} markup Markup string                                                                              // 8660
   * @return {string} Markup string with checksum attribute attached                                                   // 8661
   */                                                                                                                  // 8662
  addChecksumToMarkup: function(markup) {                                                                              // 8663
    var checksum = adler32(markup);                                                                                    // 8664
    return markup.replace(                                                                                             // 8665
      '>',                                                                                                             // 8666
      ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '">'                                            // 8667
    );                                                                                                                 // 8668
  },                                                                                                                   // 8669
                                                                                                                       // 8670
  /**                                                                                                                  // 8671
   * @param {string} markup to use                                                                                     // 8672
   * @param {DOMElement} element root React element                                                                    // 8673
   * @returns {boolean} whether or not the markup is the same                                                          // 8674
   */                                                                                                                  // 8675
  canReuseMarkup: function(markup, element) {                                                                          // 8676
    var existingChecksum = element.getAttribute(                                                                       // 8677
      ReactMarkupChecksum.CHECKSUM_ATTR_NAME                                                                           // 8678
    );                                                                                                                 // 8679
    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);                                             // 8680
    var markupChecksum = adler32(markup);                                                                              // 8681
    return markupChecksum === existingChecksum;                                                                        // 8682
  }                                                                                                                    // 8683
};                                                                                                                     // 8684
                                                                                                                       // 8685
module.exports = ReactMarkupChecksum;                                                                                  // 8686
                                                                                                                       // 8687
},{"./adler32":86}],54:[function(require,module,exports){                                                              // 8688
/**                                                                                                                    // 8689
 * Copyright 2013 Facebook, Inc.                                                                                       // 8690
 *                                                                                                                     // 8691
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 8692
 * you may not use this file except in compliance with the License.                                                    // 8693
 * You may obtain a copy of the License at                                                                             // 8694
 *                                                                                                                     // 8695
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 8696
 *                                                                                                                     // 8697
 * Unless required by applicable law or agreed to in writing, software                                                 // 8698
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 8699
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 8700
 * See the License for the specific language governing permissions and                                                 // 8701
 * limitations under the License.                                                                                      // 8702
 *                                                                                                                     // 8703
 * @providesModule ReactMount                                                                                          // 8704
 */                                                                                                                    // 8705
                                                                                                                       // 8706
"use strict";                                                                                                          // 8707
                                                                                                                       // 8708
var ReactEventEmitter = require("./ReactEventEmitter");                                                                // 8709
var ReactInstanceHandles = require("./ReactInstanceHandles");                                                          // 8710
                                                                                                                       // 8711
var $ = require("./$");                                                                                                // 8712
var containsNode = require("./containsNode");                                                                          // 8713
var getReactRootElementInContainer = require("./getReactRootElementInContainer");                                      // 8714
var invariant = require("./invariant");                                                                                // 8715
                                                                                                                       // 8716
var SEPARATOR = ReactInstanceHandles.SEPARATOR;                                                                        // 8717
                                                                                                                       // 8718
var ATTR_NAME = 'data-reactid';                                                                                        // 8719
var nodeCache = {};                                                                                                    // 8720
                                                                                                                       // 8721
var ELEMENT_NODE_TYPE = 1;                                                                                             // 8722
var DOC_NODE_TYPE = 9;                                                                                                 // 8723
                                                                                                                       // 8724
/** Mapping from reactRootID to React component instance. */                                                           // 8725
var instancesByReactRootID = {};                                                                                       // 8726
                                                                                                                       // 8727
/** Mapping from reactRootID to `container` nodes. */                                                                  // 8728
var containersByReactRootID = {};                                                                                      // 8729
                                                                                                                       // 8730
if ("production" !== "development") {                                                                                  // 8731
  /** __DEV__-only mapping from reactRootID to root elements. */                                                       // 8732
  var rootElementsByReactRootID = {};                                                                                  // 8733
}                                                                                                                      // 8734
                                                                                                                       // 8735
/**                                                                                                                    // 8736
 * @param {DOMElement} container DOM element that may contain a React component.                                       // 8737
 * @return {?string} A "reactRoot" ID, if a React component is rendered.                                               // 8738
 */                                                                                                                    // 8739
function getReactRootID(container) {                                                                                   // 8740
  var rootElement = getReactRootElementInContainer(container);                                                         // 8741
  return rootElement && ReactMount.getID(rootElement);                                                                 // 8742
}                                                                                                                      // 8743
                                                                                                                       // 8744
/**                                                                                                                    // 8745
 * Accessing node[ATTR_NAME] or calling getAttribute(ATTR_NAME) on a form                                              // 8746
 * element can return its control whose name or ID equals ATTR_NAME. All                                               // 8747
 * DOM nodes support `getAttributeNode` but this can also get called on                                                // 8748
 * other objects so just return '' if we're given something other than a                                               // 8749
 * DOM node (such as window).                                                                                          // 8750
 *                                                                                                                     // 8751
 * @param {?DOMElement|DOMWindow|DOMDocument|DOMTextNode} node DOM node.                                               // 8752
 * @return {string} ID of the supplied `domNode`.                                                                      // 8753
 */                                                                                                                    // 8754
function getID(node) {                                                                                                 // 8755
  var id = internalGetID(node);                                                                                        // 8756
  if (id) {                                                                                                            // 8757
    if (nodeCache.hasOwnProperty(id)) {                                                                                // 8758
      var cached = nodeCache[id];                                                                                      // 8759
      if (cached !== node) {                                                                                           // 8760
        ("production" !== "development" ? invariant(                                                                   // 8761
          !isValid(cached, id),                                                                                        // 8762
          'ReactMount: Two valid but unequal nodes with the same `%s`: %s',                                            // 8763
          ATTR_NAME, id                                                                                                // 8764
        ) : invariant(!isValid(cached, id)));                                                                          // 8765
                                                                                                                       // 8766
        nodeCache[id] = node;                                                                                          // 8767
      }                                                                                                                // 8768
    } else {                                                                                                           // 8769
      nodeCache[id] = node;                                                                                            // 8770
    }                                                                                                                  // 8771
  }                                                                                                                    // 8772
                                                                                                                       // 8773
  return id;                                                                                                           // 8774
}                                                                                                                      // 8775
                                                                                                                       // 8776
function internalGetID(node) {                                                                                         // 8777
  // If node is something like a window, document, or text node, none of                                               // 8778
  // which support attributes or a .getAttribute method, gracefully return                                             // 8779
  // the empty string, as if the attribute were missing.                                                               // 8780
  return node && node.getAttribute && node.getAttribute(ATTR_NAME) || '';                                              // 8781
}                                                                                                                      // 8782
                                                                                                                       // 8783
/**                                                                                                                    // 8784
 * Sets the React-specific ID of the given node.                                                                       // 8785
 *                                                                                                                     // 8786
 * @param {DOMElement} node The DOM node whose ID will be set.                                                         // 8787
 * @param {string} id The value of the ID attribute.                                                                   // 8788
 */                                                                                                                    // 8789
function setID(node, id) {                                                                                             // 8790
  var oldID = internalGetID(node);                                                                                     // 8791
  if (oldID !== id) {                                                                                                  // 8792
    delete nodeCache[oldID];                                                                                           // 8793
  }                                                                                                                    // 8794
  node.setAttribute(ATTR_NAME, id);                                                                                    // 8795
  nodeCache[id] = node;                                                                                                // 8796
}                                                                                                                      // 8797
                                                                                                                       // 8798
/**                                                                                                                    // 8799
 * Finds the node with the supplied React-generated DOM ID.                                                            // 8800
 *                                                                                                                     // 8801
 * @param {string} id A React-generated DOM ID.                                                                        // 8802
 * @return {DOMElement} DOM node with the suppled `id`.                                                                // 8803
 * @internal                                                                                                           // 8804
 */                                                                                                                    // 8805
function getNode(id) {                                                                                                 // 8806
  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {                                                  // 8807
    nodeCache[id] = ReactMount.findReactNodeByID(id);                                                                  // 8808
  }                                                                                                                    // 8809
  return nodeCache[id];                                                                                                // 8810
}                                                                                                                      // 8811
                                                                                                                       // 8812
/**                                                                                                                    // 8813
 * A node is "valid" if it is contained by a currently mounted container.                                              // 8814
 *                                                                                                                     // 8815
 * This means that the node does not have to be contained by a document in                                             // 8816
 * order to be considered valid.                                                                                       // 8817
 *                                                                                                                     // 8818
 * @param {?DOMElement} node The candidate DOM node.                                                                   // 8819
 * @param {string} id The expected ID of the node.                                                                     // 8820
 * @return {boolean} Whether the node is contained by a mounted container.                                             // 8821
 */                                                                                                                    // 8822
function isValid(node, id) {                                                                                           // 8823
  if (node) {                                                                                                          // 8824
    ("production" !== "development" ? invariant(                                                                       // 8825
      internalGetID(node) === id,                                                                                      // 8826
      'ReactMount: Unexpected modification of `%s`',                                                                   // 8827
      ATTR_NAME                                                                                                        // 8828
    ) : invariant(internalGetID(node) === id));                                                                        // 8829
                                                                                                                       // 8830
    var container = ReactMount.findReactContainerForID(id);                                                            // 8831
    if (container && containsNode(container, node)) {                                                                  // 8832
      return true;                                                                                                     // 8833
    }                                                                                                                  // 8834
  }                                                                                                                    // 8835
                                                                                                                       // 8836
  return false;                                                                                                        // 8837
}                                                                                                                      // 8838
                                                                                                                       // 8839
/**                                                                                                                    // 8840
 * Causes the cache to forget about one React-specific ID.                                                             // 8841
 *                                                                                                                     // 8842
 * @param {string} id The ID to forget.                                                                                // 8843
 */                                                                                                                    // 8844
function purgeID(id) {                                                                                                 // 8845
  delete nodeCache[id];                                                                                                // 8846
}                                                                                                                      // 8847
                                                                                                                       // 8848
/**                                                                                                                    // 8849
 * Mounting is the process of initializing a React component by creatings its                                          // 8850
 * representative DOM elements and inserting them into a supplied `container`.                                         // 8851
 * Any prior content inside `container` is destroyed in the process.                                                   // 8852
 *                                                                                                                     // 8853
 *   ReactMount.renderComponent(component, $('container'));                                                            // 8854
 *                                                                                                                     // 8855
 *   <div id="container">                   <-- Supplied `container`.                                                  // 8856
 *     <div data-reactid=".r[3]">           <-- Rendered reactRoot of React                                            // 8857
 *       // ...                                 component.                                                             // 8858
 *     </div>                                                                                                          // 8859
 *   </div>                                                                                                            // 8860
 *                                                                                                                     // 8861
 * Inside of `container`, the first element rendered is the "reactRoot".                                               // 8862
 */                                                                                                                    // 8863
var ReactMount = {                                                                                                     // 8864
  /**                                                                                                                  // 8865
   * Safety guard to prevent accidentally rendering over the entire HTML tree.                                         // 8866
   */                                                                                                                  // 8867
  allowFullPageRender: false,                                                                                          // 8868
                                                                                                                       // 8869
  /** Time spent generating markup. */                                                                                 // 8870
  totalInstantiationTime: 0,                                                                                           // 8871
                                                                                                                       // 8872
  /** Time spent inserting markup into the DOM. */                                                                     // 8873
  totalInjectionTime: 0,                                                                                               // 8874
                                                                                                                       // 8875
  /** Whether support for touch events should be initialized. */                                                       // 8876
  useTouchEvents: false,                                                                                               // 8877
                                                                                                                       // 8878
  /** Exposed for debugging purposes **/                                                                               // 8879
  _instancesByReactRootID: instancesByReactRootID,                                                                     // 8880
                                                                                                                       // 8881
  /**                                                                                                                  // 8882
   * This is a hook provided to support rendering React components while                                               // 8883
   * ensuring that the apparent scroll position of its `container` does not                                            // 8884
   * change.                                                                                                           // 8885
   *                                                                                                                   // 8886
   * @param {DOMElement} container The `container` being rendered into.                                                // 8887
   * @param {function} renderCallback This must be called once to do the render.                                       // 8888
   */                                                                                                                  // 8889
  scrollMonitor: function(container, renderCallback) {                                                                 // 8890
    renderCallback();                                                                                                  // 8891
  },                                                                                                                   // 8892
                                                                                                                       // 8893
  /**                                                                                                                  // 8894
   * Ensures that the top-level event delegation listener is set up. This will                                         // 8895
   * be invoked some time before the first time any React component is rendered.                                       // 8896
   * @param {DOMElement} container container we're rendering into                                                      // 8897
   *                                                                                                                   // 8898
   * @private                                                                                                          // 8899
   */                                                                                                                  // 8900
  prepareEnvironmentForDOM: function(container) {                                                                      // 8901
    ("production" !== "development" ? invariant(                                                                       // 8902
      container && (                                                                                                   // 8903
        container.nodeType === ELEMENT_NODE_TYPE ||                                                                    // 8904
        container.nodeType === DOC_NODE_TYPE                                                                           // 8905
      ),                                                                                                               // 8906
      'prepareEnvironmentForDOM(...): Target container is not a DOM element.'                                          // 8907
    ) : invariant(container && (                                                                                       // 8908
      container.nodeType === ELEMENT_NODE_TYPE ||                                                                      // 8909
      container.nodeType === DOC_NODE_TYPE                                                                             // 8910
    )));                                                                                                               // 8911
    var doc = container.nodeType === ELEMENT_NODE_TYPE ?                                                               // 8912
      container.ownerDocument :                                                                                        // 8913
      container;                                                                                                       // 8914
    ReactEventEmitter.ensureListening(ReactMount.useTouchEvents, doc);                                                 // 8915
  },                                                                                                                   // 8916
                                                                                                                       // 8917
  /**                                                                                                                  // 8918
   * Take a component that's already mounted into the DOM and replace its props                                        // 8919
   * @param {ReactComponent} prevComponent component instance already in the DOM                                       // 8920
   * @param {ReactComponent} nextComponent component instance to render                                                // 8921
   * @param {DOMElement} container container to render into                                                            // 8922
   * @param {?function} callback function triggered on completion                                                      // 8923
   */                                                                                                                  // 8924
  _updateRootComponent: function(                                                                                      // 8925
      prevComponent,                                                                                                   // 8926
      nextComponent,                                                                                                   // 8927
      container,                                                                                                       // 8928
      callback) {                                                                                                      // 8929
    var nextProps = nextComponent.props;                                                                               // 8930
    ReactMount.scrollMonitor(container, function() {                                                                   // 8931
      prevComponent.replaceProps(nextProps, callback);                                                                 // 8932
    });                                                                                                                // 8933
                                                                                                                       // 8934
    if ("production" !== "development") {                                                                              // 8935
      // Record the root element in case it later gets transplanted.                                                   // 8936
      rootElementsByReactRootID[getReactRootID(container)] =                                                           // 8937
        getReactRootElementInContainer(container);                                                                     // 8938
    }                                                                                                                  // 8939
                                                                                                                       // 8940
    return prevComponent;                                                                                              // 8941
  },                                                                                                                   // 8942
                                                                                                                       // 8943
  /**                                                                                                                  // 8944
   * Register a component into the instance map and start the events system.                                           // 8945
   * @param {ReactComponent} nextComponent component instance to render                                                // 8946
   * @param {DOMElement} container container to render into                                                            // 8947
   * @return {string} reactRoot ID prefix                                                                              // 8948
   */                                                                                                                  // 8949
  _registerComponent: function(nextComponent, container) {                                                             // 8950
    ReactMount.prepareEnvironmentForDOM(container);                                                                    // 8951
                                                                                                                       // 8952
    var reactRootID = ReactMount.registerContainer(container);                                                         // 8953
    instancesByReactRootID[reactRootID] = nextComponent;                                                               // 8954
    return reactRootID;                                                                                                // 8955
  },                                                                                                                   // 8956
                                                                                                                       // 8957
  /**                                                                                                                  // 8958
   * Render a new component into the DOM.                                                                              // 8959
   * @param {ReactComponent} nextComponent component instance to render                                                // 8960
   * @param {DOMElement} container container to render into                                                            // 8961
   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion                                         // 8962
   * @return {ReactComponent} nextComponent                                                                            // 8963
   */                                                                                                                  // 8964
  _renderNewRootComponent: function(                                                                                   // 8965
      nextComponent,                                                                                                   // 8966
      container,                                                                                                       // 8967
      shouldReuseMarkup) {                                                                                             // 8968
    var reactRootID = ReactMount._registerComponent(nextComponent, container);                                         // 8969
    nextComponent.mountComponentIntoNode(                                                                              // 8970
      reactRootID,                                                                                                     // 8971
      container,                                                                                                       // 8972
      shouldReuseMarkup                                                                                                // 8973
    );                                                                                                                 // 8974
                                                                                                                       // 8975
    if ("production" !== "development") {                                                                              // 8976
      // Record the root element in case it later gets transplanted.                                                   // 8977
      rootElementsByReactRootID[reactRootID] =                                                                         // 8978
        getReactRootElementInContainer(container);                                                                     // 8979
    }                                                                                                                  // 8980
                                                                                                                       // 8981
    return nextComponent;                                                                                              // 8982
  },                                                                                                                   // 8983
                                                                                                                       // 8984
  /**                                                                                                                  // 8985
   * Renders a React component into the DOM in the supplied `container`.                                               // 8986
   *                                                                                                                   // 8987
   * If the React component was previously rendered into `container`, this will                                        // 8988
   * perform an update on it and only mutate the DOM as necessary to reflect the                                       // 8989
   * latest React component.                                                                                           // 8990
   *                                                                                                                   // 8991
   * @param {ReactComponent} nextComponent Component instance to render.                                               // 8992
   * @param {DOMElement} container DOM element to render into.                                                         // 8993
   * @param {?function} callback function triggered on completion                                                      // 8994
   * @return {ReactComponent} Component instance rendered in `container`.                                              // 8995
   */                                                                                                                  // 8996
  renderComponent: function(nextComponent, container, callback) {                                                      // 8997
    var registeredComponent = instancesByReactRootID[getReactRootID(container)];                                       // 8998
                                                                                                                       // 8999
    if (registeredComponent) {                                                                                         // 9000
      if (registeredComponent.constructor === nextComponent.constructor) {                                             // 9001
        return ReactMount._updateRootComponent(                                                                        // 9002
          registeredComponent,                                                                                         // 9003
          nextComponent,                                                                                               // 9004
          container,                                                                                                   // 9005
          callback                                                                                                     // 9006
        );                                                                                                             // 9007
      } else {                                                                                                         // 9008
        ReactMount.unmountComponentAtNode(container);                                                                  // 9009
      }                                                                                                                // 9010
    }                                                                                                                  // 9011
                                                                                                                       // 9012
    var reactRootElement = getReactRootElementInContainer(container);                                                  // 9013
    var containerHasReactMarkup =                                                                                      // 9014
      reactRootElement && ReactMount.isRenderedByReact(reactRootElement);                                              // 9015
                                                                                                                       // 9016
    var shouldReuseMarkup = containerHasReactMarkup && !registeredComponent;                                           // 9017
                                                                                                                       // 9018
    var component = ReactMount._renderNewRootComponent(                                                                // 9019
      nextComponent,                                                                                                   // 9020
      container,                                                                                                       // 9021
      shouldReuseMarkup                                                                                                // 9022
    );                                                                                                                 // 9023
    callback && callback();                                                                                            // 9024
    return component;                                                                                                  // 9025
  },                                                                                                                   // 9026
                                                                                                                       // 9027
  /**                                                                                                                  // 9028
   * Constructs a component instance of `constructor` with `initialProps` and                                          // 9029
   * renders it into the supplied `container`.                                                                         // 9030
   *                                                                                                                   // 9031
   * @param {function} constructor React component constructor.                                                        // 9032
   * @param {?object} props Initial props of the component instance.                                                   // 9033
   * @param {DOMElement} container DOM element to render into.                                                         // 9034
   * @return {ReactComponent} Component instance rendered in `container`.                                              // 9035
   */                                                                                                                  // 9036
  constructAndRenderComponent: function(constructor, props, container) {                                               // 9037
    return ReactMount.renderComponent(constructor(props), container);                                                  // 9038
  },                                                                                                                   // 9039
                                                                                                                       // 9040
  /**                                                                                                                  // 9041
   * Constructs a component instance of `constructor` with `initialProps` and                                          // 9042
   * renders it into a container node identified by supplied `id`.                                                     // 9043
   *                                                                                                                   // 9044
   * @param {function} componentConstructor React component constructor                                                // 9045
   * @param {?object} props Initial props of the component instance.                                                   // 9046
   * @param {string} id ID of the DOM element to render into.                                                          // 9047
   * @return {ReactComponent} Component instance rendered in the container node.                                       // 9048
   */                                                                                                                  // 9049
  constructAndRenderComponentByID: function(constructor, props, id) {                                                  // 9050
    return ReactMount.constructAndRenderComponent(constructor, props, $(id));                                          // 9051
  },                                                                                                                   // 9052
                                                                                                                       // 9053
  /**                                                                                                                  // 9054
   * Registers a container node into which React components will be rendered.                                          // 9055
   * This also creates the "reatRoot" ID that will be assigned to the element                                          // 9056
   * rendered within.                                                                                                  // 9057
   *                                                                                                                   // 9058
   * @param {DOMElement} container DOM element to register as a container.                                             // 9059
   * @return {string} The "reactRoot" ID of elements rendered within.                                                  // 9060
   */                                                                                                                  // 9061
  registerContainer: function(container) {                                                                             // 9062
    var reactRootID = getReactRootID(container);                                                                       // 9063
    if (reactRootID) {                                                                                                 // 9064
      // If one exists, make sure it is a valid "reactRoot" ID.                                                        // 9065
      reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);                                        // 9066
    }                                                                                                                  // 9067
    if (!reactRootID) {                                                                                                // 9068
      // No valid "reactRoot" ID found, create one.                                                                    // 9069
      reactRootID = ReactInstanceHandles.createReactRootID();                                                          // 9070
    }                                                                                                                  // 9071
    containersByReactRootID[reactRootID] = container;                                                                  // 9072
    return reactRootID;                                                                                                // 9073
  },                                                                                                                   // 9074
                                                                                                                       // 9075
  /**                                                                                                                  // 9076
   * Unmounts and destroys the React component rendered in the `container`.                                            // 9077
   *                                                                                                                   // 9078
   * @param {DOMElement} container DOM element containing a React component.                                           // 9079
   * @return {boolean} True if a component was found in and unmounted from                                             // 9080
   *                   `container`                                                                                     // 9081
   */                                                                                                                  // 9082
  unmountComponentAtNode: function(container) {                                                                        // 9083
    var reactRootID = getReactRootID(container);                                                                       // 9084
    var component = instancesByReactRootID[reactRootID];                                                               // 9085
    if (!component) {                                                                                                  // 9086
      return false;                                                                                                    // 9087
    }                                                                                                                  // 9088
    ReactMount.unmountComponentFromNode(component, container);                                                         // 9089
    delete instancesByReactRootID[reactRootID];                                                                        // 9090
    delete containersByReactRootID[reactRootID];                                                                       // 9091
    if ("production" !== "development") {                                                                              // 9092
      delete rootElementsByReactRootID[reactRootID];                                                                   // 9093
    }                                                                                                                  // 9094
    return true;                                                                                                       // 9095
  },                                                                                                                   // 9096
                                                                                                                       // 9097
  /**                                                                                                                  // 9098
   * @deprecated                                                                                                       // 9099
   */                                                                                                                  // 9100
  unmountAndReleaseReactRootNode: function() {                                                                         // 9101
    if ("production" !== "development") {                                                                              // 9102
      console.warn(                                                                                                    // 9103
        'unmountAndReleaseReactRootNode() has been renamed to ' +                                                      // 9104
        'unmountComponentAtNode() and will be removed in the next ' +                                                  // 9105
        'version of React.'                                                                                            // 9106
      );                                                                                                               // 9107
    }                                                                                                                  // 9108
    return ReactMount.unmountComponentAtNode.apply(this, arguments);                                                   // 9109
  },                                                                                                                   // 9110
                                                                                                                       // 9111
  /**                                                                                                                  // 9112
   * Unmounts a component and removes it from the DOM.                                                                 // 9113
   *                                                                                                                   // 9114
   * @param {ReactComponent} instance React component instance.                                                        // 9115
   * @param {DOMElement} container DOM element to unmount from.                                                        // 9116
   * @final                                                                                                            // 9117
   * @internal                                                                                                         // 9118
   * @see {ReactMount.unmountComponentAtNode}                                                                          // 9119
   */                                                                                                                  // 9120
  unmountComponentFromNode: function(instance, container) {                                                            // 9121
    instance.unmountComponent();                                                                                       // 9122
                                                                                                                       // 9123
    if (container.nodeType === DOC_NODE_TYPE) {                                                                        // 9124
      container = container.documentElement;                                                                           // 9125
    }                                                                                                                  // 9126
                                                                                                                       // 9127
    // http://jsperf.com/emptying-a-node                                                                               // 9128
    while (container.lastChild) {                                                                                      // 9129
      container.removeChild(container.lastChild);                                                                      // 9130
    }                                                                                                                  // 9131
  },                                                                                                                   // 9132
                                                                                                                       // 9133
  /**                                                                                                                  // 9134
   * Finds the container DOM element that contains React component to which the                                        // 9135
   * supplied DOM `id` belongs.                                                                                        // 9136
   *                                                                                                                   // 9137
   * @param {string} id The ID of an element rendered by a React component.                                            // 9138
   * @return {?DOMElement} DOM element that contains the `id`.                                                         // 9139
   */                                                                                                                  // 9140
  findReactContainerForID: function(id) {                                                                              // 9141
    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);                                               // 9142
    var container = containersByReactRootID[reactRootID];                                                              // 9143
                                                                                                                       // 9144
    if ("production" !== "development") {                                                                              // 9145
      var rootElement = rootElementsByReactRootID[reactRootID];                                                        // 9146
      if (rootElement && rootElement.parentNode !== container) {                                                       // 9147
        ("production" !== "development" ? invariant(                                                                   // 9148
          // Call internalGetID here because getID calls isValid which calls                                           // 9149
          // findReactContainerForID (this function).                                                                  // 9150
          internalGetID(rootElement) === reactRootID,                                                                  // 9151
          'ReactMount: Root element ID differed from reactRootID.'                                                     // 9152
        ) : invariant(// Call internalGetID here because getID calls isValid which calls                               // 9153
        // findReactContainerForID (this function).                                                                    // 9154
        internalGetID(rootElement) === reactRootID));                                                                  // 9155
                                                                                                                       // 9156
        var containerChild = container.firstChild;                                                                     // 9157
        if (containerChild &&                                                                                          // 9158
            reactRootID === internalGetID(containerChild)) {                                                           // 9159
          // If the container has a new child with the same ID as the old                                              // 9160
          // root element, then rootElementsByReactRootID[reactRootID] is                                              // 9161
          // just stale and needs to be updated. The case that deserves a                                              // 9162
          // warning is when the container is empty.                                                                   // 9163
          rootElementsByReactRootID[reactRootID] = containerChild;                                                     // 9164
        } else {                                                                                                       // 9165
          console.warn(                                                                                                // 9166
            'ReactMount: Root element has been removed from its original ' +                                           // 9167
            'container. New container:', rootElement.parentNode                                                        // 9168
          );                                                                                                           // 9169
        }                                                                                                              // 9170
      }                                                                                                                // 9171
    }                                                                                                                  // 9172
                                                                                                                       // 9173
    return container;                                                                                                  // 9174
  },                                                                                                                   // 9175
                                                                                                                       // 9176
  /**                                                                                                                  // 9177
   * Finds an element rendered by React with the supplied ID.                                                          // 9178
   *                                                                                                                   // 9179
   * @param {string} id ID of a DOM node in the React component.                                                       // 9180
   * @return {DOMElement} Root DOM node of the React component.                                                        // 9181
   */                                                                                                                  // 9182
  findReactNodeByID: function(id) {                                                                                    // 9183
    var reactRoot = ReactMount.findReactContainerForID(id);                                                            // 9184
    return ReactMount.findComponentRoot(reactRoot, id);                                                                // 9185
  },                                                                                                                   // 9186
                                                                                                                       // 9187
  /**                                                                                                                  // 9188
   * True if the supplied `node` is rendered by React.                                                                 // 9189
   *                                                                                                                   // 9190
   * @param {*} node DOM Element to check.                                                                             // 9191
   * @return {boolean} True if the DOM Element appears to be rendered by React.                                        // 9192
   * @internal                                                                                                         // 9193
   */                                                                                                                  // 9194
  isRenderedByReact: function(node) {                                                                                  // 9195
    if (node.nodeType !== 1) {                                                                                         // 9196
      // Not a DOMElement, therefore not a React component                                                             // 9197
      return false;                                                                                                    // 9198
    }                                                                                                                  // 9199
    var id = ReactMount.getID(node);                                                                                   // 9200
    return id ? id.charAt(0) === SEPARATOR : false;                                                                    // 9201
  },                                                                                                                   // 9202
                                                                                                                       // 9203
  /**                                                                                                                  // 9204
   * Traverses up the ancestors of the supplied node to find a node that is a                                          // 9205
   * DOM representation of a React component.                                                                          // 9206
   *                                                                                                                   // 9207
   * @param {*} node                                                                                                   // 9208
   * @return {?DOMEventTarget}                                                                                         // 9209
   * @internal                                                                                                         // 9210
   */                                                                                                                  // 9211
  getFirstReactDOM: function(node) {                                                                                   // 9212
    var current = node;                                                                                                // 9213
    while (current && current.parentNode !== current) {                                                                // 9214
      if (ReactMount.isRenderedByReact(current)) {                                                                     // 9215
        return current;                                                                                                // 9216
      }                                                                                                                // 9217
      current = current.parentNode;                                                                                    // 9218
    }                                                                                                                  // 9219
    return null;                                                                                                       // 9220
  },                                                                                                                   // 9221
                                                                                                                       // 9222
  /**                                                                                                                  // 9223
   * Finds a node with the supplied `id` inside of the supplied `ancestorNode`.                                        // 9224
   * Exploits the ID naming scheme to perform the search quickly.                                                      // 9225
   *                                                                                                                   // 9226
   * @param {DOMEventTarget} ancestorNode Search from this root.                                                       // 9227
   * @pararm {string} id ID of the DOM representation of the component.                                                // 9228
   * @return {DOMEventTarget} DOM node with the supplied `id`.                                                         // 9229
   * @internal                                                                                                         // 9230
   */                                                                                                                  // 9231
  findComponentRoot: function(ancestorNode, id) {                                                                      // 9232
    var firstChildren = [ancestorNode.firstChild];                                                                     // 9233
    var childIndex = 0;                                                                                                // 9234
                                                                                                                       // 9235
    while (childIndex < firstChildren.length) {                                                                        // 9236
      var child = firstChildren[childIndex++];                                                                         // 9237
      while (child) {                                                                                                  // 9238
        var childID = ReactMount.getID(child);                                                                         // 9239
        if (childID) {                                                                                                 // 9240
          if (id === childID) {                                                                                        // 9241
            return child;                                                                                              // 9242
          } else if (ReactInstanceHandles.isAncestorIDOf(childID, id)) {                                               // 9243
            // If we find a child whose ID is an ancestor of the given ID,                                             // 9244
            // then we can be sure that we only want to search the subtree                                             // 9245
            // rooted at this child, so we can throw out the rest of the                                               // 9246
            // search state.                                                                                           // 9247
            firstChildren.length = childIndex = 0;                                                                     // 9248
            firstChildren.push(child.firstChild);                                                                      // 9249
            break;                                                                                                     // 9250
          } else {                                                                                                     // 9251
            // TODO This should not be necessary if the ID hierarchy is                                                // 9252
            // correct, but is occasionally necessary if the DOM has been                                              // 9253
            // modified in unexpected ways.                                                                            // 9254
            firstChildren.push(child.firstChild);                                                                      // 9255
          }                                                                                                            // 9256
        } else {                                                                                                       // 9257
          // If this child had no ID, then there's a chance that it was                                                // 9258
          // injected automatically by the browser, as when a `<table>`                                                // 9259
          // element sprouts an extra `<tbody>` child as a side effect of                                              // 9260
          // `.innerHTML` parsing. Optimistically continue down this                                                   // 9261
          // branch, but not before examining the other siblings.                                                      // 9262
          firstChildren.push(child.firstChild);                                                                        // 9263
        }                                                                                                              // 9264
        child = child.nextSibling;                                                                                     // 9265
      }                                                                                                                // 9266
    }                                                                                                                  // 9267
                                                                                                                       // 9268
    if ("production" !== "development") {                                                                              // 9269
      console.error(                                                                                                   // 9270
        'Error while invoking `findComponentRoot` with the following ' +                                               // 9271
        'ancestor node:',                                                                                              // 9272
        ancestorNode                                                                                                   // 9273
      );                                                                                                               // 9274
    }                                                                                                                  // 9275
    ("production" !== "development" ? invariant(                                                                       // 9276
      false,                                                                                                           // 9277
      'findComponentRoot(..., %s): Unable to find element. This probably ' +                                           // 9278
      'means the DOM was unexpectedly mutated (e.g. by the browser).',                                                 // 9279
      id,                                                                                                              // 9280
      ReactMount.getID(ancestorNode)                                                                                   // 9281
    ) : invariant(false));                                                                                             // 9282
  },                                                                                                                   // 9283
                                                                                                                       // 9284
                                                                                                                       // 9285
  /**                                                                                                                  // 9286
   * React ID utilities.                                                                                               // 9287
   */                                                                                                                  // 9288
                                                                                                                       // 9289
  ATTR_NAME: ATTR_NAME,                                                                                                // 9290
                                                                                                                       // 9291
  getReactRootID: getReactRootID,                                                                                      // 9292
                                                                                                                       // 9293
  getID: getID,                                                                                                        // 9294
                                                                                                                       // 9295
  setID: setID,                                                                                                        // 9296
                                                                                                                       // 9297
  getNode: getNode,                                                                                                    // 9298
                                                                                                                       // 9299
  purgeID: purgeID,                                                                                                    // 9300
                                                                                                                       // 9301
  injection: {}                                                                                                        // 9302
};                                                                                                                     // 9303
                                                                                                                       // 9304
module.exports = ReactMount;                                                                                           // 9305
                                                                                                                       // 9306
},{"./$":1,"./ReactEventEmitter":47,"./ReactInstanceHandles":51,"./containsNode":87,"./getReactRootElementInContainer":105,"./invariant":109}],55:[function(require,module,exports){
/**                                                                                                                    // 9308
 * Copyright 2013 Facebook, Inc.                                                                                       // 9309
 *                                                                                                                     // 9310
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 9311
 * you may not use this file except in compliance with the License.                                                    // 9312
 * You may obtain a copy of the License at                                                                             // 9313
 *                                                                                                                     // 9314
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 9315
 *                                                                                                                     // 9316
 * Unless required by applicable law or agreed to in writing, software                                                 // 9317
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 9318
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 9319
 * See the License for the specific language governing permissions and                                                 // 9320
 * limitations under the License.                                                                                      // 9321
 *                                                                                                                     // 9322
 * @providesModule ReactMountReady                                                                                     // 9323
 */                                                                                                                    // 9324
                                                                                                                       // 9325
"use strict";                                                                                                          // 9326
                                                                                                                       // 9327
var PooledClass = require("./PooledClass");                                                                            // 9328
                                                                                                                       // 9329
var mixInto = require("./mixInto");                                                                                    // 9330
                                                                                                                       // 9331
/**                                                                                                                    // 9332
 * A specialized pseudo-event module to help keep track of components waiting to                                       // 9333
 * be notified when their DOM representations are available for use.                                                   // 9334
 *                                                                                                                     // 9335
 * This implements `PooledClass`, so you should never need to instantiate this.                                        // 9336
 * Instead, use `ReactMountReady.getPooled()`.                                                                         // 9337
 *                                                                                                                     // 9338
 * @param {?array<function>} initialCollection                                                                         // 9339
 * @class ReactMountReady                                                                                              // 9340
 * @implements PooledClass                                                                                             // 9341
 * @internal                                                                                                           // 9342
 */                                                                                                                    // 9343
function ReactMountReady(initialCollection) {                                                                          // 9344
  this._queue = initialCollection || null;                                                                             // 9345
}                                                                                                                      // 9346
                                                                                                                       // 9347
mixInto(ReactMountReady, {                                                                                             // 9348
                                                                                                                       // 9349
  /**                                                                                                                  // 9350
   * Enqueues a callback to be invoked when `notifyAll` is invoked. This is used                                       // 9351
   * to enqueue calls to `componentDidMount` and `componentDidUpdate`.                                                 // 9352
   *                                                                                                                   // 9353
   * @param {ReactComponent} component Component being rendered.                                                       // 9354
   * @param {function(DOMElement)} callback Invoked when `notifyAll` is invoked.                                       // 9355
   * @internal                                                                                                         // 9356
   */                                                                                                                  // 9357
  enqueue: function(component, callback) {                                                                             // 9358
    this._queue = this._queue || [];                                                                                   // 9359
    this._queue.push({component: component, callback: callback});                                                      // 9360
  },                                                                                                                   // 9361
                                                                                                                       // 9362
  /**                                                                                                                  // 9363
   * Invokes all enqueued callbacks and clears the queue. This is invoked after                                        // 9364
   * the DOM representation of a component has been created or updated.                                                // 9365
   *                                                                                                                   // 9366
   * @internal                                                                                                         // 9367
   */                                                                                                                  // 9368
  notifyAll: function() {                                                                                              // 9369
    var queue = this._queue;                                                                                           // 9370
    if (queue) {                                                                                                       // 9371
      this._queue = null;                                                                                              // 9372
      for (var i = 0, l = queue.length; i < l; i++) {                                                                  // 9373
        var component = queue[i].component;                                                                            // 9374
        var callback = queue[i].callback;                                                                              // 9375
        callback.call(component, component.getDOMNode());                                                              // 9376
      }                                                                                                                // 9377
      queue.length = 0;                                                                                                // 9378
    }                                                                                                                  // 9379
  },                                                                                                                   // 9380
                                                                                                                       // 9381
  /**                                                                                                                  // 9382
   * Resets the internal queue.                                                                                        // 9383
   *                                                                                                                   // 9384
   * @internal                                                                                                         // 9385
   */                                                                                                                  // 9386
  reset: function() {                                                                                                  // 9387
    this._queue = null;                                                                                                // 9388
  },                                                                                                                   // 9389
                                                                                                                       // 9390
  /**                                                                                                                  // 9391
   * `PooledClass` looks for this.                                                                                     // 9392
   */                                                                                                                  // 9393
  destructor: function() {                                                                                             // 9394
    this.reset();                                                                                                      // 9395
  }                                                                                                                    // 9396
                                                                                                                       // 9397
});                                                                                                                    // 9398
                                                                                                                       // 9399
PooledClass.addPoolingTo(ReactMountReady);                                                                             // 9400
                                                                                                                       // 9401
module.exports = ReactMountReady;                                                                                      // 9402
                                                                                                                       // 9403
},{"./PooledClass":25,"./mixInto":121}],56:[function(require,module,exports){                                          // 9404
/**                                                                                                                    // 9405
 * Copyright 2013 Facebook, Inc.                                                                                       // 9406
 *                                                                                                                     // 9407
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 9408
 * you may not use this file except in compliance with the License.                                                    // 9409
 * You may obtain a copy of the License at                                                                             // 9410
 *                                                                                                                     // 9411
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 9412
 *                                                                                                                     // 9413
 * Unless required by applicable law or agreed to in writing, software                                                 // 9414
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 9415
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 9416
 * See the License for the specific language governing permissions and                                                 // 9417
 * limitations under the License.                                                                                      // 9418
 *                                                                                                                     // 9419
 * @providesModule ReactMultiChild                                                                                     // 9420
 * @typechecks static-only                                                                                             // 9421
 */                                                                                                                    // 9422
                                                                                                                       // 9423
"use strict";                                                                                                          // 9424
                                                                                                                       // 9425
var ReactComponent = require("./ReactComponent");                                                                      // 9426
var ReactMultiChildUpdateTypes = require("./ReactMultiChildUpdateTypes");                                              // 9427
                                                                                                                       // 9428
var flattenChildren = require("./flattenChildren");                                                                    // 9429
                                                                                                                       // 9430
/**                                                                                                                    // 9431
 * Given a `curChild` and `newChild`, determines if `curChild` should be                                               // 9432
 * updated as opposed to being destroyed or replaced.                                                                  // 9433
 *                                                                                                                     // 9434
 * @param {?ReactComponent} curChild                                                                                   // 9435
 * @param {?ReactComponent} newChild                                                                                   // 9436
 * @return {boolean} True if `curChild` should be updated with `newChild`.                                             // 9437
 * @protected                                                                                                          // 9438
 */                                                                                                                    // 9439
function shouldUpdateChild(curChild, newChild) {                                                                       // 9440
  return curChild && newChild && curChild.constructor === newChild.constructor;                                        // 9441
}                                                                                                                      // 9442
                                                                                                                       // 9443
/**                                                                                                                    // 9444
 * Updating children of a component may trigger recursive updates. The depth is                                        // 9445
 * used to batch recursive updates to render markup more efficiently.                                                  // 9446
 *                                                                                                                     // 9447
 * @type {number}                                                                                                      // 9448
 * @private                                                                                                            // 9449
 */                                                                                                                    // 9450
var updateDepth = 0;                                                                                                   // 9451
                                                                                                                       // 9452
/**                                                                                                                    // 9453
 * Queue of update configuration objects.                                                                              // 9454
 *                                                                                                                     // 9455
 * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.                                          // 9456
 *                                                                                                                     // 9457
 * @type {array<object>}                                                                                               // 9458
 * @private                                                                                                            // 9459
 */                                                                                                                    // 9460
var updateQueue = [];                                                                                                  // 9461
                                                                                                                       // 9462
/**                                                                                                                    // 9463
 * Queue of markup to be rendered.                                                                                     // 9464
 *                                                                                                                     // 9465
 * @type {array<string>}                                                                                               // 9466
 * @private                                                                                                            // 9467
 */                                                                                                                    // 9468
var markupQueue = [];                                                                                                  // 9469
                                                                                                                       // 9470
/**                                                                                                                    // 9471
 * Enqueues markup to be rendered and inserted at a supplied index.                                                    // 9472
 *                                                                                                                     // 9473
 * @param {string} parentID ID of the parent component.                                                                // 9474
 * @param {string} markup Markup that renders into an element.                                                         // 9475
 * @param {number} toIndex Destination index.                                                                          // 9476
 * @private                                                                                                            // 9477
 */                                                                                                                    // 9478
function enqueueMarkup(parentID, markup, toIndex) {                                                                    // 9479
  // NOTE: Null values reduce hidden classes.                                                                          // 9480
  updateQueue.push({                                                                                                   // 9481
    parentID: parentID,                                                                                                // 9482
    parentNode: null,                                                                                                  // 9483
    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,                                                                    // 9484
    markupIndex: markupQueue.push(markup) - 1,                                                                         // 9485
    textContent: null,                                                                                                 // 9486
    fromIndex: null,                                                                                                   // 9487
    toIndex: toIndex                                                                                                   // 9488
  });                                                                                                                  // 9489
}                                                                                                                      // 9490
                                                                                                                       // 9491
/**                                                                                                                    // 9492
 * Enqueues moving an existing element to another index.                                                               // 9493
 *                                                                                                                     // 9494
 * @param {string} parentID ID of the parent component.                                                                // 9495
 * @param {number} fromIndex Source index of the existing element.                                                     // 9496
 * @param {number} toIndex Destination index of the element.                                                           // 9497
 * @private                                                                                                            // 9498
 */                                                                                                                    // 9499
function enqueueMove(parentID, fromIndex, toIndex) {                                                                   // 9500
  // NOTE: Null values reduce hidden classes.                                                                          // 9501
  updateQueue.push({                                                                                                   // 9502
    parentID: parentID,                                                                                                // 9503
    parentNode: null,                                                                                                  // 9504
    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,                                                                    // 9505
    markupIndex: null,                                                                                                 // 9506
    textContent: null,                                                                                                 // 9507
    fromIndex: fromIndex,                                                                                              // 9508
    toIndex: toIndex                                                                                                   // 9509
  });                                                                                                                  // 9510
}                                                                                                                      // 9511
                                                                                                                       // 9512
/**                                                                                                                    // 9513
 * Enqueues removing an element at an index.                                                                           // 9514
 *                                                                                                                     // 9515
 * @param {string} parentID ID of the parent component.                                                                // 9516
 * @param {number} fromIndex Index of the element to remove.                                                           // 9517
 * @private                                                                                                            // 9518
 */                                                                                                                    // 9519
function enqueueRemove(parentID, fromIndex) {                                                                          // 9520
  // NOTE: Null values reduce hidden classes.                                                                          // 9521
  updateQueue.push({                                                                                                   // 9522
    parentID: parentID,                                                                                                // 9523
    parentNode: null,                                                                                                  // 9524
    type: ReactMultiChildUpdateTypes.REMOVE_NODE,                                                                      // 9525
    markupIndex: null,                                                                                                 // 9526
    textContent: null,                                                                                                 // 9527
    fromIndex: fromIndex,                                                                                              // 9528
    toIndex: null                                                                                                      // 9529
  });                                                                                                                  // 9530
}                                                                                                                      // 9531
                                                                                                                       // 9532
/**                                                                                                                    // 9533
 * Enqueues setting the text content.                                                                                  // 9534
 *                                                                                                                     // 9535
 * @param {string} parentID ID of the parent component.                                                                // 9536
 * @param {string} textContent Text content to set.                                                                    // 9537
 * @private                                                                                                            // 9538
 */                                                                                                                    // 9539
function enqueueTextContent(parentID, textContent) {                                                                   // 9540
  // NOTE: Null values reduce hidden classes.                                                                          // 9541
  updateQueue.push({                                                                                                   // 9542
    parentID: parentID,                                                                                                // 9543
    parentNode: null,                                                                                                  // 9544
    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,                                                                     // 9545
    markupIndex: null,                                                                                                 // 9546
    textContent: textContent,                                                                                          // 9547
    fromIndex: null,                                                                                                   // 9548
    toIndex: null                                                                                                      // 9549
  });                                                                                                                  // 9550
}                                                                                                                      // 9551
                                                                                                                       // 9552
/**                                                                                                                    // 9553
 * Processes any enqueued updates.                                                                                     // 9554
 *                                                                                                                     // 9555
 * @private                                                                                                            // 9556
 */                                                                                                                    // 9557
function processQueue() {                                                                                              // 9558
  if (updateQueue.length) {                                                                                            // 9559
    ReactComponent.DOMIDOperations.dangerouslyProcessChildrenUpdates(                                                  // 9560
      updateQueue,                                                                                                     // 9561
      markupQueue                                                                                                      // 9562
    );                                                                                                                 // 9563
    clearQueue();                                                                                                      // 9564
  }                                                                                                                    // 9565
}                                                                                                                      // 9566
                                                                                                                       // 9567
/**                                                                                                                    // 9568
 * Clears any enqueued updates.                                                                                        // 9569
 *                                                                                                                     // 9570
 * @private                                                                                                            // 9571
 */                                                                                                                    // 9572
function clearQueue() {                                                                                                // 9573
  updateQueue.length = 0;                                                                                              // 9574
  markupQueue.length = 0;                                                                                              // 9575
}                                                                                                                      // 9576
                                                                                                                       // 9577
/**                                                                                                                    // 9578
 * ReactMultiChild are capable of reconciling multiple children.                                                       // 9579
 *                                                                                                                     // 9580
 * @class ReactMultiChild                                                                                              // 9581
 * @internal                                                                                                           // 9582
 */                                                                                                                    // 9583
var ReactMultiChild = {                                                                                                // 9584
                                                                                                                       // 9585
  /**                                                                                                                  // 9586
   * Provides common functionality for components that must reconcile multiple                                         // 9587
   * children. This is used by `ReactDOMComponent` to mount, update, and                                               // 9588
   * unmount child components.                                                                                         // 9589
   *                                                                                                                   // 9590
   * @lends {ReactMultiChild.prototype}                                                                                // 9591
   */                                                                                                                  // 9592
  Mixin: {                                                                                                             // 9593
                                                                                                                       // 9594
    /**                                                                                                                // 9595
     * Generates a "mount image" for each of the supplied children. In the case                                        // 9596
     * of `ReactDOMComponent`, a mount image is a string of markup.                                                    // 9597
     *                                                                                                                 // 9598
     * @param {?object} nestedChildren Nested child maps.                                                              // 9599
     * @return {array} An array of mounted representations.                                                            // 9600
     * @internal                                                                                                       // 9601
     */                                                                                                                // 9602
    mountChildren: function(nestedChildren, transaction) {                                                             // 9603
      var children = flattenChildren(nestedChildren);                                                                  // 9604
      var mountImages = [];                                                                                            // 9605
      var index = 0;                                                                                                   // 9606
      this._renderedChildren = children;                                                                               // 9607
      for (var name in children) {                                                                                     // 9608
        var child = children[name];                                                                                    // 9609
        if (children.hasOwnProperty(name) && child) {                                                                  // 9610
          // Inlined for performance, see `ReactInstanceHandles.createReactID`.                                        // 9611
          var rootID = this._rootNodeID + '.' + name;                                                                  // 9612
          var mountImage = child.mountComponent(                                                                       // 9613
            rootID,                                                                                                    // 9614
            transaction,                                                                                               // 9615
            this._mountDepth + 1                                                                                       // 9616
          );                                                                                                           // 9617
          child._mountImage = mountImage;                                                                              // 9618
          child._mountIndex = index;                                                                                   // 9619
          mountImages.push(mountImage);                                                                                // 9620
          index++;                                                                                                     // 9621
        }                                                                                                              // 9622
      }                                                                                                                // 9623
      return mountImages;                                                                                              // 9624
    },                                                                                                                 // 9625
                                                                                                                       // 9626
    /**                                                                                                                // 9627
     * Replaces any rendered children with a text content string.                                                      // 9628
     *                                                                                                                 // 9629
     * @param {string} nextContent String of content.                                                                  // 9630
     * @internal                                                                                                       // 9631
     */                                                                                                                // 9632
    updateTextContent: function(nextContent) {                                                                         // 9633
      updateDepth++;                                                                                                   // 9634
      try {                                                                                                            // 9635
        var prevChildren = this._renderedChildren;                                                                     // 9636
        // Remove any rendered children.                                                                               // 9637
        for (var name in prevChildren) {                                                                               // 9638
          if (prevChildren.hasOwnProperty(name) &&                                                                     // 9639
              prevChildren[name]) {                                                                                    // 9640
            this._unmountChildByName(prevChildren[name], name);                                                        // 9641
          }                                                                                                            // 9642
        }                                                                                                              // 9643
        // Set new text content.                                                                                       // 9644
        this.setTextContent(nextContent);                                                                              // 9645
      } catch (error) {                                                                                                // 9646
        updateDepth--;                                                                                                 // 9647
        updateDepth || clearQueue();                                                                                   // 9648
        throw error;                                                                                                   // 9649
      }                                                                                                                // 9650
      updateDepth--;                                                                                                   // 9651
      updateDepth || processQueue();                                                                                   // 9652
    },                                                                                                                 // 9653
                                                                                                                       // 9654
    /**                                                                                                                // 9655
     * Updates the rendered children with new children.                                                                // 9656
     *                                                                                                                 // 9657
     * @param {?object} nextNestedChildren Nested child maps.                                                          // 9658
     * @param {ReactReconcileTransaction} transaction                                                                  // 9659
     * @internal                                                                                                       // 9660
     */                                                                                                                // 9661
    updateChildren: function(nextNestedChildren, transaction) {                                                        // 9662
      updateDepth++;                                                                                                   // 9663
      try {                                                                                                            // 9664
        this._updateChildren(nextNestedChildren, transaction);                                                         // 9665
      } catch (error) {                                                                                                // 9666
        updateDepth--;                                                                                                 // 9667
        updateDepth || clearQueue();                                                                                   // 9668
        throw error;                                                                                                   // 9669
      }                                                                                                                // 9670
      updateDepth--;                                                                                                   // 9671
      updateDepth || processQueue();                                                                                   // 9672
    },                                                                                                                 // 9673
                                                                                                                       // 9674
    /**                                                                                                                // 9675
     * Improve performance by isolating this hot code path from the try/catch                                          // 9676
     * block in `updateChildren`.                                                                                      // 9677
     *                                                                                                                 // 9678
     * @param {?object} nextNestedChildren Nested child maps.                                                          // 9679
     * @param {ReactReconcileTransaction} transaction                                                                  // 9680
     * @final                                                                                                          // 9681
     * @protected                                                                                                      // 9682
     */                                                                                                                // 9683
    _updateChildren: function(nextNestedChildren, transaction) {                                                       // 9684
      var nextChildren = flattenChildren(nextNestedChildren);                                                          // 9685
      var prevChildren = this._renderedChildren;                                                                       // 9686
      if (!nextChildren && !prevChildren) {                                                                            // 9687
        return;                                                                                                        // 9688
      }                                                                                                                // 9689
      var name;                                                                                                        // 9690
      // `nextIndex` will increment for each child in `nextChildren`, but                                              // 9691
      // `lastIndex` will be the last index visited in `prevChildren`.                                                 // 9692
      var lastIndex = 0;                                                                                               // 9693
      var nextIndex = 0;                                                                                               // 9694
      for (name in nextChildren) {                                                                                     // 9695
        if (!nextChildren.hasOwnProperty(name)) {                                                                      // 9696
          continue;                                                                                                    // 9697
        }                                                                                                              // 9698
        var prevChild = prevChildren && prevChildren[name];                                                            // 9699
        var nextChild = nextChildren[name];                                                                            // 9700
        if (shouldUpdateChild(prevChild, nextChild)) {                                                                 // 9701
          this.moveChild(prevChild, nextIndex, lastIndex);                                                             // 9702
          lastIndex = Math.max(prevChild._mountIndex, lastIndex);                                                      // 9703
          prevChild.receiveComponent(nextChild, transaction);                                                          // 9704
          prevChild._mountIndex = nextIndex;                                                                           // 9705
        } else {                                                                                                       // 9706
          if (prevChild) {                                                                                             // 9707
            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.                                       // 9708
            lastIndex = Math.max(prevChild._mountIndex, lastIndex);                                                    // 9709
            this._unmountChildByName(prevChild, name);                                                                 // 9710
          }                                                                                                            // 9711
          if (nextChild) {                                                                                             // 9712
            this._mountChildByNameAtIndex(                                                                             // 9713
              nextChild, name, nextIndex, transaction                                                                  // 9714
            );                                                                                                         // 9715
          }                                                                                                            // 9716
        }                                                                                                              // 9717
        if (nextChild) {                                                                                               // 9718
          nextIndex++;                                                                                                 // 9719
        }                                                                                                              // 9720
      }                                                                                                                // 9721
      // Remove children that are no longer present.                                                                   // 9722
      for (name in prevChildren) {                                                                                     // 9723
        if (prevChildren.hasOwnProperty(name) &&                                                                       // 9724
            prevChildren[name] &&                                                                                      // 9725
            !(nextChildren && nextChildren[name])) {                                                                   // 9726
          this._unmountChildByName(prevChildren[name], name);                                                          // 9727
        }                                                                                                              // 9728
      }                                                                                                                // 9729
    },                                                                                                                 // 9730
                                                                                                                       // 9731
    /**                                                                                                                // 9732
     * Unmounts all rendered children. This should be used to clean up children                                        // 9733
     * when this component is unmounted.                                                                               // 9734
     *                                                                                                                 // 9735
     * @internal                                                                                                       // 9736
     */                                                                                                                // 9737
    unmountChildren: function() {                                                                                      // 9738
      var renderedChildren = this._renderedChildren;                                                                   // 9739
      for (var name in renderedChildren) {                                                                             // 9740
        var renderedChild = renderedChildren[name];                                                                    // 9741
        if (renderedChild && renderedChild.unmountComponent) {                                                         // 9742
          renderedChild.unmountComponent();                                                                            // 9743
        }                                                                                                              // 9744
      }                                                                                                                // 9745
      this._renderedChildren = null;                                                                                   // 9746
    },                                                                                                                 // 9747
                                                                                                                       // 9748
    /**                                                                                                                // 9749
     * Moves a child component to the supplied index.                                                                  // 9750
     *                                                                                                                 // 9751
     * @param {ReactComponent} child Component to move.                                                                // 9752
     * @param {number} toIndex Destination index of the element.                                                       // 9753
     * @param {number} lastIndex Last index visited of the siblings of `child`.                                        // 9754
     * @protected                                                                                                      // 9755
     */                                                                                                                // 9756
    moveChild: function(child, toIndex, lastIndex) {                                                                   // 9757
      // If the index of `child` is less than `lastIndex`, then it needs to                                            // 9758
      // be moved. Otherwise, we do not need to move it because a child will be                                        // 9759
      // inserted or moved before `child`.                                                                             // 9760
      if (child._mountIndex < lastIndex) {                                                                             // 9761
        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);                                                     // 9762
      }                                                                                                                // 9763
    },                                                                                                                 // 9764
                                                                                                                       // 9765
    /**                                                                                                                // 9766
     * Creates a child component.                                                                                      // 9767
     *                                                                                                                 // 9768
     * @param {ReactComponent} child Component to create.                                                              // 9769
     * @protected                                                                                                      // 9770
     */                                                                                                                // 9771
    createChild: function(child) {                                                                                     // 9772
      enqueueMarkup(this._rootNodeID, child._mountImage, child._mountIndex);                                           // 9773
    },                                                                                                                 // 9774
                                                                                                                       // 9775
    /**                                                                                                                // 9776
     * Removes a child component.                                                                                      // 9777
     *                                                                                                                 // 9778
     * @param {ReactComponent} child Child to remove.                                                                  // 9779
     * @protected                                                                                                      // 9780
     */                                                                                                                // 9781
    removeChild: function(child) {                                                                                     // 9782
      enqueueRemove(this._rootNodeID, child._mountIndex);                                                              // 9783
    },                                                                                                                 // 9784
                                                                                                                       // 9785
    /**                                                                                                                // 9786
     * Sets this text content string.                                                                                  // 9787
     *                                                                                                                 // 9788
     * @param {string} textContent Text content to set.                                                                // 9789
     * @protected                                                                                                      // 9790
     */                                                                                                                // 9791
    setTextContent: function(textContent) {                                                                            // 9792
      enqueueTextContent(this._rootNodeID, textContent);                                                               // 9793
    },                                                                                                                 // 9794
                                                                                                                       // 9795
    /**                                                                                                                // 9796
     * Mounts a child with the supplied name.                                                                          // 9797
     *                                                                                                                 // 9798
     * NOTE: This is part of `updateChildren` and is here for readability.                                             // 9799
     *                                                                                                                 // 9800
     * @param {ReactComponent} child Component to mount.                                                               // 9801
     * @param {string} name Name of the child.                                                                         // 9802
     * @param {number} index Index at which to insert the child.                                                       // 9803
     * @param {ReactReconcileTransaction} transaction                                                                  // 9804
     * @private                                                                                                        // 9805
     */                                                                                                                // 9806
    _mountChildByNameAtIndex: function(child, name, index, transaction) {                                              // 9807
      // Inlined for performance, see `ReactInstanceHandles.createReactID`.                                            // 9808
      var rootID = this._rootNodeID + '.' + name;                                                                      // 9809
      var mountImage = child.mountComponent(                                                                           // 9810
        rootID,                                                                                                        // 9811
        transaction,                                                                                                   // 9812
        this._mountDepth + 1                                                                                           // 9813
      );                                                                                                               // 9814
      child._mountImage = mountImage;                                                                                  // 9815
      child._mountIndex = index;                                                                                       // 9816
      this.createChild(child);                                                                                         // 9817
      this._renderedChildren = this._renderedChildren || {};                                                           // 9818
      this._renderedChildren[name] = child;                                                                            // 9819
    },                                                                                                                 // 9820
                                                                                                                       // 9821
    /**                                                                                                                // 9822
     * Unmounts a rendered child by name.                                                                              // 9823
     *                                                                                                                 // 9824
     * NOTE: This is part of `updateChildren` and is here for readability.                                             // 9825
     *                                                                                                                 // 9826
     * @param {ReactComponent} child Component to unmount.                                                             // 9827
     * @param {string} name Name of the child in `this._renderedChildren`.                                             // 9828
     * @private                                                                                                        // 9829
     */                                                                                                                // 9830
    _unmountChildByName: function(child, name) {                                                                       // 9831
      if (ReactComponent.isValidComponent(child)) {                                                                    // 9832
        this.removeChild(child);                                                                                       // 9833
        child._mountImage = null;                                                                                      // 9834
        child._mountIndex = null;                                                                                      // 9835
        child.unmountComponent();                                                                                      // 9836
        delete this._renderedChildren[name];                                                                           // 9837
      }                                                                                                                // 9838
    }                                                                                                                  // 9839
                                                                                                                       // 9840
  }                                                                                                                    // 9841
                                                                                                                       // 9842
};                                                                                                                     // 9843
                                                                                                                       // 9844
module.exports = ReactMultiChild;                                                                                      // 9845
                                                                                                                       // 9846
},{"./ReactComponent":28,"./ReactMultiChildUpdateTypes":57,"./flattenChildren":98}],57:[function(require,module,exports){
/**                                                                                                                    // 9848
 * Copyright 2013 Facebook, Inc.                                                                                       // 9849
 *                                                                                                                     // 9850
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 9851
 * you may not use this file except in compliance with the License.                                                    // 9852
 * You may obtain a copy of the License at                                                                             // 9853
 *                                                                                                                     // 9854
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 9855
 *                                                                                                                     // 9856
 * Unless required by applicable law or agreed to in writing, software                                                 // 9857
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 9858
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 9859
 * See the License for the specific language governing permissions and                                                 // 9860
 * limitations under the License.                                                                                      // 9861
 *                                                                                                                     // 9862
 * @providesModule ReactMultiChildUpdateTypes                                                                          // 9863
 */                                                                                                                    // 9864
                                                                                                                       // 9865
var keyMirror = require("./keyMirror");                                                                                // 9866
                                                                                                                       // 9867
/**                                                                                                                    // 9868
 * When a component's children are updated, a series of update configuration                                           // 9869
 * objects are created in order to batch and serialize the required changes.                                           // 9870
 *                                                                                                                     // 9871
 * Enumerates all the possible types of update configurations.                                                         // 9872
 *                                                                                                                     // 9873
 * @internal                                                                                                           // 9874
 */                                                                                                                    // 9875
var ReactMultiChildUpdateTypes = keyMirror({                                                                           // 9876
  INSERT_MARKUP: null,                                                                                                 // 9877
  MOVE_EXISTING: null,                                                                                                 // 9878
  REMOVE_NODE: null,                                                                                                   // 9879
  TEXT_CONTENT: null                                                                                                   // 9880
});                                                                                                                    // 9881
                                                                                                                       // 9882
module.exports = ReactMultiChildUpdateTypes;                                                                           // 9883
                                                                                                                       // 9884
},{"./keyMirror":115}],58:[function(require,module,exports){                                                           // 9885
/**                                                                                                                    // 9886
 * Copyright 2013 Facebook, Inc.                                                                                       // 9887
 *                                                                                                                     // 9888
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 9889
 * you may not use this file except in compliance with the License.                                                    // 9890
 * You may obtain a copy of the License at                                                                             // 9891
 *                                                                                                                     // 9892
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 9893
 *                                                                                                                     // 9894
 * Unless required by applicable law or agreed to in writing, software                                                 // 9895
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 9896
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 9897
 * See the License for the specific language governing permissions and                                                 // 9898
 * limitations under the License.                                                                                      // 9899
 *                                                                                                                     // 9900
 * @providesModule ReactOwner                                                                                          // 9901
 */                                                                                                                    // 9902
                                                                                                                       // 9903
"use strict";                                                                                                          // 9904
                                                                                                                       // 9905
var invariant = require("./invariant");                                                                                // 9906
                                                                                                                       // 9907
/**                                                                                                                    // 9908
 * ReactOwners are capable of storing references to owned components.                                                  // 9909
 *                                                                                                                     // 9910
 * All components are capable of //being// referenced by owner components, but                                         // 9911
 * only ReactOwner components are capable of //referencing// owned components.                                         // 9912
 * The named reference is known as a "ref".                                                                            // 9913
 *                                                                                                                     // 9914
 * Refs are available when mounted and updated during reconciliation.                                                  // 9915
 *                                                                                                                     // 9916
 *   var MyComponent = React.createClass({                                                                             // 9917
 *     render: function() {                                                                                            // 9918
 *       return (                                                                                                      // 9919
 *         <div onClick={this.handleClick}>                                                                            // 9920
 *           <CustomComponent ref="custom" />                                                                          // 9921
 *         </div>                                                                                                      // 9922
 *       );                                                                                                            // 9923
 *     },                                                                                                              // 9924
 *     handleClick: function() {                                                                                       // 9925
 *       this.refs.custom.handleClick();                                                                               // 9926
 *     },                                                                                                              // 9927
 *     componentDidMount: function() {                                                                                 // 9928
 *       this.refs.custom.initialize();                                                                                // 9929
 *     }                                                                                                               // 9930
 *   });                                                                                                               // 9931
 *                                                                                                                     // 9932
 * Refs should rarely be used. When refs are used, they should only be done to                                         // 9933
 * control data that is not handled by React's data flow.                                                              // 9934
 *                                                                                                                     // 9935
 * @class ReactOwner                                                                                                   // 9936
 */                                                                                                                    // 9937
var ReactOwner = {                                                                                                     // 9938
                                                                                                                       // 9939
  /**                                                                                                                  // 9940
   * @param {?object} object                                                                                           // 9941
   * @return {boolean} True if `object` is a valid owner.                                                              // 9942
   * @final                                                                                                            // 9943
   */                                                                                                                  // 9944
  isValidOwner: function(object) {                                                                                     // 9945
    return !!(                                                                                                         // 9946
      object &&                                                                                                        // 9947
      typeof object.attachRef === 'function' &&                                                                        // 9948
      typeof object.detachRef === 'function'                                                                           // 9949
    );                                                                                                                 // 9950
  },                                                                                                                   // 9951
                                                                                                                       // 9952
  /**                                                                                                                  // 9953
   * Adds a component by ref to an owner component.                                                                    // 9954
   *                                                                                                                   // 9955
   * @param {ReactComponent} component Component to reference.                                                         // 9956
   * @param {string} ref Name by which to refer to the component.                                                      // 9957
   * @param {ReactOwner} owner Component on which to record the ref.                                                   // 9958
   * @final                                                                                                            // 9959
   * @internal                                                                                                         // 9960
   */                                                                                                                  // 9961
  addComponentAsRefTo: function(component, ref, owner) {                                                               // 9962
    ("production" !== "development" ? invariant(                                                                       // 9963
      ReactOwner.isValidOwner(owner),                                                                                  // 9964
      'addComponentAsRefTo(...): Only a ReactOwner can have refs.'                                                     // 9965
    ) : invariant(ReactOwner.isValidOwner(owner)));                                                                    // 9966
    owner.attachRef(ref, component);                                                                                   // 9967
  },                                                                                                                   // 9968
                                                                                                                       // 9969
  /**                                                                                                                  // 9970
   * Removes a component by ref from an owner component.                                                               // 9971
   *                                                                                                                   // 9972
   * @param {ReactComponent} component Component to dereference.                                                       // 9973
   * @param {string} ref Name of the ref to remove.                                                                    // 9974
   * @param {ReactOwner} owner Component on which the ref is recorded.                                                 // 9975
   * @final                                                                                                            // 9976
   * @internal                                                                                                         // 9977
   */                                                                                                                  // 9978
  removeComponentAsRefFrom: function(component, ref, owner) {                                                          // 9979
    ("production" !== "development" ? invariant(                                                                       // 9980
      ReactOwner.isValidOwner(owner),                                                                                  // 9981
      'removeComponentAsRefFrom(...): Only a ReactOwner can have refs.'                                                // 9982
    ) : invariant(ReactOwner.isValidOwner(owner)));                                                                    // 9983
    // Check that `component` is still the current ref because we do not want to                                       // 9984
    // detach the ref if another component stole it.                                                                   // 9985
    if (owner.refs[ref] === component) {                                                                               // 9986
      owner.detachRef(ref);                                                                                            // 9987
    }                                                                                                                  // 9988
  },                                                                                                                   // 9989
                                                                                                                       // 9990
  /**                                                                                                                  // 9991
   * A ReactComponent must mix this in to have refs.                                                                   // 9992
   *                                                                                                                   // 9993
   * @lends {ReactOwner.prototype}                                                                                     // 9994
   */                                                                                                                  // 9995
  Mixin: {                                                                                                             // 9996
                                                                                                                       // 9997
    /**                                                                                                                // 9998
     * Lazily allocates the refs object and stores `component` as `ref`.                                               // 9999
     *                                                                                                                 // 10000
     * @param {string} ref Reference name.                                                                             // 10001
     * @param {component} component Component to store as `ref`.                                                       // 10002
     * @final                                                                                                          // 10003
     * @private                                                                                                        // 10004
     */                                                                                                                // 10005
    attachRef: function(ref, component) {                                                                              // 10006
      ("production" !== "development" ? invariant(                                                                     // 10007
        component.isOwnedBy(this),                                                                                     // 10008
        'attachRef(%s, ...): Only a component\'s owner can store a ref to it.',                                        // 10009
        ref                                                                                                            // 10010
      ) : invariant(component.isOwnedBy(this)));                                                                       // 10011
      var refs = this.refs || (this.refs = {});                                                                        // 10012
      refs[ref] = component;                                                                                           // 10013
    },                                                                                                                 // 10014
                                                                                                                       // 10015
    /**                                                                                                                // 10016
     * Detaches a reference name.                                                                                      // 10017
     *                                                                                                                 // 10018
     * @param {string} ref Name to dereference.                                                                        // 10019
     * @final                                                                                                          // 10020
     * @private                                                                                                        // 10021
     */                                                                                                                // 10022
    detachRef: function(ref) {                                                                                         // 10023
      delete this.refs[ref];                                                                                           // 10024
    }                                                                                                                  // 10025
                                                                                                                       // 10026
  }                                                                                                                    // 10027
                                                                                                                       // 10028
};                                                                                                                     // 10029
                                                                                                                       // 10030
module.exports = ReactOwner;                                                                                           // 10031
                                                                                                                       // 10032
},{"./invariant":109}],59:[function(require,module,exports){                                                           // 10033
/**                                                                                                                    // 10034
 * Copyright 2013 Facebook, Inc.                                                                                       // 10035
 *                                                                                                                     // 10036
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 10037
 * you may not use this file except in compliance with the License.                                                    // 10038
 * You may obtain a copy of the License at                                                                             // 10039
 *                                                                                                                     // 10040
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 10041
 *                                                                                                                     // 10042
 * Unless required by applicable law or agreed to in writing, software                                                 // 10043
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 10044
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 10045
 * See the License for the specific language governing permissions and                                                 // 10046
 * limitations under the License.                                                                                      // 10047
 *                                                                                                                     // 10048
 * @providesModule ReactPerf                                                                                           // 10049
 * @typechecks static-only                                                                                             // 10050
 */                                                                                                                    // 10051
                                                                                                                       // 10052
"use strict";                                                                                                          // 10053
                                                                                                                       // 10054
var ReactPerf = {                                                                                                      // 10055
  /**                                                                                                                  // 10056
   * Boolean to enable/disable measurement. Set to false by default to prevent                                         // 10057
   * accidental logging and perf loss.                                                                                 // 10058
   */                                                                                                                  // 10059
  enableMeasure: false,                                                                                                // 10060
                                                                                                                       // 10061
  /**                                                                                                                  // 10062
   * Holds onto the measure function in use. By default, don't measure                                                 // 10063
   * anything, but we'll override this if we inject a measure function.                                                // 10064
   */                                                                                                                  // 10065
  storedMeasure: _noMeasure,                                                                                           // 10066
                                                                                                                       // 10067
  /**                                                                                                                  // 10068
   * Use this to wrap methods you want to measure.                                                                     // 10069
   *                                                                                                                   // 10070
   * @param {string} objName                                                                                           // 10071
   * @param {string} fnName                                                                                            // 10072
   * @param {function} func                                                                                            // 10073
   * @return {function}                                                                                                // 10074
   */                                                                                                                  // 10075
  measure: function(objName, fnName, func) {                                                                           // 10076
    if ("production" !== "development") {                                                                              // 10077
      var measuredFunc = null;                                                                                         // 10078
      return function() {                                                                                              // 10079
        if (ReactPerf.enableMeasure) {                                                                                 // 10080
          if (!measuredFunc) {                                                                                         // 10081
            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);                                             // 10082
          }                                                                                                            // 10083
          return measuredFunc.apply(this, arguments);                                                                  // 10084
        }                                                                                                              // 10085
        return func.apply(this, arguments);                                                                            // 10086
      };                                                                                                               // 10087
    }                                                                                                                  // 10088
    return func;                                                                                                       // 10089
  },                                                                                                                   // 10090
                                                                                                                       // 10091
  injection: {                                                                                                         // 10092
    /**                                                                                                                // 10093
     * @param {function} measure                                                                                       // 10094
     */                                                                                                                // 10095
    injectMeasure: function(measure) {                                                                                 // 10096
      ReactPerf.storedMeasure = measure;                                                                               // 10097
    }                                                                                                                  // 10098
  }                                                                                                                    // 10099
};                                                                                                                     // 10100
                                                                                                                       // 10101
if ("production" !== "development") {                                                                                  // 10102
  var ExecutionEnvironment = require("./ExecutionEnvironment");                                                        // 10103
  var url = (ExecutionEnvironment.canUseDOM && window.location.href) || '';                                            // 10104
  ReactPerf.enableMeasure = ReactPerf.enableMeasure ||                                                                 // 10105
    (/[?&]react_perf\b/).test(url);                                                                                    // 10106
}                                                                                                                      // 10107
                                                                                                                       // 10108
/**                                                                                                                    // 10109
 * Simply passes through the measured function, without measuring it.                                                  // 10110
 *                                                                                                                     // 10111
 * @param {string} objName                                                                                             // 10112
 * @param {string} fnName                                                                                              // 10113
 * @param {function} func                                                                                              // 10114
 * @return {function}                                                                                                  // 10115
 */                                                                                                                    // 10116
function _noMeasure(objName, fnName, func) {                                                                           // 10117
  return func;                                                                                                         // 10118
}                                                                                                                      // 10119
                                                                                                                       // 10120
module.exports = ReactPerf;                                                                                            // 10121
                                                                                                                       // 10122
},{"./ExecutionEnvironment":21}],60:[function(require,module,exports){                                                 // 10123
/**                                                                                                                    // 10124
 * Copyright 2013 Facebook, Inc.                                                                                       // 10125
 *                                                                                                                     // 10126
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 10127
 * you may not use this file except in compliance with the License.                                                    // 10128
 * You may obtain a copy of the License at                                                                             // 10129
 *                                                                                                                     // 10130
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 10131
 *                                                                                                                     // 10132
 * Unless required by applicable law or agreed to in writing, software                                                 // 10133
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 10134
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 10135
 * See the License for the specific language governing permissions and                                                 // 10136
 * limitations under the License.                                                                                      // 10137
 *                                                                                                                     // 10138
 * @providesModule ReactPropTransferer                                                                                 // 10139
 */                                                                                                                    // 10140
                                                                                                                       // 10141
"use strict";                                                                                                          // 10142
                                                                                                                       // 10143
var emptyFunction = require("./emptyFunction");                                                                        // 10144
var invariant = require("./invariant");                                                                                // 10145
var joinClasses = require("./joinClasses");                                                                            // 10146
var merge = require("./merge");                                                                                        // 10147
                                                                                                                       // 10148
/**                                                                                                                    // 10149
 * Creates a transfer strategy that will merge prop values using the supplied                                          // 10150
 * `mergeStrategy`. If a prop was previously unset, this just sets it.                                                 // 10151
 *                                                                                                                     // 10152
 * @param {function} mergeStrategy                                                                                     // 10153
 * @return {function}                                                                                                  // 10154
 */                                                                                                                    // 10155
function createTransferStrategy(mergeStrategy) {                                                                       // 10156
  return function(props, key, value) {                                                                                 // 10157
    if (!props.hasOwnProperty(key)) {                                                                                  // 10158
      props[key] = value;                                                                                              // 10159
    } else {                                                                                                           // 10160
      props[key] = mergeStrategy(props[key], value);                                                                   // 10161
    }                                                                                                                  // 10162
  };                                                                                                                   // 10163
}                                                                                                                      // 10164
                                                                                                                       // 10165
/**                                                                                                                    // 10166
 * Transfer strategies dictate how props are transferred by `transferPropsTo`.                                         // 10167
 */                                                                                                                    // 10168
var TransferStrategies = {                                                                                             // 10169
  /**                                                                                                                  // 10170
   * Never transfer `children`.                                                                                        // 10171
   */                                                                                                                  // 10172
  children: emptyFunction,                                                                                             // 10173
  /**                                                                                                                  // 10174
   * Transfer the `className` prop by merging them.                                                                    // 10175
   */                                                                                                                  // 10176
  className: createTransferStrategy(joinClasses),                                                                      // 10177
  /**                                                                                                                  // 10178
   * Never transfer the `ref` prop.                                                                                    // 10179
   */                                                                                                                  // 10180
  ref: emptyFunction,                                                                                                  // 10181
  /**                                                                                                                  // 10182
   * Transfer the `style` prop (which is an object) by merging them.                                                   // 10183
   */                                                                                                                  // 10184
  style: createTransferStrategy(merge)                                                                                 // 10185
};                                                                                                                     // 10186
                                                                                                                       // 10187
/**                                                                                                                    // 10188
 * ReactPropTransferer are capable of transferring props to another component                                          // 10189
 * using a `transferPropsTo` method.                                                                                   // 10190
 *                                                                                                                     // 10191
 * @class ReactPropTransferer                                                                                          // 10192
 */                                                                                                                    // 10193
var ReactPropTransferer = {                                                                                            // 10194
                                                                                                                       // 10195
  TransferStrategies: TransferStrategies,                                                                              // 10196
                                                                                                                       // 10197
  /**                                                                                                                  // 10198
   * @lends {ReactPropTransferer.prototype}                                                                            // 10199
   */                                                                                                                  // 10200
  Mixin: {                                                                                                             // 10201
                                                                                                                       // 10202
    /**                                                                                                                // 10203
     * Transfer props from this component to a target component.                                                       // 10204
     *                                                                                                                 // 10205
     * Props that do not have an explicit transfer strategy will be transferred                                        // 10206
     * only if the target component does not already have the prop set.                                                // 10207
     *                                                                                                                 // 10208
     * This is usually used to pass down props to a returned root component.                                           // 10209
     *                                                                                                                 // 10210
     * @param {ReactComponent} component Component receiving the properties.                                           // 10211
     * @return {ReactComponent} The supplied `component`.                                                              // 10212
     * @final                                                                                                          // 10213
     * @protected                                                                                                      // 10214
     */                                                                                                                // 10215
    transferPropsTo: function(component) {                                                                             // 10216
      ("production" !== "development" ? invariant(                                                                     // 10217
        component.props.__owner__ === this,                                                                            // 10218
        '%s: You can\'t call transferPropsTo() on a component that you ' +                                             // 10219
        'don\'t own, %s. This usually means you are calling ' +                                                        // 10220
        'transferPropsTo() on a component passed in as props or children.',                                            // 10221
        this.constructor.displayName,                                                                                  // 10222
        component.constructor.displayName                                                                              // 10223
      ) : invariant(component.props.__owner__ === this));                                                              // 10224
                                                                                                                       // 10225
      var props = {};                                                                                                  // 10226
      for (var thatKey in component.props) {                                                                           // 10227
        if (component.props.hasOwnProperty(thatKey)) {                                                                 // 10228
          props[thatKey] = component.props[thatKey];                                                                   // 10229
        }                                                                                                              // 10230
      }                                                                                                                // 10231
      for (var thisKey in this.props) {                                                                                // 10232
        if (!this.props.hasOwnProperty(thisKey)) {                                                                     // 10233
          continue;                                                                                                    // 10234
        }                                                                                                              // 10235
        var transferStrategy = TransferStrategies[thisKey];                                                            // 10236
        if (transferStrategy) {                                                                                        // 10237
          transferStrategy(props, thisKey, this.props[thisKey]);                                                       // 10238
        } else if (!props.hasOwnProperty(thisKey)) {                                                                   // 10239
          props[thisKey] = this.props[thisKey];                                                                        // 10240
        }                                                                                                              // 10241
      }                                                                                                                // 10242
      component.props = props;                                                                                         // 10243
      return component;                                                                                                // 10244
    }                                                                                                                  // 10245
                                                                                                                       // 10246
  }                                                                                                                    // 10247
                                                                                                                       // 10248
};                                                                                                                     // 10249
                                                                                                                       // 10250
module.exports = ReactPropTransferer;                                                                                  // 10251
                                                                                                                       // 10252
},{"./emptyFunction":94,"./invariant":109,"./joinClasses":114,"./merge":118}],61:[function(require,module,exports){    // 10253
/**                                                                                                                    // 10254
 * Copyright 2013 Facebook, Inc.                                                                                       // 10255
 *                                                                                                                     // 10256
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 10257
 * you may not use this file except in compliance with the License.                                                    // 10258
 * You may obtain a copy of the License at                                                                             // 10259
 *                                                                                                                     // 10260
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 10261
 *                                                                                                                     // 10262
 * Unless required by applicable law or agreed to in writing, software                                                 // 10263
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 10264
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 10265
 * See the License for the specific language governing permissions and                                                 // 10266
 * limitations under the License.                                                                                      // 10267
 *                                                                                                                     // 10268
 * @providesModule ReactPropTypes                                                                                      // 10269
 */                                                                                                                    // 10270
                                                                                                                       // 10271
"use strict";                                                                                                          // 10272
                                                                                                                       // 10273
var createObjectFrom = require("./createObjectFrom");                                                                  // 10274
var invariant = require("./invariant");                                                                                // 10275
                                                                                                                       // 10276
/**                                                                                                                    // 10277
 * Collection of methods that allow declaration and validation of props that are                                       // 10278
 * supplied to React components. Example usage:                                                                        // 10279
 *                                                                                                                     // 10280
 *   var Props = require('ReactPropTypes');                                                                            // 10281
 *   var MyArticle = React.createClass({                                                                               // 10282
 *     propTypes: {                                                                                                    // 10283
 *       // An optional string prop named "description".                                                               // 10284
 *       description: Props.string,                                                                                    // 10285
 *                                                                                                                     // 10286
 *       // A required enum prop named "category".                                                                     // 10287
 *       category: Props.oneOf(['News','Photos']).isRequired,                                                          // 10288
 *                                                                                                                     // 10289
 *       // A prop named "dialog" that requires an instance of Dialog.                                                 // 10290
 *       dialog: Props.instanceOf(Dialog).isRequired                                                                   // 10291
 *     },                                                                                                              // 10292
 *     render: function() { ... }                                                                                      // 10293
 *   });                                                                                                               // 10294
 *                                                                                                                     // 10295
 * A more formal specification of how these methods are used:                                                          // 10296
 *                                                                                                                     // 10297
 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)                                         // 10298
 *   decl := ReactPropTypes.{type}(.isRequired)?                                                                       // 10299
 *                                                                                                                     // 10300
 * Each and every declaration produces a function with the same signature. This                                        // 10301
 * allows the creation of custom validation functions. For example:                                                    // 10302
 *                                                                                                                     // 10303
 *   var Props = require('ReactPropTypes');                                                                            // 10304
 *   var MyLink = React.createClass({                                                                                  // 10305
 *     propTypes: {                                                                                                    // 10306
 *       // An optional string or URI prop named "href".                                                               // 10307
 *       href: function(props, propName, componentName) {                                                              // 10308
 *         var propValue = props[propName];                                                                            // 10309
 *         invariant(                                                                                                  // 10310
 *           propValue == null ||                                                                                      // 10311
 *           typeof propValue === 'string' ||                                                                          // 10312
 *           propValue instanceof URI,                                                                                 // 10313
 *           'Invalid `%s` supplied to `%s`, expected string or URI.',                                                 // 10314
 *           propName,                                                                                                 // 10315
 *           componentName                                                                                             // 10316
 *         );                                                                                                          // 10317
 *       }                                                                                                             // 10318
 *     },                                                                                                              // 10319
 *     render: function() { ... }                                                                                      // 10320
 *   });                                                                                                               // 10321
 *                                                                                                                     // 10322
 * @internal                                                                                                           // 10323
 */                                                                                                                    // 10324
var Props = {                                                                                                          // 10325
                                                                                                                       // 10326
  array: createPrimitiveTypeChecker('array'),                                                                          // 10327
  bool: createPrimitiveTypeChecker('boolean'),                                                                         // 10328
  func: createPrimitiveTypeChecker('function'),                                                                        // 10329
  number: createPrimitiveTypeChecker('number'),                                                                        // 10330
  object: createPrimitiveTypeChecker('object'),                                                                        // 10331
  string: createPrimitiveTypeChecker('string'),                                                                        // 10332
                                                                                                                       // 10333
  oneOf: createEnumTypeChecker,                                                                                        // 10334
                                                                                                                       // 10335
  instanceOf: createInstanceTypeChecker                                                                                // 10336
                                                                                                                       // 10337
};                                                                                                                     // 10338
                                                                                                                       // 10339
var ANONYMOUS = '<<anonymous>>';                                                                                       // 10340
                                                                                                                       // 10341
function createPrimitiveTypeChecker(expectedType) {                                                                    // 10342
  function validatePrimitiveType(propValue, propName, componentName) {                                                 // 10343
    var propType = typeof propValue;                                                                                   // 10344
    if (propType === 'object' && Array.isArray(propValue)) {                                                           // 10345
      propType = 'array';                                                                                              // 10346
    }                                                                                                                  // 10347
    ("production" !== "development" ? invariant(                                                                       // 10348
      propType === expectedType,                                                                                       // 10349
      'Invalid prop `%s` of type `%s` supplied to `%s`, expected `%s`.',                                               // 10350
      propName,                                                                                                        // 10351
      propType,                                                                                                        // 10352
      componentName,                                                                                                   // 10353
      expectedType                                                                                                     // 10354
    ) : invariant(propType === expectedType));                                                                         // 10355
  }                                                                                                                    // 10356
  return createChainableTypeChecker(validatePrimitiveType);                                                            // 10357
}                                                                                                                      // 10358
                                                                                                                       // 10359
function createEnumTypeChecker(expectedValues) {                                                                       // 10360
  var expectedEnum = createObjectFrom(expectedValues);                                                                 // 10361
  function validateEnumType(propValue, propName, componentName) {                                                      // 10362
    ("production" !== "development" ? invariant(                                                                       // 10363
      expectedEnum[propValue],                                                                                         // 10364
      'Invalid prop `%s` supplied to `%s`, expected one of %s.',                                                       // 10365
      propName,                                                                                                        // 10366
      componentName,                                                                                                   // 10367
      JSON.stringify(Object.keys(expectedEnum))                                                                        // 10368
    ) : invariant(expectedEnum[propValue]));                                                                           // 10369
  }                                                                                                                    // 10370
  return createChainableTypeChecker(validateEnumType);                                                                 // 10371
}                                                                                                                      // 10372
                                                                                                                       // 10373
function createInstanceTypeChecker(expectedClass) {                                                                    // 10374
  function validateInstanceType(propValue, propName, componentName) {                                                  // 10375
    ("production" !== "development" ? invariant(                                                                       // 10376
      propValue instanceof expectedClass,                                                                              // 10377
      'Invalid prop `%s` supplied to `%s`, expected instance of `%s`.',                                                // 10378
      propName,                                                                                                        // 10379
      componentName,                                                                                                   // 10380
      expectedClass.name || ANONYMOUS                                                                                  // 10381
    ) : invariant(propValue instanceof expectedClass));                                                                // 10382
  }                                                                                                                    // 10383
  return createChainableTypeChecker(validateInstanceType);                                                             // 10384
}                                                                                                                      // 10385
                                                                                                                       // 10386
function createChainableTypeChecker(validate) {                                                                        // 10387
  function createTypeChecker(isRequired) {                                                                             // 10388
    function checkType(props, propName, componentName) {                                                               // 10389
      var propValue = props[propName];                                                                                 // 10390
      if (propValue != null) {                                                                                         // 10391
        // Only validate if there is a value to check.                                                                 // 10392
        validate(propValue, propName, componentName || ANONYMOUS);                                                     // 10393
      } else {                                                                                                         // 10394
        ("production" !== "development" ? invariant(                                                                   // 10395
          !isRequired,                                                                                                 // 10396
          'Required prop `%s` was not specified in `%s`.',                                                             // 10397
          propName,                                                                                                    // 10398
          componentName || ANONYMOUS                                                                                   // 10399
        ) : invariant(!isRequired));                                                                                   // 10400
      }                                                                                                                // 10401
    }                                                                                                                  // 10402
    if (!isRequired) {                                                                                                 // 10403
      checkType.isRequired = createTypeChecker(true);                                                                  // 10404
    }                                                                                                                  // 10405
    return checkType;                                                                                                  // 10406
  }                                                                                                                    // 10407
  return createTypeChecker(false);                                                                                     // 10408
}                                                                                                                      // 10409
                                                                                                                       // 10410
module.exports = Props;                                                                                                // 10411
                                                                                                                       // 10412
},{"./createObjectFrom":91,"./invariant":109}],62:[function(require,module,exports){                                   // 10413
/**                                                                                                                    // 10414
 * Copyright 2013 Facebook, Inc.                                                                                       // 10415
 *                                                                                                                     // 10416
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 10417
 * you may not use this file except in compliance with the License.                                                    // 10418
 * You may obtain a copy of the License at                                                                             // 10419
 *                                                                                                                     // 10420
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 10421
 *                                                                                                                     // 10422
 * Unless required by applicable law or agreed to in writing, software                                                 // 10423
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 10424
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 10425
 * See the License for the specific language governing permissions and                                                 // 10426
 * limitations under the License.                                                                                      // 10427
 *                                                                                                                     // 10428
 * @providesModule ReactReconcileTransaction                                                                           // 10429
 * @typechecks static-only                                                                                             // 10430
 */                                                                                                                    // 10431
                                                                                                                       // 10432
"use strict";                                                                                                          // 10433
                                                                                                                       // 10434
var ExecutionEnvironment = require("./ExecutionEnvironment");                                                          // 10435
var PooledClass = require("./PooledClass");                                                                            // 10436
var ReactEventEmitter = require("./ReactEventEmitter");                                                                // 10437
var ReactInputSelection = require("./ReactInputSelection");                                                            // 10438
var ReactMountReady = require("./ReactMountReady");                                                                    // 10439
var Transaction = require("./Transaction");                                                                            // 10440
                                                                                                                       // 10441
var mixInto = require("./mixInto");                                                                                    // 10442
                                                                                                                       // 10443
/**                                                                                                                    // 10444
 * Ensures that, when possible, the selection range (currently selected text                                           // 10445
 * input) is not disturbed by performing the transaction.                                                              // 10446
 */                                                                                                                    // 10447
var SELECTION_RESTORATION = {                                                                                          // 10448
  /**                                                                                                                  // 10449
   * @return {Selection} Selection information.                                                                        // 10450
   */                                                                                                                  // 10451
  initialize: ReactInputSelection.getSelectionInformation,                                                             // 10452
  /**                                                                                                                  // 10453
   * @param {Selection} sel Selection information returned from `initialize`.                                          // 10454
   */                                                                                                                  // 10455
  close: ReactInputSelection.restoreSelection                                                                          // 10456
};                                                                                                                     // 10457
                                                                                                                       // 10458
/**                                                                                                                    // 10459
 * Suppresses events (blur/focus) that could be inadvertently dispatched due to                                        // 10460
 * high level DOM manipulations (like temporarily removing a text input from the                                       // 10461
 * DOM).                                                                                                               // 10462
 */                                                                                                                    // 10463
var EVENT_SUPPRESSION = {                                                                                              // 10464
  /**                                                                                                                  // 10465
   * @return {boolean} The enabled status of `ReactEventEmitter` before the                                            // 10466
   * reconciliation.                                                                                                   // 10467
   */                                                                                                                  // 10468
  initialize: function() {                                                                                             // 10469
    var currentlyEnabled = ReactEventEmitter.isEnabled();                                                              // 10470
    ReactEventEmitter.setEnabled(false);                                                                               // 10471
    return currentlyEnabled;                                                                                           // 10472
  },                                                                                                                   // 10473
                                                                                                                       // 10474
  /**                                                                                                                  // 10475
   * @param {boolean} previouslyEnabled Enabled status of `ReactEventEmitter`                                          // 10476
   *   before the reconciliation occured. `close` restores the previous value.                                         // 10477
   */                                                                                                                  // 10478
  close: function(previouslyEnabled) {                                                                                 // 10479
    ReactEventEmitter.setEnabled(previouslyEnabled);                                                                   // 10480
  }                                                                                                                    // 10481
};                                                                                                                     // 10482
                                                                                                                       // 10483
/**                                                                                                                    // 10484
 * Provides a `ReactMountReady` queue for collecting `onDOMReady` callbacks                                            // 10485
 * during the performing of the transaction.                                                                           // 10486
 */                                                                                                                    // 10487
var ON_DOM_READY_QUEUEING = {                                                                                          // 10488
  /**                                                                                                                  // 10489
   * Initializes the internal `onDOMReady` queue.                                                                      // 10490
   */                                                                                                                  // 10491
  initialize: function() {                                                                                             // 10492
    this.reactMountReady.reset();                                                                                      // 10493
  },                                                                                                                   // 10494
                                                                                                                       // 10495
  /**                                                                                                                  // 10496
   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.                                               // 10497
   */                                                                                                                  // 10498
  close: function() {                                                                                                  // 10499
    this.reactMountReady.notifyAll();                                                                                  // 10500
  }                                                                                                                    // 10501
};                                                                                                                     // 10502
                                                                                                                       // 10503
/**                                                                                                                    // 10504
 * Executed within the scope of the `Transaction` instance. Consider these as                                          // 10505
 * being member methods, but with an implied ordering while being isolated from                                        // 10506
 * each other.                                                                                                         // 10507
 */                                                                                                                    // 10508
var TRANSACTION_WRAPPERS = [                                                                                           // 10509
  SELECTION_RESTORATION,                                                                                               // 10510
  EVENT_SUPPRESSION,                                                                                                   // 10511
  ON_DOM_READY_QUEUEING                                                                                                // 10512
];                                                                                                                     // 10513
                                                                                                                       // 10514
/**                                                                                                                    // 10515
 * Currently:                                                                                                          // 10516
 * - The order that these are listed in the transaction is critical:                                                   // 10517
 * - Suppresses events.                                                                                                // 10518
 * - Restores selection range.                                                                                         // 10519
 *                                                                                                                     // 10520
 * Future:                                                                                                             // 10521
 * - Restore document/overflow scroll positions that were unintentionally                                              // 10522
 *   modified via DOM insertions above the top viewport boundary.                                                      // 10523
 * - Implement/integrate with customized constraint based layout system and keep                                       // 10524
 *   track of which dimensions must be remeasured.                                                                     // 10525
 *                                                                                                                     // 10526
 * @class ReactReconcileTransaction                                                                                    // 10527
 */                                                                                                                    // 10528
function ReactReconcileTransaction() {                                                                                 // 10529
  this.reinitializeTransaction();                                                                                      // 10530
  this.reactMountReady = ReactMountReady.getPooled(null);                                                              // 10531
}                                                                                                                      // 10532
                                                                                                                       // 10533
var Mixin = {                                                                                                          // 10534
  /**                                                                                                                  // 10535
   * @see Transaction                                                                                                  // 10536
   * @abstract                                                                                                         // 10537
   * @final                                                                                                            // 10538
   * @return {array<object>} List of operation wrap proceedures.                                                       // 10539
   *   TODO: convert to array<TransactionWrapper>                                                                      // 10540
   */                                                                                                                  // 10541
  getTransactionWrappers: function() {                                                                                 // 10542
    if (ExecutionEnvironment.canUseDOM) {                                                                              // 10543
      return TRANSACTION_WRAPPERS;                                                                                     // 10544
    } else {                                                                                                           // 10545
      return [];                                                                                                       // 10546
    }                                                                                                                  // 10547
  },                                                                                                                   // 10548
                                                                                                                       // 10549
  /**                                                                                                                  // 10550
   * @return {object} The queue to collect `onDOMReady` callbacks with.                                                // 10551
   *   TODO: convert to ReactMountReady                                                                                // 10552
   */                                                                                                                  // 10553
  getReactMountReady: function() {                                                                                     // 10554
    return this.reactMountReady;                                                                                       // 10555
  },                                                                                                                   // 10556
                                                                                                                       // 10557
  /**                                                                                                                  // 10558
   * `PooledClass` looks for this, and will invoke this before allowing this                                           // 10559
   * instance to be resused.                                                                                           // 10560
   */                                                                                                                  // 10561
  destructor: function() {                                                                                             // 10562
    ReactMountReady.release(this.reactMountReady);                                                                     // 10563
    this.reactMountReady = null;                                                                                       // 10564
  }                                                                                                                    // 10565
};                                                                                                                     // 10566
                                                                                                                       // 10567
                                                                                                                       // 10568
mixInto(ReactReconcileTransaction, Transaction.Mixin);                                                                 // 10569
mixInto(ReactReconcileTransaction, Mixin);                                                                             // 10570
                                                                                                                       // 10571
PooledClass.addPoolingTo(ReactReconcileTransaction);                                                                   // 10572
                                                                                                                       // 10573
module.exports = ReactReconcileTransaction;                                                                            // 10574
                                                                                                                       // 10575
},{"./ExecutionEnvironment":21,"./PooledClass":25,"./ReactEventEmitter":47,"./ReactInputSelection":50,"./ReactMountReady":55,"./Transaction":83,"./mixInto":121}],63:[function(require,module,exports){
/**                                                                                                                    // 10577
 * Copyright 2013 Facebook, Inc.                                                                                       // 10578
 *                                                                                                                     // 10579
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 10580
 * you may not use this file except in compliance with the License.                                                    // 10581
 * You may obtain a copy of the License at                                                                             // 10582
 *                                                                                                                     // 10583
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 10584
 *                                                                                                                     // 10585
 * Unless required by applicable law or agreed to in writing, software                                                 // 10586
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 10587
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 10588
 * See the License for the specific language governing permissions and                                                 // 10589
 * limitations under the License.                                                                                      // 10590
 *                                                                                                                     // 10591
 * @typechecks static-only                                                                                             // 10592
 * @providesModule ReactServerRendering                                                                                // 10593
 */                                                                                                                    // 10594
"use strict";                                                                                                          // 10595
                                                                                                                       // 10596
var ReactComponent = require("./ReactComponent");                                                                      // 10597
var ReactInstanceHandles = require("./ReactInstanceHandles");                                                          // 10598
var ReactMarkupChecksum = require("./ReactMarkupChecksum");                                                            // 10599
var ReactReconcileTransaction = require("./ReactReconcileTransaction");                                                // 10600
                                                                                                                       // 10601
var invariant = require("./invariant");                                                                                // 10602
                                                                                                                       // 10603
/**                                                                                                                    // 10604
 * @param {ReactComponent} component                                                                                   // 10605
 * @param {function} callback                                                                                          // 10606
 */                                                                                                                    // 10607
function renderComponentToString(component, callback) {                                                                // 10608
  // We use a callback API to keep the API async in case in the future we ever                                         // 10609
  // need it, but in reality this is a synchronous operation.                                                          // 10610
                                                                                                                       // 10611
  ("production" !== "development" ? invariant(                                                                         // 10612
    ReactComponent.isValidComponent(component),                                                                        // 10613
    'renderComponentToString(): You must pass a valid ReactComponent.'                                                 // 10614
  ) : invariant(ReactComponent.isValidComponent(component)));                                                          // 10615
                                                                                                                       // 10616
  ("production" !== "development" ? invariant(                                                                         // 10617
    typeof callback === 'function',                                                                                    // 10618
    'renderComponentToString(): You must pass a function as a callback.'                                               // 10619
  ) : invariant(typeof callback === 'function'));                                                                      // 10620
                                                                                                                       // 10621
  var id = ReactInstanceHandles.createReactRootID();                                                                   // 10622
  var transaction = ReactReconcileTransaction.getPooled();                                                             // 10623
  transaction.reinitializeTransaction();                                                                               // 10624
  try {                                                                                                                // 10625
    transaction.perform(function() {                                                                                   // 10626
      var markup = component.mountComponent(id, transaction, 0);                                                       // 10627
      markup = ReactMarkupChecksum.addChecksumToMarkup(markup);                                                        // 10628
      callback(markup);                                                                                                // 10629
    }, null);                                                                                                          // 10630
  } finally {                                                                                                          // 10631
    ReactReconcileTransaction.release(transaction);                                                                    // 10632
  }                                                                                                                    // 10633
}                                                                                                                      // 10634
                                                                                                                       // 10635
module.exports = {                                                                                                     // 10636
  renderComponentToString: renderComponentToString                                                                     // 10637
};                                                                                                                     // 10638
                                                                                                                       // 10639
},{"./ReactComponent":28,"./ReactInstanceHandles":51,"./ReactMarkupChecksum":53,"./ReactReconcileTransaction":62,"./invariant":109}],64:[function(require,module,exports){
/**                                                                                                                    // 10641
 * Copyright 2013 Facebook, Inc.                                                                                       // 10642
 *                                                                                                                     // 10643
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 10644
 * you may not use this file except in compliance with the License.                                                    // 10645
 * You may obtain a copy of the License at                                                                             // 10646
 *                                                                                                                     // 10647
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 10648
 *                                                                                                                     // 10649
 * Unless required by applicable law or agreed to in writing, software                                                 // 10650
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 10651
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 10652
 * See the License for the specific language governing permissions and                                                 // 10653
 * limitations under the License.                                                                                      // 10654
 *                                                                                                                     // 10655
 * @providesModule ReactStateSetters                                                                                   // 10656
 */                                                                                                                    // 10657
                                                                                                                       // 10658
"use strict";                                                                                                          // 10659
                                                                                                                       // 10660
var ReactStateSetters = {                                                                                              // 10661
  /**                                                                                                                  // 10662
   * Returns a function that calls the provided function, and uses the result                                          // 10663
   * of that to set the component's state.                                                                             // 10664
   *                                                                                                                   // 10665
   * @param {ReactCompositeComponent} component                                                                        // 10666
   * @param {function} funcReturningState Returned callback uses this to                                               // 10667
   *                                      determine how to update state.                                               // 10668
   * @return {function} callback that when invoked uses funcReturningState to                                          // 10669
   *                    determined the object literal to setState.                                                     // 10670
   */                                                                                                                  // 10671
  createStateSetter: function(component, funcReturningState) {                                                         // 10672
    return function(a, b, c, d, e, f) {                                                                                // 10673
      var partialState = funcReturningState.call(component, a, b, c, d, e, f);                                         // 10674
      if (partialState) {                                                                                              // 10675
        component.setState(partialState);                                                                              // 10676
      }                                                                                                                // 10677
    };                                                                                                                 // 10678
  },                                                                                                                   // 10679
                                                                                                                       // 10680
  /**                                                                                                                  // 10681
   * Returns a single-argument callback that can be used to update a single                                            // 10682
   * key in the component's state.                                                                                     // 10683
   *                                                                                                                   // 10684
   * Note: this is memoized function, which makes it inexpensive to call.                                              // 10685
   *                                                                                                                   // 10686
   * @param {ReactCompositeComponent} component                                                                        // 10687
   * @param {string} key The key in the state that you should update.                                                  // 10688
   * @return {function} callback of 1 argument which calls setState() with                                             // 10689
   *                    the provided keyName and callback argument.                                                    // 10690
   */                                                                                                                  // 10691
  createStateKeySetter: function(component, key) {                                                                     // 10692
    // Memoize the setters.                                                                                            // 10693
    var cache = component.__keySetters || (component.__keySetters = {});                                               // 10694
    return cache[key] || (cache[key] = createStateKeySetter(component, key));                                          // 10695
  }                                                                                                                    // 10696
};                                                                                                                     // 10697
                                                                                                                       // 10698
function createStateKeySetter(component, key) {                                                                        // 10699
  // Partial state is allocated outside of the function closure so it can be                                           // 10700
  // reused with every call, avoiding memory allocation when this function                                             // 10701
  // is called.                                                                                                        // 10702
  var partialState = {};                                                                                               // 10703
  return function stateKeySetter(value) {                                                                              // 10704
    partialState[key] = value;                                                                                         // 10705
    component.setState(partialState);                                                                                  // 10706
  };                                                                                                                   // 10707
}                                                                                                                      // 10708
                                                                                                                       // 10709
ReactStateSetters.Mixin = {                                                                                            // 10710
  /**                                                                                                                  // 10711
   * Returns a function that calls the provided function, and uses the result                                          // 10712
   * of that to set the component's state.                                                                             // 10713
   *                                                                                                                   // 10714
   * For example, these statements are equivalent:                                                                     // 10715
   *                                                                                                                   // 10716
   *   this.setState({x: 1});                                                                                          // 10717
   *   this.createStateSetter(function(xValue) {                                                                       // 10718
   *     return {x: xValue};                                                                                           // 10719
   *   })(1);                                                                                                          // 10720
   *                                                                                                                   // 10721
   * @param {function} funcReturningState Returned callback uses this to                                               // 10722
   *                                      determine how to update state.                                               // 10723
   * @return {function} callback that when invoked uses funcReturningState to                                          // 10724
   *                    determined the object literal to setState.                                                     // 10725
   */                                                                                                                  // 10726
  createStateSetter: function(funcReturningState) {                                                                    // 10727
    return ReactStateSetters.createStateSetter(this, funcReturningState);                                              // 10728
  },                                                                                                                   // 10729
                                                                                                                       // 10730
  /**                                                                                                                  // 10731
   * Returns a single-argument callback that can be used to update a single                                            // 10732
   * key in the component's state.                                                                                     // 10733
   *                                                                                                                   // 10734
   * For example, these statements are equivalent:                                                                     // 10735
   *                                                                                                                   // 10736
   *   this.setState({x: 1});                                                                                          // 10737
   *   this.createStateKeySetter('x')(1);                                                                              // 10738
   *                                                                                                                   // 10739
   * Note: this is memoized function, which makes it inexpensive to call.                                              // 10740
   *                                                                                                                   // 10741
   * @param {string} key The key in the state that you should update.                                                  // 10742
   * @return {function} callback of 1 argument which calls setState() with                                             // 10743
   *                    the provided keyName and callback argument.                                                    // 10744
   */                                                                                                                  // 10745
  createStateKeySetter: function(key) {                                                                                // 10746
    return ReactStateSetters.createStateKeySetter(this, key);                                                          // 10747
  }                                                                                                                    // 10748
};                                                                                                                     // 10749
                                                                                                                       // 10750
module.exports = ReactStateSetters;                                                                                    // 10751
                                                                                                                       // 10752
},{}],65:[function(require,module,exports){                                                                            // 10753
/**                                                                                                                    // 10754
 * Copyright 2013 Facebook, Inc.                                                                                       // 10755
 *                                                                                                                     // 10756
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 10757
 * you may not use this file except in compliance with the License.                                                    // 10758
 * You may obtain a copy of the License at                                                                             // 10759
 *                                                                                                                     // 10760
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 10761
 *                                                                                                                     // 10762
 * Unless required by applicable law or agreed to in writing, software                                                 // 10763
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 10764
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 10765
 * See the License for the specific language governing permissions and                                                 // 10766
 * limitations under the License.                                                                                      // 10767
 *                                                                                                                     // 10768
 * @providesModule ReactTextComponent                                                                                  // 10769
 * @typechecks static-only                                                                                             // 10770
 */                                                                                                                    // 10771
                                                                                                                       // 10772
"use strict";                                                                                                          // 10773
                                                                                                                       // 10774
var ReactComponent = require("./ReactComponent");                                                                      // 10775
var ReactMount = require("./ReactMount");                                                                              // 10776
                                                                                                                       // 10777
var escapeTextForBrowser = require("./escapeTextForBrowser");                                                          // 10778
var mixInto = require("./mixInto");                                                                                    // 10779
                                                                                                                       // 10780
/**                                                                                                                    // 10781
 * Text nodes violate a couple assumptions that React makes about components:                                          // 10782
 *                                                                                                                     // 10783
 *  - When mounting text into the DOM, adjacent text nodes are merged.                                                 // 10784
 *  - Text nodes cannot be assigned a React root ID.                                                                   // 10785
 *                                                                                                                     // 10786
 * This component is used to wrap strings in elements so that they can undergo                                         // 10787
 * the same reconciliation that is applied to elements.                                                                // 10788
 *                                                                                                                     // 10789
 * TODO: Investigate representing React components in the DOM with text nodes.                                         // 10790
 *                                                                                                                     // 10791
 * @class ReactTextComponent                                                                                           // 10792
 * @extends ReactComponent                                                                                             // 10793
 * @internal                                                                                                           // 10794
 */                                                                                                                    // 10795
var ReactTextComponent = function(initialText) {                                                                       // 10796
  this.construct({text: initialText});                                                                                 // 10797
};                                                                                                                     // 10798
                                                                                                                       // 10799
mixInto(ReactTextComponent, ReactComponent.Mixin);                                                                     // 10800
mixInto(ReactTextComponent, {                                                                                          // 10801
                                                                                                                       // 10802
  /**                                                                                                                  // 10803
   * Creates the markup for this text node. This node is not intended to have                                          // 10804
   * any features besides containing text content.                                                                     // 10805
   *                                                                                                                   // 10806
   * @param {string} rootID DOM ID of the root node.                                                                   // 10807
   * @param {ReactReconcileTransaction} transaction                                                                    // 10808
   * @param {number} mountDepth number of components in the owner hierarchy                                            // 10809
   * @return {string} Markup for this text node.                                                                       // 10810
   * @internal                                                                                                         // 10811
   */                                                                                                                  // 10812
  mountComponent: function(rootID, transaction, mountDepth) {                                                          // 10813
    ReactComponent.Mixin.mountComponent.call(                                                                          // 10814
      this,                                                                                                            // 10815
      rootID,                                                                                                          // 10816
      transaction,                                                                                                     // 10817
      mountDepth                                                                                                       // 10818
    );                                                                                                                 // 10819
    return (                                                                                                           // 10820
      '<span ' + ReactMount.ATTR_NAME + '="' + escapeTextForBrowser(rootID) + '">' +                                   // 10821
        escapeTextForBrowser(this.props.text) +                                                                        // 10822
      '</span>'                                                                                                        // 10823
    );                                                                                                                 // 10824
  },                                                                                                                   // 10825
                                                                                                                       // 10826
  /**                                                                                                                  // 10827
   * Updates this component by updating the text content.                                                              // 10828
   *                                                                                                                   // 10829
   * @param {object} nextComponent Contains the next text content.                                                     // 10830
   * @param {ReactReconcileTransaction} transaction                                                                    // 10831
   * @internal                                                                                                         // 10832
   */                                                                                                                  // 10833
  receiveComponent: function(nextComponent, transaction) {                                                             // 10834
    var nextProps = nextComponent.props;                                                                               // 10835
    if (nextProps.text !== this.props.text) {                                                                          // 10836
      this.props.text = nextProps.text;                                                                                // 10837
      ReactComponent.DOMIDOperations.updateTextContentByID(                                                            // 10838
        this._rootNodeID,                                                                                              // 10839
        nextProps.text                                                                                                 // 10840
      );                                                                                                               // 10841
    }                                                                                                                  // 10842
  }                                                                                                                    // 10843
                                                                                                                       // 10844
});                                                                                                                    // 10845
                                                                                                                       // 10846
module.exports = ReactTextComponent;                                                                                   // 10847
                                                                                                                       // 10848
},{"./ReactComponent":28,"./ReactMount":54,"./escapeTextForBrowser":95,"./mixInto":121}],66:[function(require,module,exports){
/**                                                                                                                    // 10850
 * Copyright 2013 Facebook, Inc.                                                                                       // 10851
 *                                                                                                                     // 10852
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 10853
 * you may not use this file except in compliance with the License.                                                    // 10854
 * You may obtain a copy of the License at                                                                             // 10855
 *                                                                                                                     // 10856
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 10857
 *                                                                                                                     // 10858
 * Unless required by applicable law or agreed to in writing, software                                                 // 10859
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 10860
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 10861
 * See the License for the specific language governing permissions and                                                 // 10862
 * limitations under the License.                                                                                      // 10863
 *                                                                                                                     // 10864
 * @providesModule ReactTransitionEvents                                                                               // 10865
 */                                                                                                                    // 10866
                                                                                                                       // 10867
"use strict";                                                                                                          // 10868
                                                                                                                       // 10869
var ExecutionEnvironment = require("./ExecutionEnvironment");                                                          // 10870
                                                                                                                       // 10871
var EVENT_NAME_MAP = {                                                                                                 // 10872
  transitionend: {                                                                                                     // 10873
    'transition': 'transitionend',                                                                                     // 10874
    'WebkitTransition': 'webkitTransitionEnd',                                                                         // 10875
    'MozTransition': 'mozTransitionEnd',                                                                               // 10876
    'OTransition': 'oTransitionEnd',                                                                                   // 10877
    'msTransition': 'MSTransitionEnd'                                                                                  // 10878
  },                                                                                                                   // 10879
                                                                                                                       // 10880
  animationend: {                                                                                                      // 10881
    'animation': 'animationend',                                                                                       // 10882
    'WebkitAnimation': 'webkitAnimationEnd',                                                                           // 10883
    'MozAnimation': 'mozAnimationEnd',                                                                                 // 10884
    'OAnimation': 'oAnimationEnd',                                                                                     // 10885
    'msAnimation': 'MSAnimationEnd'                                                                                    // 10886
  }                                                                                                                    // 10887
};                                                                                                                     // 10888
                                                                                                                       // 10889
var endEvents = [];                                                                                                    // 10890
                                                                                                                       // 10891
function detectEvents() {                                                                                              // 10892
  var testEl = document.createElement('div');                                                                          // 10893
  var style = testEl.style;                                                                                            // 10894
  for (var baseEventName in EVENT_NAME_MAP) {                                                                          // 10895
    var baseEvents = EVENT_NAME_MAP[baseEventName];                                                                    // 10896
    for (var styleName in baseEvents) {                                                                                // 10897
      if (styleName in style) {                                                                                        // 10898
        endEvents.push(baseEvents[styleName]);                                                                         // 10899
        break;                                                                                                         // 10900
      }                                                                                                                // 10901
    }                                                                                                                  // 10902
  }                                                                                                                    // 10903
}                                                                                                                      // 10904
                                                                                                                       // 10905
if (ExecutionEnvironment.canUseDOM) {                                                                                  // 10906
  detectEvents();                                                                                                      // 10907
}                                                                                                                      // 10908
                                                                                                                       // 10909
// We use the raw {add|remove}EventListener() call because EventListener                                               // 10910
// does not know how to remove event listeners and we really should                                                    // 10911
// clean up. Also, these events are not triggered in older browsers                                                    // 10912
// so we should be A-OK here.                                                                                          // 10913
                                                                                                                       // 10914
function addEventListener(node, eventName, eventListener) {                                                            // 10915
  node.addEventListener(eventName, eventListener, false);                                                              // 10916
}                                                                                                                      // 10917
                                                                                                                       // 10918
function removeEventListener(node, eventName, eventListener) {                                                         // 10919
  node.removeEventListener(eventName, eventListener, false);                                                           // 10920
}                                                                                                                      // 10921
                                                                                                                       // 10922
var ReactTransitionEvents = {                                                                                          // 10923
  addEndEventListener: function(node, eventListener) {                                                                 // 10924
    if (endEvents.length === 0) {                                                                                      // 10925
      // If CSS transitions are not supported, trigger an "end animation"                                              // 10926
      // event immediately.                                                                                            // 10927
      window.setTimeout(eventListener, 0);                                                                             // 10928
      return;                                                                                                          // 10929
    }                                                                                                                  // 10930
    endEvents.forEach(function(endEvent) {                                                                             // 10931
      addEventListener(node, endEvent, eventListener);                                                                 // 10932
    });                                                                                                                // 10933
  },                                                                                                                   // 10934
                                                                                                                       // 10935
  removeEndEventListener: function(node, eventListener) {                                                              // 10936
    if (endEvents.length === 0) {                                                                                      // 10937
      return;                                                                                                          // 10938
    }                                                                                                                  // 10939
    endEvents.forEach(function(endEvent) {                                                                             // 10940
      removeEventListener(node, endEvent, eventListener);                                                              // 10941
    });                                                                                                                // 10942
  }                                                                                                                    // 10943
};                                                                                                                     // 10944
                                                                                                                       // 10945
module.exports = ReactTransitionEvents;                                                                                // 10946
                                                                                                                       // 10947
},{"./ExecutionEnvironment":21}],67:[function(require,module,exports){                                                 // 10948
/**                                                                                                                    // 10949
 * Copyright 2013 Facebook, Inc.                                                                                       // 10950
 *                                                                                                                     // 10951
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 10952
 * you may not use this file except in compliance with the License.                                                    // 10953
 * You may obtain a copy of the License at                                                                             // 10954
 *                                                                                                                     // 10955
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 10956
 *                                                                                                                     // 10957
 * Unless required by applicable law or agreed to in writing, software                                                 // 10958
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 10959
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 10960
 * See the License for the specific language governing permissions and                                                 // 10961
 * limitations under the License.                                                                                      // 10962
 *                                                                                                                     // 10963
 * @providesModule ReactTransitionGroup                                                                                // 10964
 */                                                                                                                    // 10965
                                                                                                                       // 10966
"use strict";                                                                                                          // 10967
                                                                                                                       // 10968
var React = require("./React");                                                                                        // 10969
var ReactTransitionableChild = require("./ReactTransitionableChild");                                                  // 10970
var ReactTransitionKeySet = require("./ReactTransitionKeySet");                                                        // 10971
                                                                                                                       // 10972
var ReactTransitionGroup = React.createClass({                                                                         // 10973
                                                                                                                       // 10974
  propTypes: {                                                                                                         // 10975
    transitionName: React.PropTypes.string.isRequired,                                                                 // 10976
    transitionEnter: React.PropTypes.bool,                                                                             // 10977
    transitionLeave: React.PropTypes.bool,                                                                             // 10978
    onTransition: React.PropTypes.func,                                                                                // 10979
    component: React.PropTypes.func                                                                                    // 10980
  },                                                                                                                   // 10981
                                                                                                                       // 10982
  getDefaultProps: function() {                                                                                        // 10983
    return {                                                                                                           // 10984
      transitionEnter: true,                                                                                           // 10985
      transitionLeave: true,                                                                                           // 10986
      component: React.DOM.span                                                                                        // 10987
    };                                                                                                                 // 10988
  },                                                                                                                   // 10989
                                                                                                                       // 10990
  componentWillMount: function() {                                                                                     // 10991
    // _transitionGroupCurrentKeys stores the union of previous *and* next keys.                                       // 10992
    // If this were a component we'd store it as state, however, since this must                                       // 10993
    // be a mixin, we need to keep the result of the union of keys in each                                             // 10994
    // call to animateChildren() which happens in render(), so we can't                                                // 10995
    // call setState() in there.                                                                                       // 10996
    this._transitionGroupCurrentKeys = {};                                                                             // 10997
  },                                                                                                                   // 10998
                                                                                                                       // 10999
  componentDidUpdate: function() {                                                                                     // 11000
    if (this.props.onTransition) {                                                                                     // 11001
      this.props.onTransition();                                                                                       // 11002
    }                                                                                                                  // 11003
  },                                                                                                                   // 11004
                                                                                                                       // 11005
  /**                                                                                                                  // 11006
   * Render some children in a transitionable way.                                                                     // 11007
   */                                                                                                                  // 11008
  renderTransitionableChildren: function(sourceChildren) {                                                             // 11009
    var children = {};                                                                                                 // 11010
    var childMapping = ReactTransitionKeySet.getChildMapping(sourceChildren);                                          // 11011
                                                                                                                       // 11012
    var currentKeys = ReactTransitionKeySet.mergeKeySets(                                                              // 11013
      this._transitionGroupCurrentKeys,                                                                                // 11014
      ReactTransitionKeySet.getKeySet(sourceChildren)                                                                  // 11015
    );                                                                                                                 // 11016
                                                                                                                       // 11017
    for (var key in currentKeys) {                                                                                     // 11018
      // Here is how we keep the nodes in the DOM. ReactTransitionableChild                                            // 11019
      // knows how to hold onto its child if it changes to undefined. Here, we                                         // 11020
      // may look up an old key in the new children, and it may switch to                                              // 11021
      // undefined. React's reconciler will keep the ReactTransitionableChild                                          // 11022
      // instance alive such that we can animate it.                                                                   // 11023
      if (childMapping[key] || this.props.transitionLeave) {                                                           // 11024
        children[key] = ReactTransitionableChild({                                                                     // 11025
          name: this.props.transitionName,                                                                             // 11026
          enter: this.props.transitionEnter,                                                                           // 11027
          onDoneLeaving: this._handleDoneLeaving.bind(this, key)                                                       // 11028
        }, childMapping[key]);                                                                                         // 11029
      }                                                                                                                // 11030
    }                                                                                                                  // 11031
                                                                                                                       // 11032
    this._transitionGroupCurrentKeys = currentKeys;                                                                    // 11033
                                                                                                                       // 11034
    return children;                                                                                                   // 11035
  },                                                                                                                   // 11036
                                                                                                                       // 11037
  _handleDoneLeaving: function(key) {                                                                                  // 11038
    // When the leave animation finishes, we should blow away the actual DOM                                           // 11039
    // node.                                                                                                           // 11040
    delete this._transitionGroupCurrentKeys[key];                                                                      // 11041
    this.forceUpdate();                                                                                                // 11042
  },                                                                                                                   // 11043
                                                                                                                       // 11044
  render: function() {                                                                                                 // 11045
    return this.transferPropsTo(                                                                                       // 11046
      this.props.component(                                                                                            // 11047
        {                                                                                                              // 11048
          transitionName: null,                                                                                        // 11049
          transitionEnter: null,                                                                                       // 11050
          transitionLeave: null,                                                                                       // 11051
          component: null                                                                                              // 11052
        },                                                                                                             // 11053
        this.renderTransitionableChildren(this.props.children)                                                         // 11054
      )                                                                                                                // 11055
    );                                                                                                                 // 11056
  }                                                                                                                    // 11057
});                                                                                                                    // 11058
                                                                                                                       // 11059
module.exports = ReactTransitionGroup;                                                                                 // 11060
                                                                                                                       // 11061
},{"./React":26,"./ReactTransitionKeySet":68,"./ReactTransitionableChild":69}],68:[function(require,module,exports){   // 11062
/**                                                                                                                    // 11063
 * Copyright 2013 Facebook, Inc.                                                                                       // 11064
 *                                                                                                                     // 11065
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 11066
 * you may not use this file except in compliance with the License.                                                    // 11067
 * You may obtain a copy of the License at                                                                             // 11068
 *                                                                                                                     // 11069
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 11070
 *                                                                                                                     // 11071
 * Unless required by applicable law or agreed to in writing, software                                                 // 11072
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 11073
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 11074
 * See the License for the specific language governing permissions and                                                 // 11075
 * limitations under the License.                                                                                      // 11076
 *                                                                                                                     // 11077
 * @typechecks static-only                                                                                             // 11078
 * @providesModule ReactTransitionKeySet                                                                               // 11079
 */                                                                                                                    // 11080
                                                                                                                       // 11081
"use strict";                                                                                                          // 11082
                                                                                                                       // 11083
var ReactChildren = require("./ReactChildren");                                                                        // 11084
                                                                                                                       // 11085
var MERGE_KEY_SETS_TAIL_SENTINEL = {};                                                                                 // 11086
                                                                                                                       // 11087
var ReactTransitionKeySet = {                                                                                          // 11088
  /**                                                                                                                  // 11089
   * Given `this.props.children`, return an object mapping key to child. Just                                          // 11090
   * simple syntactic sugar around ReactChildren.map().                                                                // 11091
   *                                                                                                                   // 11092
   * @param {*} children `this.props.children`                                                                         // 11093
   * @return {object} Mapping of key to child                                                                          // 11094
   */                                                                                                                  // 11095
  getChildMapping: function(children) {                                                                                // 11096
    return ReactChildren.map(children, function(child) {                                                               // 11097
      return child;                                                                                                    // 11098
    });                                                                                                                // 11099
  },                                                                                                                   // 11100
                                                                                                                       // 11101
  /**                                                                                                                  // 11102
   * Simple syntactic sugar to get an object with keys of all of `children`.                                           // 11103
   * Does not have references to the children themselves.                                                              // 11104
   *                                                                                                                   // 11105
   * @param {*} children `this.props.children`                                                                         // 11106
   * @return {object} Mapping of key to the value "true"                                                               // 11107
   */                                                                                                                  // 11108
  getKeySet: function(children) {                                                                                      // 11109
    return ReactChildren.map(children, function() {                                                                    // 11110
      return true;                                                                                                     // 11111
    });                                                                                                                // 11112
  },                                                                                                                   // 11113
                                                                                                                       // 11114
  /**                                                                                                                  // 11115
   * When you're adding or removing children some may be added or removed in the                                       // 11116
   * same render pass. We want ot show *both* since we want to simultaneously                                          // 11117
   * animate elements in and out. This function takes a previous set of keys                                           // 11118
   * and a new set of keys and merges them with its best guess of the correct                                          // 11119
   * ordering. In the future we may expose some of the utilities in                                                    // 11120
   * ReactMultiChild to make this easy, but for now React itself does not                                              // 11121
   * directly have this concept of the union of prevChildren and nextChildren                                          // 11122
   * so we implement it here.                                                                                          // 11123
   *                                                                                                                   // 11124
   * @param {object} prev prev child keys as returned from                                                             // 11125
   * `ReactTransitionKeySet.getKeySet()`.                                                                              // 11126
   * @param {object} next next child keys as returned from                                                             // 11127
   * `ReactTransitionKeySet.getKeySet()`.                                                                              // 11128
   * @return {object} a key set that contains all keys in `prev` and all keys                                          // 11129
   * in `next` in a reasonable order.                                                                                  // 11130
   */                                                                                                                  // 11131
  mergeKeySets: function(prev, next) {                                                                                 // 11132
    prev = prev || {};                                                                                                 // 11133
    next = next || {};                                                                                                 // 11134
                                                                                                                       // 11135
    var keySet = {};                                                                                                   // 11136
    var prevKeys = Object.keys(prev).concat([MERGE_KEY_SETS_TAIL_SENTINEL]);                                           // 11137
    var nextKeys = Object.keys(next).concat([MERGE_KEY_SETS_TAIL_SENTINEL]);                                           // 11138
    var i;                                                                                                             // 11139
    for (i = 0; i < prevKeys.length - 1; i++) {                                                                        // 11140
      var prevKey = prevKeys[i];                                                                                       // 11141
      if (next[prevKey]) {                                                                                             // 11142
        continue;                                                                                                      // 11143
      }                                                                                                                // 11144
                                                                                                                       // 11145
      // This key is not in the new set. Place it in our                                                               // 11146
      // best guess where it should go. We do this by searching                                                        // 11147
      // for a key after the current one in prevKeys that is                                                           // 11148
      // still in nextKeys, and inserting right before it.                                                             // 11149
      // I know this is O(n^2), but this is not a particularly                                                         // 11150
      // hot code path.                                                                                                // 11151
      var insertPos = -1;                                                                                              // 11152
                                                                                                                       // 11153
      for (var j = i + 1; j < prevKeys.length; j++) {                                                                  // 11154
        insertPos = nextKeys.indexOf(prevKeys[j]);                                                                     // 11155
        if (insertPos >= 0) {                                                                                          // 11156
          break;                                                                                                       // 11157
        }                                                                                                              // 11158
      }                                                                                                                // 11159
                                                                                                                       // 11160
      // Insert before insertPos                                                                                       // 11161
      nextKeys.splice(insertPos, 0, prevKey);                                                                          // 11162
    }                                                                                                                  // 11163
                                                                                                                       // 11164
    for (i = 0; i < nextKeys.length - 1; i++) {                                                                        // 11165
      keySet[nextKeys[i]] = true;                                                                                      // 11166
    }                                                                                                                  // 11167
                                                                                                                       // 11168
    return keySet;                                                                                                     // 11169
  }                                                                                                                    // 11170
};                                                                                                                     // 11171
                                                                                                                       // 11172
module.exports = ReactTransitionKeySet;                                                                                // 11173
                                                                                                                       // 11174
},{"./ReactChildren":27}],69:[function(require,module,exports){                                                        // 11175
/**                                                                                                                    // 11176
 * Copyright 2013 Facebook, Inc.                                                                                       // 11177
 *                                                                                                                     // 11178
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 11179
 * you may not use this file except in compliance with the License.                                                    // 11180
 * You may obtain a copy of the License at                                                                             // 11181
 *                                                                                                                     // 11182
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 11183
 *                                                                                                                     // 11184
 * Unless required by applicable law or agreed to in writing, software                                                 // 11185
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 11186
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 11187
 * See the License for the specific language governing permissions and                                                 // 11188
 * limitations under the License.                                                                                      // 11189
 *                                                                                                                     // 11190
 * @providesModule ReactTransitionableChild                                                                            // 11191
 */                                                                                                                    // 11192
                                                                                                                       // 11193
"use strict";                                                                                                          // 11194
                                                                                                                       // 11195
var React = require("./React");                                                                                        // 11196
var CSSCore = require("./CSSCore");                                                                                    // 11197
var ReactTransitionEvents = require("./ReactTransitionEvents");                                                        // 11198
                                                                                                                       // 11199
// We don't remove the element from the DOM until we receive an animationend or                                        // 11200
// transitionend event. If the user screws up and forgets to add an animation                                          // 11201
// their node will be stuck in the DOM forever, so we detect if an animation                                           // 11202
// does not start and if it doesn't, we just call the end listener immediately.                                        // 11203
var TICK = 17;                                                                                                         // 11204
var NO_EVENT_TIMEOUT = 5000;                                                                                           // 11205
                                                                                                                       // 11206
var noEventListener = null;                                                                                            // 11207
                                                                                                                       // 11208
if ("production" !== "development") {                                                                                  // 11209
  noEventListener = function() {                                                                                       // 11210
    console.warn(                                                                                                      // 11211
      'transition(): tried to perform an animation without ' +                                                         // 11212
      'an animationend or transitionend event after timeout (' +                                                       // 11213
      NO_EVENT_TIMEOUT + 'ms). You should either disable this ' +                                                      // 11214
      'transition in JS or add a CSS animation/transition.'                                                            // 11215
    );                                                                                                                 // 11216
  };                                                                                                                   // 11217
}                                                                                                                      // 11218
                                                                                                                       // 11219
/**                                                                                                                    // 11220
 * This component is simply responsible for watching when its single child                                             // 11221
 * changes to undefined and animating the old child out. It does this by                                               // 11222
 * recording its old child in savedChildren when it detects this event is about                                        // 11223
 * to occur.                                                                                                           // 11224
 */                                                                                                                    // 11225
var ReactTransitionableChild = React.createClass({                                                                     // 11226
  /**                                                                                                                  // 11227
   * Perform an actual DOM transition. This takes care of a few things:                                                // 11228
   * - Adding the second CSS class to trigger the transition                                                           // 11229
   * - Listening for the finish event                                                                                  // 11230
   * - Cleaning up the css (unless noReset is true)                                                                    // 11231
   */                                                                                                                  // 11232
  transition: function(animationType, noReset, finishCallback) {                                                       // 11233
    var node = this.getDOMNode();                                                                                      // 11234
    var className = this.props.name + '-' + animationType;                                                             // 11235
    var activeClassName = className + '-active';                                                                       // 11236
    var noEventTimeout = null;                                                                                         // 11237
                                                                                                                       // 11238
    var endListener = function() {                                                                                     // 11239
      if ("production" !== "development") {                                                                            // 11240
        clearTimeout(noEventTimeout);                                                                                  // 11241
      }                                                                                                                // 11242
                                                                                                                       // 11243
      // If this gets invoked after the component is unmounted it's OK.                                                // 11244
      if (!noReset) {                                                                                                  // 11245
        // Usually this means you're about to remove the node if you want to                                           // 11246
        // leave it in its animated state.                                                                             // 11247
        CSSCore.removeClass(node, className);                                                                          // 11248
        CSSCore.removeClass(node, activeClassName);                                                                    // 11249
      }                                                                                                                // 11250
                                                                                                                       // 11251
      ReactTransitionEvents.removeEndEventListener(node, endListener);                                                 // 11252
                                                                                                                       // 11253
      // Usually this optional callback is used for informing an owner of                                              // 11254
      // a leave animation and telling it to remove the child.                                                         // 11255
      finishCallback && finishCallback();                                                                              // 11256
    };                                                                                                                 // 11257
                                                                                                                       // 11258
    ReactTransitionEvents.addEndEventListener(node, endListener);                                                      // 11259
                                                                                                                       // 11260
    CSSCore.addClass(node, className);                                                                                 // 11261
                                                                                                                       // 11262
    // Need to do this to actually trigger a transition.                                                               // 11263
    this.queueClass(activeClassName);                                                                                  // 11264
                                                                                                                       // 11265
    if ("production" !== "development") {                                                                              // 11266
      noEventTimeout = setTimeout(noEventListener, NO_EVENT_TIMEOUT);                                                  // 11267
    }                                                                                                                  // 11268
  },                                                                                                                   // 11269
                                                                                                                       // 11270
  queueClass: function(className) {                                                                                    // 11271
    this.classNameQueue.push(className);                                                                               // 11272
                                                                                                                       // 11273
    if (this.props.runNextTick) {                                                                                      // 11274
      this.props.runNextTick(this.flushClassNameQueue);                                                                // 11275
      return;                                                                                                          // 11276
    }                                                                                                                  // 11277
                                                                                                                       // 11278
    if (!this.timeout) {                                                                                               // 11279
      this.timeout = setTimeout(this.flushClassNameQueue, TICK);                                                       // 11280
    }                                                                                                                  // 11281
  },                                                                                                                   // 11282
                                                                                                                       // 11283
  flushClassNameQueue: function() {                                                                                    // 11284
    if (this.isMounted()) {                                                                                            // 11285
      this.classNameQueue.forEach(                                                                                     // 11286
        CSSCore.addClass.bind(CSSCore, this.getDOMNode())                                                              // 11287
      );                                                                                                               // 11288
    }                                                                                                                  // 11289
    this.classNameQueue.length = 0;                                                                                    // 11290
    this.timeout = null;                                                                                               // 11291
  },                                                                                                                   // 11292
                                                                                                                       // 11293
  componentWillMount: function() {                                                                                     // 11294
    this.classNameQueue = [];                                                                                          // 11295
  },                                                                                                                   // 11296
                                                                                                                       // 11297
  componentWillUnmount: function() {                                                                                   // 11298
    if (this.timeout) {                                                                                                // 11299
      clearTimeout(this.timeout);                                                                                      // 11300
    }                                                                                                                  // 11301
  },                                                                                                                   // 11302
                                                                                                                       // 11303
  componentWillReceiveProps: function(nextProps) {                                                                     // 11304
    if (!nextProps.children && this.props.children) {                                                                  // 11305
      this.savedChildren = this.props.children;                                                                        // 11306
    }                                                                                                                  // 11307
  },                                                                                                                   // 11308
                                                                                                                       // 11309
  componentDidMount: function(node) {                                                                                  // 11310
    if (this.props.enter) {                                                                                            // 11311
      this.transition('enter');                                                                                        // 11312
    }                                                                                                                  // 11313
  },                                                                                                                   // 11314
                                                                                                                       // 11315
  componentDidUpdate: function(prevProps, prevState, node) {                                                           // 11316
    if (prevProps.children && !this.props.children) {                                                                  // 11317
      this.transition('leave', true, this.props.onDoneLeaving);                                                        // 11318
    }                                                                                                                  // 11319
  },                                                                                                                   // 11320
                                                                                                                       // 11321
  render: function() {                                                                                                 // 11322
    return this.props.children || this.savedChildren;                                                                  // 11323
  }                                                                                                                    // 11324
});                                                                                                                    // 11325
                                                                                                                       // 11326
module.exports = ReactTransitionableChild;                                                                             // 11327
                                                                                                                       // 11328
},{"./CSSCore":2,"./React":26,"./ReactTransitionEvents":66}],70:[function(require,module,exports){                     // 11329
/**                                                                                                                    // 11330
 * Copyright 2013 Facebook, Inc.                                                                                       // 11331
 *                                                                                                                     // 11332
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 11333
 * you may not use this file except in compliance with the License.                                                    // 11334
 * You may obtain a copy of the License at                                                                             // 11335
 *                                                                                                                     // 11336
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 11337
 *                                                                                                                     // 11338
 * Unless required by applicable law or agreed to in writing, software                                                 // 11339
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 11340
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 11341
 * See the License for the specific language governing permissions and                                                 // 11342
 * limitations under the License.                                                                                      // 11343
 *                                                                                                                     // 11344
 * @providesModule ReactUpdates                                                                                        // 11345
 */                                                                                                                    // 11346
                                                                                                                       // 11347
"use strict";                                                                                                          // 11348
                                                                                                                       // 11349
var invariant = require("./invariant");                                                                                // 11350
                                                                                                                       // 11351
var dirtyComponents = [];                                                                                              // 11352
                                                                                                                       // 11353
var batchingStrategy = null;                                                                                           // 11354
                                                                                                                       // 11355
function ensureBatchingStrategy() {                                                                                    // 11356
  ("production" !== "development" ? invariant(batchingStrategy, 'ReactUpdates: must inject a batching strategy') : invariant(batchingStrategy));
}                                                                                                                      // 11358
                                                                                                                       // 11359
function batchedUpdates(callback, param) {                                                                             // 11360
  ensureBatchingStrategy();                                                                                            // 11361
  batchingStrategy.batchedUpdates(callback, param);                                                                    // 11362
}                                                                                                                      // 11363
                                                                                                                       // 11364
/**                                                                                                                    // 11365
 * Array comparator for ReactComponents by owner depth                                                                 // 11366
 *                                                                                                                     // 11367
 * @param {ReactComponent} c1 first component you're comparing                                                         // 11368
 * @param {ReactComponent} c2 second component you're comparing                                                        // 11369
 * @return {number} Return value usable by Array.prototype.sort().                                                     // 11370
 */                                                                                                                    // 11371
function mountDepthComparator(c1, c2) {                                                                                // 11372
  return c1._mountDepth - c2._mountDepth;                                                                              // 11373
}                                                                                                                      // 11374
                                                                                                                       // 11375
function runBatchedUpdates() {                                                                                         // 11376
  // Since reconciling a component higher in the owner hierarchy usually (not                                          // 11377
  // always -- see shouldComponentUpdate()) will reconcile children, reconcile                                         // 11378
  // them before their children by sorting the array.                                                                  // 11379
                                                                                                                       // 11380
  dirtyComponents.sort(mountDepthComparator);                                                                          // 11381
                                                                                                                       // 11382
  for (var i = 0; i < dirtyComponents.length; i++) {                                                                   // 11383
    // If a component is unmounted before pending changes apply, ignore them                                           // 11384
    // TODO: Queue unmounts in the same list to avoid this happening at all                                            // 11385
    var component = dirtyComponents[i];                                                                                // 11386
    if (component.isMounted()) {                                                                                       // 11387
      // If performUpdateIfNecessary happens to enqueue any new updates, we                                            // 11388
      // shouldn't execute the callbacks until the next render happens, so                                             // 11389
      // stash the callbacks first                                                                                     // 11390
      var callbacks = component._pendingCallbacks;                                                                     // 11391
      component._pendingCallbacks = null;                                                                              // 11392
      component.performUpdateIfNecessary();                                                                            // 11393
      if (callbacks) {                                                                                                 // 11394
        for (var j = 0; j < callbacks.length; j++) {                                                                   // 11395
          callbacks[j].call(component);                                                                                // 11396
        }                                                                                                              // 11397
      }                                                                                                                // 11398
    }                                                                                                                  // 11399
  }                                                                                                                    // 11400
}                                                                                                                      // 11401
                                                                                                                       // 11402
function clearDirtyComponents() {                                                                                      // 11403
  dirtyComponents.length = 0;                                                                                          // 11404
}                                                                                                                      // 11405
                                                                                                                       // 11406
function flushBatchedUpdates() {                                                                                       // 11407
  // Run these in separate functions so the JIT can optimize                                                           // 11408
  try {                                                                                                                // 11409
    runBatchedUpdates();                                                                                               // 11410
  } catch (e) {                                                                                                        // 11411
    // IE 8 requires catch to use finally.                                                                             // 11412
    throw e;                                                                                                           // 11413
  } finally {                                                                                                          // 11414
    clearDirtyComponents();                                                                                            // 11415
  }                                                                                                                    // 11416
}                                                                                                                      // 11417
                                                                                                                       // 11418
/**                                                                                                                    // 11419
 * Mark a component as needing a rerender, adding an optional callback to a                                            // 11420
 * list of functions which will be executed once the rerender occurs.                                                  // 11421
 */                                                                                                                    // 11422
function enqueueUpdate(component, callback) {                                                                          // 11423
  ("production" !== "development" ? invariant(                                                                         // 11424
    !callback || typeof callback === "function",                                                                       // 11425
    'enqueueUpdate(...): You called `setProps`, `replaceProps`, ' +                                                    // 11426
    '`setState`, `replaceState`, or `forceUpdate` with a callback that ' +                                             // 11427
    'isn\'t callable.'                                                                                                 // 11428
  ) : invariant(!callback || typeof callback === "function"));                                                         // 11429
  ensureBatchingStrategy();                                                                                            // 11430
                                                                                                                       // 11431
  if (!batchingStrategy.isBatchingUpdates) {                                                                           // 11432
    component.performUpdateIfNecessary();                                                                              // 11433
    callback && callback();                                                                                            // 11434
    return;                                                                                                            // 11435
  }                                                                                                                    // 11436
                                                                                                                       // 11437
  dirtyComponents.push(component);                                                                                     // 11438
                                                                                                                       // 11439
  if (callback) {                                                                                                      // 11440
    if (component._pendingCallbacks) {                                                                                 // 11441
      component._pendingCallbacks.push(callback);                                                                      // 11442
    } else {                                                                                                           // 11443
      component._pendingCallbacks = [callback];                                                                        // 11444
    }                                                                                                                  // 11445
  }                                                                                                                    // 11446
}                                                                                                                      // 11447
                                                                                                                       // 11448
var ReactUpdatesInjection = {                                                                                          // 11449
  injectBatchingStrategy: function(_batchingStrategy) {                                                                // 11450
    ("production" !== "development" ? invariant(                                                                       // 11451
      _batchingStrategy,                                                                                               // 11452
      'ReactUpdates: must provide a batching strategy'                                                                 // 11453
    ) : invariant(_batchingStrategy));                                                                                 // 11454
    ("production" !== "development" ? invariant(                                                                       // 11455
      typeof _batchingStrategy.batchedUpdates === 'function',                                                          // 11456
      'ReactUpdates: must provide a batchedUpdates() function'                                                         // 11457
    ) : invariant(typeof _batchingStrategy.batchedUpdates === 'function'));                                            // 11458
    ("production" !== "development" ? invariant(                                                                       // 11459
      typeof _batchingStrategy.isBatchingUpdates === 'boolean',                                                        // 11460
      'ReactUpdates: must provide an isBatchingUpdates boolean attribute'                                              // 11461
    ) : invariant(typeof _batchingStrategy.isBatchingUpdates === 'boolean'));                                          // 11462
    batchingStrategy = _batchingStrategy;                                                                              // 11463
  }                                                                                                                    // 11464
};                                                                                                                     // 11465
                                                                                                                       // 11466
var ReactUpdates = {                                                                                                   // 11467
  batchedUpdates: batchedUpdates,                                                                                      // 11468
  enqueueUpdate: enqueueUpdate,                                                                                        // 11469
  flushBatchedUpdates: flushBatchedUpdates,                                                                            // 11470
  injection: ReactUpdatesInjection                                                                                     // 11471
};                                                                                                                     // 11472
                                                                                                                       // 11473
module.exports = ReactUpdates;                                                                                         // 11474
                                                                                                                       // 11475
},{"./invariant":109}],71:[function(require,module,exports){                                                           // 11476
/**                                                                                                                    // 11477
 * Copyright 2013 Facebook, Inc.                                                                                       // 11478
 *                                                                                                                     // 11479
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 11480
 * you may not use this file except in compliance with the License.                                                    // 11481
 * You may obtain a copy of the License at                                                                             // 11482
 *                                                                                                                     // 11483
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 11484
 *                                                                                                                     // 11485
 * Unless required by applicable law or agreed to in writing, software                                                 // 11486
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 11487
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 11488
 * See the License for the specific language governing permissions and                                                 // 11489
 * limitations under the License.                                                                                      // 11490
 *                                                                                                                     // 11491
 * @providesModule ReactWithAddons                                                                                     // 11492
 */                                                                                                                    // 11493
                                                                                                                       // 11494
/**                                                                                                                    // 11495
 * This module exists purely in the open source project, and is meant as a way                                         // 11496
 * to create a separate standalone build of React. This build has "addons", or                                         // 11497
 * functionality we've built and think might be useful but doesn't have a good                                         // 11498
 * place to live inside React core.                                                                                    // 11499
 */                                                                                                                    // 11500
                                                                                                                       // 11501
"use strict";                                                                                                          // 11502
                                                                                                                       // 11503
var LinkedStateMixin = require("./LinkedStateMixin");                                                                  // 11504
var React = require("./React");                                                                                        // 11505
var ReactTransitionGroup = require("./ReactTransitionGroup");                                                          // 11506
                                                                                                                       // 11507
var cx = require("./cx");                                                                                              // 11508
                                                                                                                       // 11509
React.addons = {                                                                                                       // 11510
  classSet: cx,                                                                                                        // 11511
  LinkedStateMixin: LinkedStateMixin,                                                                                  // 11512
  TransitionGroup: ReactTransitionGroup                                                                                // 11513
};                                                                                                                     // 11514
                                                                                                                       // 11515
module.exports = React;                                                                                                // 11516
                                                                                                                       // 11517
                                                                                                                       // 11518
},{"./LinkedStateMixin":22,"./React":26,"./ReactTransitionGroup":67,"./cx":92}],72:[function(require,module,exports){  // 11519
/**                                                                                                                    // 11520
 * Copyright 2013 Facebook, Inc.                                                                                       // 11521
 *                                                                                                                     // 11522
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 11523
 * you may not use this file except in compliance with the License.                                                    // 11524
 * You may obtain a copy of the License at                                                                             // 11525
 *                                                                                                                     // 11526
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 11527
 *                                                                                                                     // 11528
 * Unless required by applicable law or agreed to in writing, software                                                 // 11529
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 11530
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 11531
 * See the License for the specific language governing permissions and                                                 // 11532
 * limitations under the License.                                                                                      // 11533
 *                                                                                                                     // 11534
 * @providesModule SelectEventPlugin                                                                                   // 11535
 */                                                                                                                    // 11536
                                                                                                                       // 11537
"use strict";                                                                                                          // 11538
                                                                                                                       // 11539
var EventConstants = require("./EventConstants");                                                                      // 11540
var EventPluginHub = require("./EventPluginHub");                                                                      // 11541
var EventPropagators = require("./EventPropagators");                                                                  // 11542
var ExecutionEnvironment = require("./ExecutionEnvironment");                                                          // 11543
var ReactInputSelection = require("./ReactInputSelection");                                                            // 11544
var SyntheticEvent = require("./SyntheticEvent");                                                                      // 11545
                                                                                                                       // 11546
var getActiveElement = require("./getActiveElement");                                                                  // 11547
var isTextInputElement = require("./isTextInputElement");                                                              // 11548
var keyOf = require("./keyOf");                                                                                        // 11549
var shallowEqual = require("./shallowEqual");                                                                          // 11550
                                                                                                                       // 11551
var topLevelTypes = EventConstants.topLevelTypes;                                                                      // 11552
                                                                                                                       // 11553
var eventTypes = {                                                                                                     // 11554
  select: {                                                                                                            // 11555
    phasedRegistrationNames: {                                                                                         // 11556
      bubbled: keyOf({onSelect: null}),                                                                                // 11557
      captured: keyOf({onSelectCapture: null})                                                                         // 11558
    }                                                                                                                  // 11559
  }                                                                                                                    // 11560
};                                                                                                                     // 11561
                                                                                                                       // 11562
var useSelectionChange = false;                                                                                        // 11563
                                                                                                                       // 11564
if (ExecutionEnvironment.canUseDOM) {                                                                                  // 11565
  useSelectionChange = 'onselectionchange' in document;                                                                // 11566
}                                                                                                                      // 11567
                                                                                                                       // 11568
var activeElement = null;                                                                                              // 11569
var activeElementID = null;                                                                                            // 11570
var activeNativeEvent = null;                                                                                          // 11571
var lastSelection = null;                                                                                              // 11572
var mouseDown = false;                                                                                                 // 11573
                                                                                                                       // 11574
/**                                                                                                                    // 11575
 * Get an object which is a unique representation of the current selection.                                            // 11576
 *                                                                                                                     // 11577
 * The return value will not be consistent across nodes or browsers, but                                               // 11578
 * two identical selections on the same node will return identical objects.                                            // 11579
 *                                                                                                                     // 11580
 * @param {DOMElement} node                                                                                            // 11581
 * @param {object}                                                                                                     // 11582
 */                                                                                                                    // 11583
function getSelection(node) {                                                                                          // 11584
  if ('selectionStart' in node &&                                                                                      // 11585
      ReactInputSelection.hasSelectionCapabilities(node)) {                                                            // 11586
    return {                                                                                                           // 11587
      start: node.selectionStart,                                                                                      // 11588
      end: node.selectionEnd                                                                                           // 11589
    };                                                                                                                 // 11590
  } else if (document.selection) {                                                                                     // 11591
    var range = document.selection.createRange();                                                                      // 11592
    return {                                                                                                           // 11593
      parentElement: range.parentElement(),                                                                            // 11594
      text: range.text,                                                                                                // 11595
      top: range.boundingTop,                                                                                          // 11596
      left: range.boundingLeft                                                                                         // 11597
    };                                                                                                                 // 11598
  } else {                                                                                                             // 11599
    var selection = window.getSelection();                                                                             // 11600
    return {                                                                                                           // 11601
      anchorNode: selection.anchorNode,                                                                                // 11602
      anchorOffset: selection.anchorOffset,                                                                            // 11603
      focusNode: selection.focusNode,                                                                                  // 11604
      focusOffset: selection.focusOffset                                                                               // 11605
    };                                                                                                                 // 11606
  }                                                                                                                    // 11607
}                                                                                                                      // 11608
                                                                                                                       // 11609
/**                                                                                                                    // 11610
 * Poll selection to see whether it's changed.                                                                         // 11611
 *                                                                                                                     // 11612
 * @param {object} nativeEvent                                                                                         // 11613
 * @return {?SyntheticEvent}                                                                                           // 11614
 */                                                                                                                    // 11615
function constructSelectEvent(nativeEvent) {                                                                           // 11616
  // Ensure we have the right element, and that the user is not dragging a                                             // 11617
  // selection (this matches native `select` event behavior).                                                          // 11618
  if (mouseDown || activeElement != getActiveElement()) {                                                              // 11619
    return;                                                                                                            // 11620
  }                                                                                                                    // 11621
                                                                                                                       // 11622
  // Only fire when selection has actually changed.                                                                    // 11623
  var currentSelection = getSelection(activeElement);                                                                  // 11624
  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {                                              // 11625
    lastSelection = currentSelection;                                                                                  // 11626
                                                                                                                       // 11627
    var syntheticEvent = SyntheticEvent.getPooled(                                                                     // 11628
      eventTypes.select,                                                                                               // 11629
      activeElementID,                                                                                                 // 11630
      nativeEvent                                                                                                      // 11631
    );                                                                                                                 // 11632
                                                                                                                       // 11633
    syntheticEvent.type = 'select';                                                                                    // 11634
    syntheticEvent.target = activeElement;                                                                             // 11635
                                                                                                                       // 11636
    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);                                                     // 11637
                                                                                                                       // 11638
    return syntheticEvent;                                                                                             // 11639
  }                                                                                                                    // 11640
}                                                                                                                      // 11641
                                                                                                                       // 11642
/**                                                                                                                    // 11643
 * Handle deferred event. And manually dispatch synthetic events.                                                      // 11644
 */                                                                                                                    // 11645
function dispatchDeferredSelectEvent() {                                                                               // 11646
  if (!activeNativeEvent) {                                                                                            // 11647
    return;                                                                                                            // 11648
  }                                                                                                                    // 11649
                                                                                                                       // 11650
  var syntheticEvent = constructSelectEvent(activeNativeEvent);                                                        // 11651
  activeNativeEvent = null;                                                                                            // 11652
                                                                                                                       // 11653
  // Enqueue and process the abstract event manually.                                                                  // 11654
  if (syntheticEvent) {                                                                                                // 11655
    EventPluginHub.enqueueEvents(syntheticEvent);                                                                      // 11656
    EventPluginHub.processEventQueue();                                                                                // 11657
  }                                                                                                                    // 11658
}                                                                                                                      // 11659
                                                                                                                       // 11660
/**                                                                                                                    // 11661
 * This plugin creates an `onSelect` event that normalizes select events                                               // 11662
 * across form elements.                                                                                               // 11663
 *                                                                                                                     // 11664
 * Supported elements are:                                                                                             // 11665
 * - input (see `isTextInputElement`)                                                                                  // 11666
 * - textarea                                                                                                          // 11667
 * - contentEditable                                                                                                   // 11668
 *                                                                                                                     // 11669
 * This differs from native browser implementations in the following ways:                                             // 11670
 * - Fires on contentEditable fields as well as inputs.                                                                // 11671
 * - Fires for collapsed selection.                                                                                    // 11672
 * - Fires after user input.                                                                                           // 11673
 */                                                                                                                    // 11674
var SelectEventPlugin = {                                                                                              // 11675
                                                                                                                       // 11676
  eventTypes: eventTypes,                                                                                              // 11677
                                                                                                                       // 11678
  /**                                                                                                                  // 11679
   * @param {string} topLevelType Record from `EventConstants`.                                                        // 11680
   * @param {DOMEventTarget} topLevelTarget The listening component root node.                                         // 11681
   * @param {string} topLevelTargetID ID of `topLevelTarget`.                                                          // 11682
   * @param {object} nativeEvent Native browser event.                                                                 // 11683
   * @return {*} An accumulation of synthetic events.                                                                  // 11684
   * @see {EventPluginHub.extractEvents}                                                                               // 11685
   */                                                                                                                  // 11686
  extractEvents: function(                                                                                             // 11687
      topLevelType,                                                                                                    // 11688
      topLevelTarget,                                                                                                  // 11689
      topLevelTargetID,                                                                                                // 11690
      nativeEvent) {                                                                                                   // 11691
                                                                                                                       // 11692
    switch (topLevelType) {                                                                                            // 11693
      // Track the input node that has focus.                                                                          // 11694
      case topLevelTypes.topFocus:                                                                                     // 11695
        if (isTextInputElement(topLevelTarget) ||                                                                      // 11696
            topLevelTarget.contentEditable === 'true') {                                                               // 11697
          activeElement = topLevelTarget;                                                                              // 11698
          activeElementID = topLevelTargetID;                                                                          // 11699
          lastSelection = null;                                                                                        // 11700
        }                                                                                                              // 11701
        break;                                                                                                         // 11702
      case topLevelTypes.topBlur:                                                                                      // 11703
        activeElement = null;                                                                                          // 11704
        activeElementID = null;                                                                                        // 11705
        lastSelection = null;                                                                                          // 11706
        break;                                                                                                         // 11707
                                                                                                                       // 11708
      // Don't fire the event while the user is dragging. This matches the                                             // 11709
      // semantics of the native select event.                                                                         // 11710
      case topLevelTypes.topMouseDown:                                                                                 // 11711
        mouseDown = true;                                                                                              // 11712
        break;                                                                                                         // 11713
      case topLevelTypes.topContextMenu:                                                                               // 11714
      case topLevelTypes.topMouseUp:                                                                                   // 11715
        mouseDown = false;                                                                                             // 11716
        return constructSelectEvent(nativeEvent);                                                                      // 11717
                                                                                                                       // 11718
      // Chrome and IE fire non-standard event when selection is changed (and                                          // 11719
      // sometimes when it hasn't).                                                                                    // 11720
      case topLevelTypes.topSelectionChange:                                                                           // 11721
        return constructSelectEvent(nativeEvent);                                                                      // 11722
                                                                                                                       // 11723
      // Firefox doesn't support selectionchange, so check selection status                                            // 11724
      // after each key entry.                                                                                         // 11725
      case topLevelTypes.topKeyDown:                                                                                   // 11726
        if (!useSelectionChange) {                                                                                     // 11727
          activeNativeEvent = nativeEvent;                                                                             // 11728
          setTimeout(dispatchDeferredSelectEvent, 0);                                                                  // 11729
        }                                                                                                              // 11730
        break;                                                                                                         // 11731
    }                                                                                                                  // 11732
  }                                                                                                                    // 11733
};                                                                                                                     // 11734
                                                                                                                       // 11735
module.exports = SelectEventPlugin;                                                                                    // 11736
                                                                                                                       // 11737
},{"./EventConstants":15,"./EventPluginHub":17,"./EventPropagators":20,"./ExecutionEnvironment":21,"./ReactInputSelection":50,"./SyntheticEvent":76,"./getActiveElement":101,"./isTextInputElement":112,"./keyOf":116,"./shallowEqual":126}],73:[function(require,module,exports){
/**                                                                                                                    // 11739
 * Copyright 2013 Facebook, Inc.                                                                                       // 11740
 *                                                                                                                     // 11741
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 11742
 * you may not use this file except in compliance with the License.                                                    // 11743
 * You may obtain a copy of the License at                                                                             // 11744
 *                                                                                                                     // 11745
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 11746
 *                                                                                                                     // 11747
 * Unless required by applicable law or agreed to in writing, software                                                 // 11748
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 11749
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 11750
 * See the License for the specific language governing permissions and                                                 // 11751
 * limitations under the License.                                                                                      // 11752
 *                                                                                                                     // 11753
 * @providesModule SimpleEventPlugin                                                                                   // 11754
 */                                                                                                                    // 11755
                                                                                                                       // 11756
"use strict";                                                                                                          // 11757
                                                                                                                       // 11758
var EventConstants = require("./EventConstants");                                                                      // 11759
var EventPropagators = require("./EventPropagators");                                                                  // 11760
var SyntheticClipboardEvent = require("./SyntheticClipboardEvent");                                                    // 11761
var SyntheticEvent = require("./SyntheticEvent");                                                                      // 11762
var SyntheticFocusEvent = require("./SyntheticFocusEvent");                                                            // 11763
var SyntheticKeyboardEvent = require("./SyntheticKeyboardEvent");                                                      // 11764
var SyntheticMouseEvent = require("./SyntheticMouseEvent");                                                            // 11765
var SyntheticTouchEvent = require("./SyntheticTouchEvent");                                                            // 11766
var SyntheticUIEvent = require("./SyntheticUIEvent");                                                                  // 11767
var SyntheticWheelEvent = require("./SyntheticWheelEvent");                                                            // 11768
                                                                                                                       // 11769
var invariant = require("./invariant");                                                                                // 11770
var keyOf = require("./keyOf");                                                                                        // 11771
                                                                                                                       // 11772
var topLevelTypes = EventConstants.topLevelTypes;                                                                      // 11773
                                                                                                                       // 11774
var eventTypes = {                                                                                                     // 11775
  blur: {                                                                                                              // 11776
    phasedRegistrationNames: {                                                                                         // 11777
      bubbled: keyOf({onBlur: true}),                                                                                  // 11778
      captured: keyOf({onBlurCapture: true})                                                                           // 11779
    }                                                                                                                  // 11780
  },                                                                                                                   // 11781
  click: {                                                                                                             // 11782
    phasedRegistrationNames: {                                                                                         // 11783
      bubbled: keyOf({onClick: true}),                                                                                 // 11784
      captured: keyOf({onClickCapture: true})                                                                          // 11785
    }                                                                                                                  // 11786
  },                                                                                                                   // 11787
  contextMenu: {                                                                                                       // 11788
    phasedRegistrationNames: {                                                                                         // 11789
      bubbled: keyOf({onContextMenu: true}),                                                                           // 11790
      captured: keyOf({onContextMenuCapture: true})                                                                    // 11791
    }                                                                                                                  // 11792
  },                                                                                                                   // 11793
  copy: {                                                                                                              // 11794
    phasedRegistrationNames: {                                                                                         // 11795
      bubbled: keyOf({onCopy: true}),                                                                                  // 11796
      captured: keyOf({onCopyCapture: true})                                                                           // 11797
    }                                                                                                                  // 11798
  },                                                                                                                   // 11799
  cut: {                                                                                                               // 11800
    phasedRegistrationNames: {                                                                                         // 11801
      bubbled: keyOf({onCut: true}),                                                                                   // 11802
      captured: keyOf({onCutCapture: true})                                                                            // 11803
    }                                                                                                                  // 11804
  },                                                                                                                   // 11805
  doubleClick: {                                                                                                       // 11806
    phasedRegistrationNames: {                                                                                         // 11807
      bubbled: keyOf({onDoubleClick: true}),                                                                           // 11808
      captured: keyOf({onDoubleClickCapture: true})                                                                    // 11809
    }                                                                                                                  // 11810
  },                                                                                                                   // 11811
  drag: {                                                                                                              // 11812
    phasedRegistrationNames: {                                                                                         // 11813
      bubbled: keyOf({onDrag: true}),                                                                                  // 11814
      captured: keyOf({onDragCapture: true})                                                                           // 11815
    }                                                                                                                  // 11816
  },                                                                                                                   // 11817
  dragEnd: {                                                                                                           // 11818
    phasedRegistrationNames: {                                                                                         // 11819
      bubbled: keyOf({onDragEnd: true}),                                                                               // 11820
      captured: keyOf({onDragEndCapture: true})                                                                        // 11821
    }                                                                                                                  // 11822
  },                                                                                                                   // 11823
  dragEnter: {                                                                                                         // 11824
    phasedRegistrationNames: {                                                                                         // 11825
      bubbled: keyOf({onDragEnter: true}),                                                                             // 11826
      captured: keyOf({onDragEnterCapture: true})                                                                      // 11827
    }                                                                                                                  // 11828
  },                                                                                                                   // 11829
  dragExit: {                                                                                                          // 11830
    phasedRegistrationNames: {                                                                                         // 11831
      bubbled: keyOf({onDragExit: true}),                                                                              // 11832
      captured: keyOf({onDragExitCapture: true})                                                                       // 11833
    }                                                                                                                  // 11834
  },                                                                                                                   // 11835
  dragLeave: {                                                                                                         // 11836
    phasedRegistrationNames: {                                                                                         // 11837
      bubbled: keyOf({onDragLeave: true}),                                                                             // 11838
      captured: keyOf({onDragLeaveCapture: true})                                                                      // 11839
    }                                                                                                                  // 11840
  },                                                                                                                   // 11841
  dragOver: {                                                                                                          // 11842
    phasedRegistrationNames: {                                                                                         // 11843
      bubbled: keyOf({onDragOver: true}),                                                                              // 11844
      captured: keyOf({onDragOverCapture: true})                                                                       // 11845
    }                                                                                                                  // 11846
  },                                                                                                                   // 11847
  dragStart: {                                                                                                         // 11848
    phasedRegistrationNames: {                                                                                         // 11849
      bubbled: keyOf({onDragStart: true}),                                                                             // 11850
      captured: keyOf({onDragStartCapture: true})                                                                      // 11851
    }                                                                                                                  // 11852
  },                                                                                                                   // 11853
  drop: {                                                                                                              // 11854
    phasedRegistrationNames: {                                                                                         // 11855
      bubbled: keyOf({onDrop: true}),                                                                                  // 11856
      captured: keyOf({onDropCapture: true})                                                                           // 11857
    }                                                                                                                  // 11858
  },                                                                                                                   // 11859
  focus: {                                                                                                             // 11860
    phasedRegistrationNames: {                                                                                         // 11861
      bubbled: keyOf({onFocus: true}),                                                                                 // 11862
      captured: keyOf({onFocusCapture: true})                                                                          // 11863
    }                                                                                                                  // 11864
  },                                                                                                                   // 11865
  input: {                                                                                                             // 11866
    phasedRegistrationNames: {                                                                                         // 11867
      bubbled: keyOf({onInput: true}),                                                                                 // 11868
      captured: keyOf({onInputCapture: true})                                                                          // 11869
    }                                                                                                                  // 11870
  },                                                                                                                   // 11871
  keyDown: {                                                                                                           // 11872
    phasedRegistrationNames: {                                                                                         // 11873
      bubbled: keyOf({onKeyDown: true}),                                                                               // 11874
      captured: keyOf({onKeyDownCapture: true})                                                                        // 11875
    }                                                                                                                  // 11876
  },                                                                                                                   // 11877
  keyPress: {                                                                                                          // 11878
    phasedRegistrationNames: {                                                                                         // 11879
      bubbled: keyOf({onKeyPress: true}),                                                                              // 11880
      captured: keyOf({onKeyPressCapture: true})                                                                       // 11881
    }                                                                                                                  // 11882
  },                                                                                                                   // 11883
  keyUp: {                                                                                                             // 11884
    phasedRegistrationNames: {                                                                                         // 11885
      bubbled: keyOf({onKeyUp: true}),                                                                                 // 11886
      captured: keyOf({onKeyUpCapture: true})                                                                          // 11887
    }                                                                                                                  // 11888
  },                                                                                                                   // 11889
  // Note: We do not allow listening to mouseOver events. Instead, use the                                             // 11890
  // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.                                                     // 11891
  mouseDown: {                                                                                                         // 11892
    phasedRegistrationNames: {                                                                                         // 11893
      bubbled: keyOf({onMouseDown: true}),                                                                             // 11894
      captured: keyOf({onMouseDownCapture: true})                                                                      // 11895
    }                                                                                                                  // 11896
  },                                                                                                                   // 11897
  mouseMove: {                                                                                                         // 11898
    phasedRegistrationNames: {                                                                                         // 11899
      bubbled: keyOf({onMouseMove: true}),                                                                             // 11900
      captured: keyOf({onMouseMoveCapture: true})                                                                      // 11901
    }                                                                                                                  // 11902
  },                                                                                                                   // 11903
  mouseUp: {                                                                                                           // 11904
    phasedRegistrationNames: {                                                                                         // 11905
      bubbled: keyOf({onMouseUp: true}),                                                                               // 11906
      captured: keyOf({onMouseUpCapture: true})                                                                        // 11907
    }                                                                                                                  // 11908
  },                                                                                                                   // 11909
  paste: {                                                                                                             // 11910
    phasedRegistrationNames: {                                                                                         // 11911
      bubbled: keyOf({onPaste: true}),                                                                                 // 11912
      captured: keyOf({onPasteCapture: true})                                                                          // 11913
    }                                                                                                                  // 11914
  },                                                                                                                   // 11915
  scroll: {                                                                                                            // 11916
    phasedRegistrationNames: {                                                                                         // 11917
      bubbled: keyOf({onScroll: true}),                                                                                // 11918
      captured: keyOf({onScrollCapture: true})                                                                         // 11919
    }                                                                                                                  // 11920
  },                                                                                                                   // 11921
  submit: {                                                                                                            // 11922
    phasedRegistrationNames: {                                                                                         // 11923
      bubbled: keyOf({onSubmit: true}),                                                                                // 11924
      captured: keyOf({onSubmitCapture: true})                                                                         // 11925
    }                                                                                                                  // 11926
  },                                                                                                                   // 11927
  touchCancel: {                                                                                                       // 11928
    phasedRegistrationNames: {                                                                                         // 11929
      bubbled: keyOf({onTouchCancel: true}),                                                                           // 11930
      captured: keyOf({onTouchCancelCapture: true})                                                                    // 11931
    }                                                                                                                  // 11932
  },                                                                                                                   // 11933
  touchEnd: {                                                                                                          // 11934
    phasedRegistrationNames: {                                                                                         // 11935
      bubbled: keyOf({onTouchEnd: true}),                                                                              // 11936
      captured: keyOf({onTouchEndCapture: true})                                                                       // 11937
    }                                                                                                                  // 11938
  },                                                                                                                   // 11939
  touchMove: {                                                                                                         // 11940
    phasedRegistrationNames: {                                                                                         // 11941
      bubbled: keyOf({onTouchMove: true}),                                                                             // 11942
      captured: keyOf({onTouchMoveCapture: true})                                                                      // 11943
    }                                                                                                                  // 11944
  },                                                                                                                   // 11945
  touchStart: {                                                                                                        // 11946
    phasedRegistrationNames: {                                                                                         // 11947
      bubbled: keyOf({onTouchStart: true}),                                                                            // 11948
      captured: keyOf({onTouchStartCapture: true})                                                                     // 11949
    }                                                                                                                  // 11950
  },                                                                                                                   // 11951
  wheel: {                                                                                                             // 11952
    phasedRegistrationNames: {                                                                                         // 11953
      bubbled: keyOf({onWheel: true}),                                                                                 // 11954
      captured: keyOf({onWheelCapture: true})                                                                          // 11955
    }                                                                                                                  // 11956
  }                                                                                                                    // 11957
};                                                                                                                     // 11958
                                                                                                                       // 11959
var topLevelEventsToDispatchConfig = {                                                                                 // 11960
  topBlur:        eventTypes.blur,                                                                                     // 11961
  topClick:       eventTypes.click,                                                                                    // 11962
  topContextMenu: eventTypes.contextMenu,                                                                              // 11963
  topCopy:        eventTypes.copy,                                                                                     // 11964
  topCut:         eventTypes.cut,                                                                                      // 11965
  topDoubleClick: eventTypes.doubleClick,                                                                              // 11966
  topDrag:        eventTypes.drag,                                                                                     // 11967
  topDragEnd:     eventTypes.dragEnd,                                                                                  // 11968
  topDragEnter:   eventTypes.dragEnter,                                                                                // 11969
  topDragExit:    eventTypes.dragExit,                                                                                 // 11970
  topDragLeave:   eventTypes.dragLeave,                                                                                // 11971
  topDragOver:    eventTypes.dragOver,                                                                                 // 11972
  topDragStart:   eventTypes.dragStart,                                                                                // 11973
  topDrop:        eventTypes.drop,                                                                                     // 11974
  topFocus:       eventTypes.focus,                                                                                    // 11975
  topInput:       eventTypes.input,                                                                                    // 11976
  topKeyDown:     eventTypes.keyDown,                                                                                  // 11977
  topKeyPress:    eventTypes.keyPress,                                                                                 // 11978
  topKeyUp:       eventTypes.keyUp,                                                                                    // 11979
  topMouseDown:   eventTypes.mouseDown,                                                                                // 11980
  topMouseMove:   eventTypes.mouseMove,                                                                                // 11981
  topMouseUp:     eventTypes.mouseUp,                                                                                  // 11982
  topPaste:       eventTypes.paste,                                                                                    // 11983
  topScroll:      eventTypes.scroll,                                                                                   // 11984
  topSubmit:      eventTypes.submit,                                                                                   // 11985
  topTouchCancel: eventTypes.touchCancel,                                                                              // 11986
  topTouchEnd:    eventTypes.touchEnd,                                                                                 // 11987
  topTouchMove:   eventTypes.touchMove,                                                                                // 11988
  topTouchStart:  eventTypes.touchStart,                                                                               // 11989
  topWheel:       eventTypes.wheel                                                                                     // 11990
};                                                                                                                     // 11991
                                                                                                                       // 11992
var SimpleEventPlugin = {                                                                                              // 11993
                                                                                                                       // 11994
  eventTypes: eventTypes,                                                                                              // 11995
                                                                                                                       // 11996
  /**                                                                                                                  // 11997
   * Same as the default implementation, except cancels the event when return                                          // 11998
   * value is false.                                                                                                   // 11999
   *                                                                                                                   // 12000
   * @param {object} Event to be dispatched.                                                                           // 12001
   * @param {function} Application-level callback.                                                                     // 12002
   * @param {string} domID DOM ID to pass to the callback.                                                             // 12003
   */                                                                                                                  // 12004
  executeDispatch: function(event, listener, domID) {                                                                  // 12005
    var returnValue = listener(event, domID);                                                                          // 12006
    if (returnValue === false) {                                                                                       // 12007
      event.stopPropagation();                                                                                         // 12008
      event.preventDefault();                                                                                          // 12009
    }                                                                                                                  // 12010
  },                                                                                                                   // 12011
                                                                                                                       // 12012
  /**                                                                                                                  // 12013
   * @param {string} topLevelType Record from `EventConstants`.                                                        // 12014
   * @param {DOMEventTarget} topLevelTarget The listening component root node.                                         // 12015
   * @param {string} topLevelTargetID ID of `topLevelTarget`.                                                          // 12016
   * @param {object} nativeEvent Native browser event.                                                                 // 12017
   * @return {*} An accumulation of synthetic events.                                                                  // 12018
   * @see {EventPluginHub.extractEvents}                                                                               // 12019
   */                                                                                                                  // 12020
  extractEvents: function(                                                                                             // 12021
      topLevelType,                                                                                                    // 12022
      topLevelTarget,                                                                                                  // 12023
      topLevelTargetID,                                                                                                // 12024
      nativeEvent) {                                                                                                   // 12025
    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];                                                 // 12026
    if (!dispatchConfig) {                                                                                             // 12027
      return null;                                                                                                     // 12028
    }                                                                                                                  // 12029
    var EventConstructor;                                                                                              // 12030
    switch(topLevelType) {                                                                                             // 12031
      case topLevelTypes.topInput:                                                                                     // 12032
      case topLevelTypes.topSubmit:                                                                                    // 12033
        // HTML Events                                                                                                 // 12034
        // @see http://www.w3.org/TR/html5/index.html#events-0                                                         // 12035
        EventConstructor = SyntheticEvent;                                                                             // 12036
        break;                                                                                                         // 12037
      case topLevelTypes.topKeyDown:                                                                                   // 12038
      case topLevelTypes.topKeyPress:                                                                                  // 12039
      case topLevelTypes.topKeyUp:                                                                                     // 12040
        EventConstructor = SyntheticKeyboardEvent;                                                                     // 12041
        break;                                                                                                         // 12042
      case topLevelTypes.topBlur:                                                                                      // 12043
      case topLevelTypes.topFocus:                                                                                     // 12044
        EventConstructor = SyntheticFocusEvent;                                                                        // 12045
        break;                                                                                                         // 12046
      case topLevelTypes.topClick:                                                                                     // 12047
        // Firefox creates a click event on right mouse clicks. This removes the                                       // 12048
        // unwanted click events.                                                                                      // 12049
        if (nativeEvent.button === 2) {                                                                                // 12050
          return null;                                                                                                 // 12051
        }                                                                                                              // 12052
        /* falls through */                                                                                            // 12053
      case topLevelTypes.topContextMenu:                                                                               // 12054
      case topLevelTypes.topDoubleClick:                                                                               // 12055
      case topLevelTypes.topDrag:                                                                                      // 12056
      case topLevelTypes.topDragEnd:                                                                                   // 12057
      case topLevelTypes.topDragEnter:                                                                                 // 12058
      case topLevelTypes.topDragExit:                                                                                  // 12059
      case topLevelTypes.topDragLeave:                                                                                 // 12060
      case topLevelTypes.topDragOver:                                                                                  // 12061
      case topLevelTypes.topDragStart:                                                                                 // 12062
      case topLevelTypes.topDrop:                                                                                      // 12063
      case topLevelTypes.topMouseDown:                                                                                 // 12064
      case topLevelTypes.topMouseMove:                                                                                 // 12065
      case topLevelTypes.topMouseUp:                                                                                   // 12066
        EventConstructor = SyntheticMouseEvent;                                                                        // 12067
        break;                                                                                                         // 12068
      case topLevelTypes.topTouchCancel:                                                                               // 12069
      case topLevelTypes.topTouchEnd:                                                                                  // 12070
      case topLevelTypes.topTouchMove:                                                                                 // 12071
      case topLevelTypes.topTouchStart:                                                                                // 12072
        EventConstructor = SyntheticTouchEvent;                                                                        // 12073
        break;                                                                                                         // 12074
      case topLevelTypes.topScroll:                                                                                    // 12075
        EventConstructor = SyntheticUIEvent;                                                                           // 12076
        break;                                                                                                         // 12077
      case topLevelTypes.topWheel:                                                                                     // 12078
        EventConstructor = SyntheticWheelEvent;                                                                        // 12079
        break;                                                                                                         // 12080
      case topLevelTypes.topCopy:                                                                                      // 12081
      case topLevelTypes.topCut:                                                                                       // 12082
      case topLevelTypes.topPaste:                                                                                     // 12083
        EventConstructor = SyntheticClipboardEvent;                                                                    // 12084
        break;                                                                                                         // 12085
    }                                                                                                                  // 12086
    ("production" !== "development" ? invariant(                                                                       // 12087
      EventConstructor,                                                                                                // 12088
      'SimpleEventPlugin: Unhandled event type, `%s`.',                                                                // 12089
      topLevelType                                                                                                     // 12090
    ) : invariant(EventConstructor));                                                                                  // 12091
    var event = EventConstructor.getPooled(                                                                            // 12092
      dispatchConfig,                                                                                                  // 12093
      topLevelTargetID,                                                                                                // 12094
      nativeEvent                                                                                                      // 12095
    );                                                                                                                 // 12096
    EventPropagators.accumulateTwoPhaseDispatches(event);                                                              // 12097
    return event;                                                                                                      // 12098
  }                                                                                                                    // 12099
                                                                                                                       // 12100
};                                                                                                                     // 12101
                                                                                                                       // 12102
module.exports = SimpleEventPlugin;                                                                                    // 12103
                                                                                                                       // 12104
},{"./EventConstants":15,"./EventPropagators":20,"./SyntheticClipboardEvent":74,"./SyntheticEvent":76,"./SyntheticFocusEvent":77,"./SyntheticKeyboardEvent":78,"./SyntheticMouseEvent":79,"./SyntheticTouchEvent":80,"./SyntheticUIEvent":81,"./SyntheticWheelEvent":82,"./invariant":109,"./keyOf":116}],74:[function(require,module,exports){
/**                                                                                                                    // 12106
 * Copyright 2013 Facebook, Inc.                                                                                       // 12107
 *                                                                                                                     // 12108
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 12109
 * you may not use this file except in compliance with the License.                                                    // 12110
 * You may obtain a copy of the License at                                                                             // 12111
 *                                                                                                                     // 12112
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 12113
 *                                                                                                                     // 12114
 * Unless required by applicable law or agreed to in writing, software                                                 // 12115
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 12116
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 12117
 * See the License for the specific language governing permissions and                                                 // 12118
 * limitations under the License.                                                                                      // 12119
 *                                                                                                                     // 12120
 * @providesModule SyntheticClipboardEvent                                                                             // 12121
 * @typechecks static-only                                                                                             // 12122
 */                                                                                                                    // 12123
                                                                                                                       // 12124
"use strict";                                                                                                          // 12125
                                                                                                                       // 12126
var SyntheticEvent = require("./SyntheticEvent");                                                                      // 12127
                                                                                                                       // 12128
/**                                                                                                                    // 12129
 * @interface Event                                                                                                    // 12130
 * @see http://www.w3.org/TR/clipboard-apis/                                                                           // 12131
 */                                                                                                                    // 12132
var ClipboardEventInterface = {                                                                                        // 12133
  clipboardData: null                                                                                                  // 12134
};                                                                                                                     // 12135
                                                                                                                       // 12136
/**                                                                                                                    // 12137
 * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 12138
 * @param {string} dispatchMarker Marker identifying the event target.                                                 // 12139
 * @param {object} nativeEvent Native browser event.                                                                   // 12140
 * @extends {SyntheticUIEvent}                                                                                         // 12141
 */                                                                                                                    // 12142
function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {                                        // 12143
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);                                              // 12144
}                                                                                                                      // 12145
                                                                                                                       // 12146
SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);                                         // 12147
                                                                                                                       // 12148
module.exports = SyntheticClipboardEvent;                                                                              // 12149
                                                                                                                       // 12150
                                                                                                                       // 12151
},{"./SyntheticEvent":76}],75:[function(require,module,exports){                                                       // 12152
/**                                                                                                                    // 12153
 * Copyright 2013 Facebook, Inc.                                                                                       // 12154
 *                                                                                                                     // 12155
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 12156
 * you may not use this file except in compliance with the License.                                                    // 12157
 * You may obtain a copy of the License at                                                                             // 12158
 *                                                                                                                     // 12159
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 12160
 *                                                                                                                     // 12161
 * Unless required by applicable law or agreed to in writing, software                                                 // 12162
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 12163
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 12164
 * See the License for the specific language governing permissions and                                                 // 12165
 * limitations under the License.                                                                                      // 12166
 *                                                                                                                     // 12167
 * @providesModule SyntheticCompositionEvent                                                                           // 12168
 * @typechecks static-only                                                                                             // 12169
 */                                                                                                                    // 12170
                                                                                                                       // 12171
"use strict";                                                                                                          // 12172
                                                                                                                       // 12173
var SyntheticEvent = require("./SyntheticEvent");                                                                      // 12174
                                                                                                                       // 12175
/**                                                                                                                    // 12176
 * @interface Event                                                                                                    // 12177
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents                                              // 12178
 */                                                                                                                    // 12179
var CompositionEventInterface = {                                                                                      // 12180
  data: null                                                                                                           // 12181
};                                                                                                                     // 12182
                                                                                                                       // 12183
/**                                                                                                                    // 12184
 * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 12185
 * @param {string} dispatchMarker Marker identifying the event target.                                                 // 12186
 * @param {object} nativeEvent Native browser event.                                                                   // 12187
 * @extends {SyntheticUIEvent}                                                                                         // 12188
 */                                                                                                                    // 12189
function SyntheticCompositionEvent(                                                                                    // 12190
  dispatchConfig,                                                                                                      // 12191
  dispatchMarker,                                                                                                      // 12192
  nativeEvent) {                                                                                                       // 12193
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);                                              // 12194
}                                                                                                                      // 12195
                                                                                                                       // 12196
SyntheticEvent.augmentClass(                                                                                           // 12197
  SyntheticCompositionEvent,                                                                                           // 12198
  CompositionEventInterface                                                                                            // 12199
);                                                                                                                     // 12200
                                                                                                                       // 12201
module.exports = SyntheticCompositionEvent;                                                                            // 12202
                                                                                                                       // 12203
                                                                                                                       // 12204
},{"./SyntheticEvent":76}],76:[function(require,module,exports){                                                       // 12205
/**                                                                                                                    // 12206
 * Copyright 2013 Facebook, Inc.                                                                                       // 12207
 *                                                                                                                     // 12208
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 12209
 * you may not use this file except in compliance with the License.                                                    // 12210
 * You may obtain a copy of the License at                                                                             // 12211
 *                                                                                                                     // 12212
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 12213
 *                                                                                                                     // 12214
 * Unless required by applicable law or agreed to in writing, software                                                 // 12215
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 12216
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 12217
 * See the License for the specific language governing permissions and                                                 // 12218
 * limitations under the License.                                                                                      // 12219
 *                                                                                                                     // 12220
 * @providesModule SyntheticEvent                                                                                      // 12221
 * @typechecks static-only                                                                                             // 12222
 */                                                                                                                    // 12223
                                                                                                                       // 12224
"use strict";                                                                                                          // 12225
                                                                                                                       // 12226
var PooledClass = require("./PooledClass");                                                                            // 12227
                                                                                                                       // 12228
var emptyFunction = require("./emptyFunction");                                                                        // 12229
var getEventTarget = require("./getEventTarget");                                                                      // 12230
var merge = require("./merge");                                                                                        // 12231
var mergeInto = require("./mergeInto");                                                                                // 12232
                                                                                                                       // 12233
/**                                                                                                                    // 12234
 * @interface Event                                                                                                    // 12235
 * @see http://www.w3.org/TR/DOM-Level-3-Events/                                                                       // 12236
 */                                                                                                                    // 12237
var EventInterface = {                                                                                                 // 12238
  type: null,                                                                                                          // 12239
  target: getEventTarget,                                                                                              // 12240
  currentTarget: null,                                                                                                 // 12241
  eventPhase: null,                                                                                                    // 12242
  bubbles: null,                                                                                                       // 12243
  cancelable: null,                                                                                                    // 12244
  timeStamp: function(event) {                                                                                         // 12245
    return event.timeStamp || Date.now();                                                                              // 12246
  },                                                                                                                   // 12247
  defaultPrevented: null,                                                                                              // 12248
  isTrusted: null                                                                                                      // 12249
};                                                                                                                     // 12250
                                                                                                                       // 12251
/**                                                                                                                    // 12252
 * Synthetic events are dispatched by event plugins, typically in response to a                                        // 12253
 * top-level event delegation handler.                                                                                 // 12254
 *                                                                                                                     // 12255
 * These systems should generally use pooling to reduce the frequency of garbage                                       // 12256
 * collection. The system should check `isPersistent` to determine whether the                                         // 12257
 * event should be released into the pool after being dispatched. Users that                                           // 12258
 * need a persisted event should invoke `persist`.                                                                     // 12259
 *                                                                                                                     // 12260
 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by                                           // 12261
 * normalizing browser quirks. Subclasses do not necessarily have to implement a                                       // 12262
 * DOM interface; custom application-specific events can also subclass this.                                           // 12263
 *                                                                                                                     // 12264
 * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 12265
 * @param {string} dispatchMarker Marker identifying the event target.                                                 // 12266
 * @param {object} nativeEvent Native browser event.                                                                   // 12267
 */                                                                                                                    // 12268
function SyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent) {                                                 // 12269
  this.dispatchConfig = dispatchConfig;                                                                                // 12270
  this.dispatchMarker = dispatchMarker;                                                                                // 12271
  this.nativeEvent = nativeEvent;                                                                                      // 12272
                                                                                                                       // 12273
  var Interface = this.constructor.Interface;                                                                          // 12274
  for (var propName in Interface) {                                                                                    // 12275
    if (!Interface.hasOwnProperty(propName)) {                                                                         // 12276
      continue;                                                                                                        // 12277
    }                                                                                                                  // 12278
    var normalize = Interface[propName];                                                                               // 12279
    if (normalize) {                                                                                                   // 12280
      this[propName] = normalize(nativeEvent);                                                                         // 12281
    } else {                                                                                                           // 12282
      this[propName] = nativeEvent[propName];                                                                          // 12283
    }                                                                                                                  // 12284
  }                                                                                                                    // 12285
                                                                                                                       // 12286
  var defaultPrevented = nativeEvent.defaultPrevented != null ?                                                        // 12287
    nativeEvent.defaultPrevented :                                                                                     // 12288
    nativeEvent.returnValue === false;                                                                                 // 12289
  if (defaultPrevented) {                                                                                              // 12290
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;                                                           // 12291
  } else {                                                                                                             // 12292
    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;                                                          // 12293
  }                                                                                                                    // 12294
  this.isPropagationStopped = emptyFunction.thatReturnsFalse;                                                          // 12295
}                                                                                                                      // 12296
                                                                                                                       // 12297
mergeInto(SyntheticEvent.prototype, {                                                                                  // 12298
                                                                                                                       // 12299
  preventDefault: function() {                                                                                         // 12300
    this.defaultPrevented = true;                                                                                      // 12301
    var event = this.nativeEvent;                                                                                      // 12302
    event.preventDefault ? event.preventDefault() : event.returnValue = false;                                         // 12303
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;                                                           // 12304
  },                                                                                                                   // 12305
                                                                                                                       // 12306
  stopPropagation: function() {                                                                                        // 12307
    var event = this.nativeEvent;                                                                                      // 12308
    event.stopPropagation ? event.stopPropagation() : event.cancelBubble = true;                                       // 12309
    this.isPropagationStopped = emptyFunction.thatReturnsTrue;                                                         // 12310
  },                                                                                                                   // 12311
                                                                                                                       // 12312
  /**                                                                                                                  // 12313
   * We release all dispatched `SyntheticEvent`s after each event loop, adding                                         // 12314
   * them back into the pool. This allows a way to hold onto a reference that                                          // 12315
   * won't be added back into the pool.                                                                                // 12316
   */                                                                                                                  // 12317
  persist: function() {                                                                                                // 12318
    this.isPersistent = emptyFunction.thatReturnsTrue;                                                                 // 12319
  },                                                                                                                   // 12320
                                                                                                                       // 12321
  /**                                                                                                                  // 12322
   * Checks if this event should be released back into the pool.                                                       // 12323
   *                                                                                                                   // 12324
   * @return {boolean} True if this should not be released, false otherwise.                                           // 12325
   */                                                                                                                  // 12326
  isPersistent: emptyFunction.thatReturnsFalse,                                                                        // 12327
                                                                                                                       // 12328
  /**                                                                                                                  // 12329
   * `PooledClass` looks for `destructor` on each instance it releases.                                                // 12330
   */                                                                                                                  // 12331
  destructor: function() {                                                                                             // 12332
    var Interface = this.constructor.Interface;                                                                        // 12333
    for (var propName in Interface) {                                                                                  // 12334
      this[propName] = null;                                                                                           // 12335
    }                                                                                                                  // 12336
    this.dispatchConfig = null;                                                                                        // 12337
    this.dispatchMarker = null;                                                                                        // 12338
    this.nativeEvent = null;                                                                                           // 12339
  }                                                                                                                    // 12340
                                                                                                                       // 12341
});                                                                                                                    // 12342
                                                                                                                       // 12343
SyntheticEvent.Interface = EventInterface;                                                                             // 12344
                                                                                                                       // 12345
/**                                                                                                                    // 12346
 * Helper to reduce boilerplate when creating subclasses.                                                              // 12347
 *                                                                                                                     // 12348
 * @param {function} Class                                                                                             // 12349
 * @param {?object} Interface                                                                                          // 12350
 */                                                                                                                    // 12351
SyntheticEvent.augmentClass = function(Class, Interface) {                                                             // 12352
  var Super = this;                                                                                                    // 12353
                                                                                                                       // 12354
  var prototype = Object.create(Super.prototype);                                                                      // 12355
  mergeInto(prototype, Class.prototype);                                                                               // 12356
  Class.prototype = prototype;                                                                                         // 12357
  Class.prototype.constructor = Class;                                                                                 // 12358
                                                                                                                       // 12359
  Class.Interface = merge(Super.Interface, Interface);                                                                 // 12360
  Class.augmentClass = Super.augmentClass;                                                                             // 12361
                                                                                                                       // 12362
  PooledClass.addPoolingTo(Class, PooledClass.threeArgumentPooler);                                                    // 12363
};                                                                                                                     // 12364
                                                                                                                       // 12365
PooledClass.addPoolingTo(SyntheticEvent, PooledClass.threeArgumentPooler);                                             // 12366
                                                                                                                       // 12367
module.exports = SyntheticEvent;                                                                                       // 12368
                                                                                                                       // 12369
},{"./PooledClass":25,"./emptyFunction":94,"./getEventTarget":102,"./merge":118,"./mergeInto":120}],77:[function(require,module,exports){
/**                                                                                                                    // 12371
 * Copyright 2013 Facebook, Inc.                                                                                       // 12372
 *                                                                                                                     // 12373
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 12374
 * you may not use this file except in compliance with the License.                                                    // 12375
 * You may obtain a copy of the License at                                                                             // 12376
 *                                                                                                                     // 12377
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 12378
 *                                                                                                                     // 12379
 * Unless required by applicable law or agreed to in writing, software                                                 // 12380
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 12381
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 12382
 * See the License for the specific language governing permissions and                                                 // 12383
 * limitations under the License.                                                                                      // 12384
 *                                                                                                                     // 12385
 * @providesModule SyntheticFocusEvent                                                                                 // 12386
 * @typechecks static-only                                                                                             // 12387
 */                                                                                                                    // 12388
                                                                                                                       // 12389
"use strict";                                                                                                          // 12390
                                                                                                                       // 12391
var SyntheticUIEvent = require("./SyntheticUIEvent");                                                                  // 12392
                                                                                                                       // 12393
/**                                                                                                                    // 12394
 * @interface FocusEvent                                                                                               // 12395
 * @see http://www.w3.org/TR/DOM-Level-3-Events/                                                                       // 12396
 */                                                                                                                    // 12397
var FocusEventInterface = {                                                                                            // 12398
  relatedTarget: null                                                                                                  // 12399
};                                                                                                                     // 12400
                                                                                                                       // 12401
/**                                                                                                                    // 12402
 * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 12403
 * @param {string} dispatchMarker Marker identifying the event target.                                                 // 12404
 * @param {object} nativeEvent Native browser event.                                                                   // 12405
 * @extends {SyntheticUIEvent}                                                                                         // 12406
 */                                                                                                                    // 12407
function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent) {                                            // 12408
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);                                            // 12409
}                                                                                                                      // 12410
                                                                                                                       // 12411
SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);                                               // 12412
                                                                                                                       // 12413
module.exports = SyntheticFocusEvent;                                                                                  // 12414
                                                                                                                       // 12415
},{"./SyntheticUIEvent":81}],78:[function(require,module,exports){                                                     // 12416
/**                                                                                                                    // 12417
 * Copyright 2013 Facebook, Inc.                                                                                       // 12418
 *                                                                                                                     // 12419
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 12420
 * you may not use this file except in compliance with the License.                                                    // 12421
 * You may obtain a copy of the License at                                                                             // 12422
 *                                                                                                                     // 12423
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 12424
 *                                                                                                                     // 12425
 * Unless required by applicable law or agreed to in writing, software                                                 // 12426
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 12427
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 12428
 * See the License for the specific language governing permissions and                                                 // 12429
 * limitations under the License.                                                                                      // 12430
 *                                                                                                                     // 12431
 * @providesModule SyntheticKeyboardEvent                                                                              // 12432
 * @typechecks static-only                                                                                             // 12433
 */                                                                                                                    // 12434
                                                                                                                       // 12435
"use strict";                                                                                                          // 12436
                                                                                                                       // 12437
var SyntheticUIEvent = require("./SyntheticUIEvent");                                                                  // 12438
                                                                                                                       // 12439
/**                                                                                                                    // 12440
 * @interface KeyboardEvent                                                                                            // 12441
 * @see http://www.w3.org/TR/DOM-Level-3-Events/                                                                       // 12442
 */                                                                                                                    // 12443
var KeyboardEventInterface = {                                                                                         // 12444
  'char': null,                                                                                                        // 12445
  key: null,                                                                                                           // 12446
  location: null,                                                                                                      // 12447
  ctrlKey: null,                                                                                                       // 12448
  shiftKey: null,                                                                                                      // 12449
  altKey: null,                                                                                                        // 12450
  metaKey: null,                                                                                                       // 12451
  repeat: null,                                                                                                        // 12452
  locale: null,                                                                                                        // 12453
  // Legacy Interface                                                                                                  // 12454
  charCode: null,                                                                                                      // 12455
  keyCode: null,                                                                                                       // 12456
  which: null                                                                                                          // 12457
};                                                                                                                     // 12458
                                                                                                                       // 12459
/**                                                                                                                    // 12460
 * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 12461
 * @param {string} dispatchMarker Marker identifying the event target.                                                 // 12462
 * @param {object} nativeEvent Native browser event.                                                                   // 12463
 * @extends {SyntheticUIEvent}                                                                                         // 12464
 */                                                                                                                    // 12465
function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {                                         // 12466
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);                                            // 12467
}                                                                                                                      // 12468
                                                                                                                       // 12469
SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);                                         // 12470
                                                                                                                       // 12471
module.exports = SyntheticKeyboardEvent;                                                                               // 12472
                                                                                                                       // 12473
},{"./SyntheticUIEvent":81}],79:[function(require,module,exports){                                                     // 12474
/**                                                                                                                    // 12475
 * Copyright 2013 Facebook, Inc.                                                                                       // 12476
 *                                                                                                                     // 12477
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 12478
 * you may not use this file except in compliance with the License.                                                    // 12479
 * You may obtain a copy of the License at                                                                             // 12480
 *                                                                                                                     // 12481
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 12482
 *                                                                                                                     // 12483
 * Unless required by applicable law or agreed to in writing, software                                                 // 12484
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 12485
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 12486
 * See the License for the specific language governing permissions and                                                 // 12487
 * limitations under the License.                                                                                      // 12488
 *                                                                                                                     // 12489
 * @providesModule SyntheticMouseEvent                                                                                 // 12490
 * @typechecks static-only                                                                                             // 12491
 */                                                                                                                    // 12492
                                                                                                                       // 12493
"use strict";                                                                                                          // 12494
                                                                                                                       // 12495
var SyntheticUIEvent = require("./SyntheticUIEvent");                                                                  // 12496
var ViewportMetrics = require("./ViewportMetrics");                                                                    // 12497
                                                                                                                       // 12498
/**                                                                                                                    // 12499
 * @interface MouseEvent                                                                                               // 12500
 * @see http://www.w3.org/TR/DOM-Level-3-Events/                                                                       // 12501
 */                                                                                                                    // 12502
var MouseEventInterface = {                                                                                            // 12503
  screenX: null,                                                                                                       // 12504
  screenY: null,                                                                                                       // 12505
  clientX: null,                                                                                                       // 12506
  clientY: null,                                                                                                       // 12507
  ctrlKey: null,                                                                                                       // 12508
  shiftKey: null,                                                                                                      // 12509
  altKey: null,                                                                                                        // 12510
  metaKey: null,                                                                                                       // 12511
  button: function(event) {                                                                                            // 12512
    // Webkit, Firefox, IE9+                                                                                           // 12513
    // which:  1 2 3                                                                                                   // 12514
    // button: 0 1 2 (standard)                                                                                        // 12515
    var button = event.button;                                                                                         // 12516
    if ('which' in event) {                                                                                            // 12517
      return button;                                                                                                   // 12518
    }                                                                                                                  // 12519
    // IE<9                                                                                                            // 12520
    // which:  undefined                                                                                               // 12521
    // button: 0 0 0                                                                                                   // 12522
    // button: 1 4 2 (onmouseup)                                                                                       // 12523
    return button === 2 ? 2 : button === 4 ? 1 : 0;                                                                    // 12524
  },                                                                                                                   // 12525
  buttons: null,                                                                                                       // 12526
  relatedTarget: function(event) {                                                                                     // 12527
    return event.relatedTarget || (                                                                                    // 12528
      event.fromElement === event.srcElement ?                                                                         // 12529
        event.toElement :                                                                                              // 12530
        event.fromElement                                                                                              // 12531
    );                                                                                                                 // 12532
  },                                                                                                                   // 12533
  // "Proprietary" Interface.                                                                                          // 12534
  pageX: function(event) {                                                                                             // 12535
    return 'pageX' in event ?                                                                                          // 12536
      event.pageX :                                                                                                    // 12537
      event.clientX + ViewportMetrics.currentScrollLeft;                                                               // 12538
  },                                                                                                                   // 12539
  pageY: function(event) {                                                                                             // 12540
    return 'pageY' in event ?                                                                                          // 12541
      event.pageY :                                                                                                    // 12542
      event.clientY + ViewportMetrics.currentScrollTop;                                                                // 12543
  }                                                                                                                    // 12544
};                                                                                                                     // 12545
                                                                                                                       // 12546
/**                                                                                                                    // 12547
 * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 12548
 * @param {string} dispatchMarker Marker identifying the event target.                                                 // 12549
 * @param {object} nativeEvent Native browser event.                                                                   // 12550
 * @extends {SyntheticUIEvent}                                                                                         // 12551
 */                                                                                                                    // 12552
function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent) {                                            // 12553
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);                                            // 12554
}                                                                                                                      // 12555
                                                                                                                       // 12556
SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);                                               // 12557
                                                                                                                       // 12558
module.exports = SyntheticMouseEvent;                                                                                  // 12559
                                                                                                                       // 12560
},{"./SyntheticUIEvent":81,"./ViewportMetrics":84}],80:[function(require,module,exports){                              // 12561
/**                                                                                                                    // 12562
 * Copyright 2013 Facebook, Inc.                                                                                       // 12563
 *                                                                                                                     // 12564
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 12565
 * you may not use this file except in compliance with the License.                                                    // 12566
 * You may obtain a copy of the License at                                                                             // 12567
 *                                                                                                                     // 12568
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 12569
 *                                                                                                                     // 12570
 * Unless required by applicable law or agreed to in writing, software                                                 // 12571
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 12572
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 12573
 * See the License for the specific language governing permissions and                                                 // 12574
 * limitations under the License.                                                                                      // 12575
 *                                                                                                                     // 12576
 * @providesModule SyntheticTouchEvent                                                                                 // 12577
 * @typechecks static-only                                                                                             // 12578
 */                                                                                                                    // 12579
                                                                                                                       // 12580
"use strict";                                                                                                          // 12581
                                                                                                                       // 12582
var SyntheticUIEvent = require("./SyntheticUIEvent");                                                                  // 12583
                                                                                                                       // 12584
/**                                                                                                                    // 12585
 * @interface TouchEvent                                                                                               // 12586
 * @see http://www.w3.org/TR/touch-events/                                                                             // 12587
 */                                                                                                                    // 12588
var TouchEventInterface = {                                                                                            // 12589
  touches: null,                                                                                                       // 12590
  targetTouches: null,                                                                                                 // 12591
  changedTouches: null,                                                                                                // 12592
  altKey: null,                                                                                                        // 12593
  metaKey: null,                                                                                                       // 12594
  ctrlKey: null,                                                                                                       // 12595
  shiftKey: null                                                                                                       // 12596
};                                                                                                                     // 12597
                                                                                                                       // 12598
/**                                                                                                                    // 12599
 * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 12600
 * @param {string} dispatchMarker Marker identifying the event target.                                                 // 12601
 * @param {object} nativeEvent Native browser event.                                                                   // 12602
 * @extends {SyntheticUIEvent}                                                                                         // 12603
 */                                                                                                                    // 12604
function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent) {                                            // 12605
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);                                            // 12606
}                                                                                                                      // 12607
                                                                                                                       // 12608
SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);                                               // 12609
                                                                                                                       // 12610
module.exports = SyntheticTouchEvent;                                                                                  // 12611
                                                                                                                       // 12612
},{"./SyntheticUIEvent":81}],81:[function(require,module,exports){                                                     // 12613
/**                                                                                                                    // 12614
 * Copyright 2013 Facebook, Inc.                                                                                       // 12615
 *                                                                                                                     // 12616
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 12617
 * you may not use this file except in compliance with the License.                                                    // 12618
 * You may obtain a copy of the License at                                                                             // 12619
 *                                                                                                                     // 12620
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 12621
 *                                                                                                                     // 12622
 * Unless required by applicable law or agreed to in writing, software                                                 // 12623
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 12624
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 12625
 * See the License for the specific language governing permissions and                                                 // 12626
 * limitations under the License.                                                                                      // 12627
 *                                                                                                                     // 12628
 * @providesModule SyntheticUIEvent                                                                                    // 12629
 * @typechecks static-only                                                                                             // 12630
 */                                                                                                                    // 12631
                                                                                                                       // 12632
"use strict";                                                                                                          // 12633
                                                                                                                       // 12634
var SyntheticEvent = require("./SyntheticEvent");                                                                      // 12635
                                                                                                                       // 12636
/**                                                                                                                    // 12637
 * @interface UIEvent                                                                                                  // 12638
 * @see http://www.w3.org/TR/DOM-Level-3-Events/                                                                       // 12639
 */                                                                                                                    // 12640
var UIEventInterface = {                                                                                               // 12641
  view: null,                                                                                                          // 12642
  detail: null                                                                                                         // 12643
};                                                                                                                     // 12644
                                                                                                                       // 12645
/**                                                                                                                    // 12646
 * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 12647
 * @param {string} dispatchMarker Marker identifying the event target.                                                 // 12648
 * @param {object} nativeEvent Native browser event.                                                                   // 12649
 * @extends {SyntheticEvent}                                                                                           // 12650
 */                                                                                                                    // 12651
function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent) {                                               // 12652
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);                                              // 12653
}                                                                                                                      // 12654
                                                                                                                       // 12655
SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);                                                       // 12656
                                                                                                                       // 12657
module.exports = SyntheticUIEvent;                                                                                     // 12658
                                                                                                                       // 12659
},{"./SyntheticEvent":76}],82:[function(require,module,exports){                                                       // 12660
/**                                                                                                                    // 12661
 * Copyright 2013 Facebook, Inc.                                                                                       // 12662
 *                                                                                                                     // 12663
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 12664
 * you may not use this file except in compliance with the License.                                                    // 12665
 * You may obtain a copy of the License at                                                                             // 12666
 *                                                                                                                     // 12667
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 12668
 *                                                                                                                     // 12669
 * Unless required by applicable law or agreed to in writing, software                                                 // 12670
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 12671
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 12672
 * See the License for the specific language governing permissions and                                                 // 12673
 * limitations under the License.                                                                                      // 12674
 *                                                                                                                     // 12675
 * @providesModule SyntheticWheelEvent                                                                                 // 12676
 * @typechecks static-only                                                                                             // 12677
 */                                                                                                                    // 12678
                                                                                                                       // 12679
"use strict";                                                                                                          // 12680
                                                                                                                       // 12681
var SyntheticMouseEvent = require("./SyntheticMouseEvent");                                                            // 12682
                                                                                                                       // 12683
/**                                                                                                                    // 12684
 * @interface WheelEvent                                                                                               // 12685
 * @see http://www.w3.org/TR/DOM-Level-3-Events/                                                                       // 12686
 */                                                                                                                    // 12687
var WheelEventInterface = {                                                                                            // 12688
  deltaX: function(event) {                                                                                            // 12689
    // NOTE: IE<9 does not support x-axis delta.                                                                       // 12690
    return (                                                                                                           // 12691
      'deltaX' in event ? event.deltaX :                                                                               // 12692
      // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).                                       // 12693
      'wheelDeltaX' in event ? -event.wheelDeltaX : 0                                                                  // 12694
    );                                                                                                                 // 12695
  },                                                                                                                   // 12696
  deltaY: function(event) {                                                                                            // 12697
    return (                                                                                                           // 12698
      // Normalize (up is positive).                                                                                   // 12699
      'deltaY' in event ? -event.deltaY :                                                                              // 12700
      // Fallback to `wheelDeltaY` for Webkit.                                                                         // 12701
      'wheelDeltaY' in event ? event.wheelDeltaY :                                                                     // 12702
      // Fallback to `wheelDelta` for IE<9.                                                                            // 12703
      'wheelDelta' in event ? event.wheelDelta : 0                                                                     // 12704
    );                                                                                                                 // 12705
  },                                                                                                                   // 12706
  deltaZ: null,                                                                                                        // 12707
  deltaMode: null                                                                                                      // 12708
};                                                                                                                     // 12709
                                                                                                                       // 12710
/**                                                                                                                    // 12711
 * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 12712
 * @param {string} dispatchMarker Marker identifying the event target.                                                 // 12713
 * @param {object} nativeEvent Native browser event.                                                                   // 12714
 * @extends {SyntheticMouseEvent}                                                                                      // 12715
 */                                                                                                                    // 12716
function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent) {                                            // 12717
  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);                                         // 12718
}                                                                                                                      // 12719
                                                                                                                       // 12720
SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);                                            // 12721
                                                                                                                       // 12722
module.exports = SyntheticWheelEvent;                                                                                  // 12723
                                                                                                                       // 12724
},{"./SyntheticMouseEvent":79}],83:[function(require,module,exports){                                                  // 12725
/**                                                                                                                    // 12726
 * Copyright 2013 Facebook, Inc.                                                                                       // 12727
 *                                                                                                                     // 12728
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 12729
 * you may not use this file except in compliance with the License.                                                    // 12730
 * You may obtain a copy of the License at                                                                             // 12731
 *                                                                                                                     // 12732
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 12733
 *                                                                                                                     // 12734
 * Unless required by applicable law or agreed to in writing, software                                                 // 12735
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 12736
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 12737
 * See the License for the specific language governing permissions and                                                 // 12738
 * limitations under the License.                                                                                      // 12739
 *                                                                                                                     // 12740
 * @providesModule Transaction                                                                                         // 12741
 */                                                                                                                    // 12742
                                                                                                                       // 12743
"use strict";                                                                                                          // 12744
                                                                                                                       // 12745
var invariant = require("./invariant");                                                                                // 12746
                                                                                                                       // 12747
/**                                                                                                                    // 12748
 * `Transaction` creates a black box that is able to wrap any method such that                                         // 12749
 * certain invariants are maintained before and after the method is invoked                                            // 12750
 * (Even if an exception is thrown while invoking the wrapped method). Whoever                                         // 12751
 * instantiates a transaction can provide enforcers of the invariants at                                               // 12752
 * creation time. The `Transaction` class itself will supply one additional                                            // 12753
 * automatic invariant for you - the invariant that any transaction instance                                           // 12754
 * should not be ran while it is already being ran. You would typically create a                                       // 12755
 * single instance of a `Transaction` for reuse multiple times, that potentially                                       // 12756
 * is used to wrap several different methods. Wrappers are extremely simple -                                          // 12757
 * they only require implementing two methods.                                                                         // 12758
 *                                                                                                                     // 12759
 * <pre>                                                                                                               // 12760
 *                       wrappers (injected at creation time)                                                          // 12761
 *                                      +        +                                                                     // 12762
 *                                      |        |                                                                     // 12763
 *                    +-----------------|--------|--------------+                                                      // 12764
 *                    |                 v        |              |                                                      // 12765
 *                    |      +---------------+   |              |                                                      // 12766
 *                    |   +--|    wrapper1   |---|----+         |                                                      // 12767
 *                    |   |  +---------------+   v    |         |                                                      // 12768
 *                    |   |          +-------------+  |         |                                                      // 12769
 *                    |   |     +----|   wrapper2  |--------+   |                                                      // 12770
 *                    |   |     |    +-------------+  |     |   |                                                      // 12771
 *                    |   |     |                     |     |   |                                                      // 12772
 *                    |   v     v                     v     v   | wrapper                                              // 12773
 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants                                           // 12774
 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained                                           // 12775
 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->                                             // 12776
 *                    | |   | |   |   |         |   |   | |   | |                                                      // 12777
 *                    | |   | |   |   |         |   |   | |   | |                                                      // 12778
 *                    | |   | |   |   |         |   |   | |   | |                                                      // 12779
 *                    | +---+ +---+   +---------+   +---+ +---+ |                                                      // 12780
 *                    |  initialize                    close    |                                                      // 12781
 *                    +-----------------------------------------+                                                      // 12782
 * </pre>                                                                                                              // 12783
 *                                                                                                                     // 12784
 * Bonus:                                                                                                              // 12785
 * - Reports timing metrics by method name and wrapper index.                                                          // 12786
 *                                                                                                                     // 12787
 * Use cases:                                                                                                          // 12788
 * - Preserving the input selection ranges before/after reconciliation.                                                // 12789
 *   Restoring selection even in the event of an unexpected error.                                                     // 12790
 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,                                          // 12791
 *   while guaranteeing that afterwards, the event system is reactivated.                                              // 12792
 * - Flushing a queue of collected DOM mutations to the main UI thread after a                                         // 12793
 *   reconciliation takes place in a worker thread.                                                                    // 12794
 * - Invoking any collected `componentDidRender` callbacks after rendering new                                         // 12795
 *   content.                                                                                                          // 12796
 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue                                         // 12797
 *   to preserve the `scrollTop` (an automatic scroll aware DOM).                                                      // 12798
 * - (Future use case): Layout calculations before and after DOM upates.                                               // 12799
 *                                                                                                                     // 12800
 * Transactional plugin API:                                                                                           // 12801
 * - A module that has an `initialize` method that returns any precomputation.                                         // 12802
 * - and a `close` method that accepts the precomputation. `close` is invoked                                          // 12803
 *   when the wrapped process is completed, or has failed.                                                             // 12804
 *                                                                                                                     // 12805
 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules                                             // 12806
 * that implement `initialize` and `close`.                                                                            // 12807
 * @return {Transaction} Single transaction for reuse in thread.                                                       // 12808
 *                                                                                                                     // 12809
 * @class Transaction                                                                                                  // 12810
 */                                                                                                                    // 12811
var Mixin = {                                                                                                          // 12812
  /**                                                                                                                  // 12813
   * Sets up this instance so that it is prepared for collecting metrics. Does                                         // 12814
   * so such that this setup method may be used on an instance that is already                                         // 12815
   * initialized, in a way that does not consume additional memory upon reuse.                                         // 12816
   * That can be useful if you decide to make your subclass of this mixin a                                            // 12817
   * "PooledClass".                                                                                                    // 12818
   */                                                                                                                  // 12819
  reinitializeTransaction: function() {                                                                                // 12820
    this.transactionWrappers = this.getTransactionWrappers();                                                          // 12821
    if (!this.wrapperInitData) {                                                                                       // 12822
      this.wrapperInitData = [];                                                                                       // 12823
    } else {                                                                                                           // 12824
      this.wrapperInitData.length = 0;                                                                                 // 12825
    }                                                                                                                  // 12826
    if (!this.timingMetrics) {                                                                                         // 12827
      this.timingMetrics = {};                                                                                         // 12828
    }                                                                                                                  // 12829
    this.timingMetrics.methodInvocationTime = 0;                                                                       // 12830
    if (!this.timingMetrics.wrapperInitTimes) {                                                                        // 12831
      this.timingMetrics.wrapperInitTimes = [];                                                                        // 12832
    } else {                                                                                                           // 12833
      this.timingMetrics.wrapperInitTimes.length = 0;                                                                  // 12834
    }                                                                                                                  // 12835
    if (!this.timingMetrics.wrapperCloseTimes) {                                                                       // 12836
      this.timingMetrics.wrapperCloseTimes = [];                                                                       // 12837
    } else {                                                                                                           // 12838
      this.timingMetrics.wrapperCloseTimes.length = 0;                                                                 // 12839
    }                                                                                                                  // 12840
    this._isInTransaction = false;                                                                                     // 12841
  },                                                                                                                   // 12842
                                                                                                                       // 12843
  _isInTransaction: false,                                                                                             // 12844
                                                                                                                       // 12845
  /**                                                                                                                  // 12846
   * @abstract                                                                                                         // 12847
   * @return {Array<TransactionWrapper>} Array of transaction wrappers.                                                // 12848
   */                                                                                                                  // 12849
  getTransactionWrappers: null,                                                                                        // 12850
                                                                                                                       // 12851
  isInTransaction: function() {                                                                                        // 12852
    return !!this._isInTransaction;                                                                                    // 12853
  },                                                                                                                   // 12854
                                                                                                                       // 12855
  /**                                                                                                                  // 12856
   * Executes the function within a safety window. Use this for the top level                                          // 12857
   * methods that result in large amounts of computation/mutations that would                                          // 12858
   * need to be safety checked.                                                                                        // 12859
   *                                                                                                                   // 12860
   * @param {function} method Member of scope to call.                                                                 // 12861
   * @param {Object} scope Scope to invoke from.                                                                       // 12862
   * @param {Object?=} args... Arguments to pass to the method (optional).                                             // 12863
   *                           Helps prevent need to bind in many cases.                                               // 12864
   * @return Return value from `method`.                                                                               // 12865
   */                                                                                                                  // 12866
  perform: function(method, scope, a, b, c, d, e, f) {                                                                 // 12867
    ("production" !== "development" ? invariant(                                                                       // 12868
      !this.isInTransaction(),                                                                                         // 12869
      'Transaction.perform(...): Cannot initialize a transaction when there ' +                                        // 12870
      'is already an outstanding transaction.'                                                                         // 12871
    ) : invariant(!this.isInTransaction()));                                                                           // 12872
    var memberStart = Date.now();                                                                                      // 12873
    var errorToThrow = null;                                                                                           // 12874
    var ret;                                                                                                           // 12875
    try {                                                                                                              // 12876
      this.initializeAll();                                                                                            // 12877
      ret = method.call(scope, a, b, c, d, e, f);                                                                      // 12878
    } catch (error) {                                                                                                  // 12879
      // IE8 requires `catch` in order to use `finally`.                                                               // 12880
      errorToThrow = error;                                                                                            // 12881
    } finally {                                                                                                        // 12882
      var memberEnd = Date.now();                                                                                      // 12883
      this.methodInvocationTime += (memberEnd - memberStart);                                                          // 12884
      try {                                                                                                            // 12885
        this.closeAll();                                                                                               // 12886
      } catch (closeError) {                                                                                           // 12887
        // If `method` throws, prefer to show that stack trace over any thrown                                         // 12888
        // by invoking `closeAll`.                                                                                     // 12889
        errorToThrow = errorToThrow || closeError;                                                                     // 12890
      }                                                                                                                // 12891
    }                                                                                                                  // 12892
    if (errorToThrow) {                                                                                                // 12893
      throw errorToThrow;                                                                                              // 12894
    }                                                                                                                  // 12895
    return ret;                                                                                                        // 12896
  },                                                                                                                   // 12897
                                                                                                                       // 12898
  initializeAll: function() {                                                                                          // 12899
    this._isInTransaction = true;                                                                                      // 12900
    var transactionWrappers = this.transactionWrappers;                                                                // 12901
    var wrapperInitTimes = this.timingMetrics.wrapperInitTimes;                                                        // 12902
    var errorToThrow = null;                                                                                           // 12903
    for (var i = 0; i < transactionWrappers.length; i++) {                                                             // 12904
      var initStart = Date.now();                                                                                      // 12905
      var wrapper = transactionWrappers[i];                                                                            // 12906
      try {                                                                                                            // 12907
        this.wrapperInitData[i] = wrapper.initialize ?                                                                 // 12908
          wrapper.initialize.call(this) :                                                                              // 12909
          null;                                                                                                        // 12910
      } catch (initError) {                                                                                            // 12911
        // Prefer to show the stack trace of the first error.                                                          // 12912
        errorToThrow = errorToThrow || initError;                                                                      // 12913
        this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;                                                          // 12914
      } finally {                                                                                                      // 12915
        var curInitTime = wrapperInitTimes[i];                                                                         // 12916
        var initEnd = Date.now();                                                                                      // 12917
        wrapperInitTimes[i] = (curInitTime || 0) + (initEnd - initStart);                                              // 12918
      }                                                                                                                // 12919
    }                                                                                                                  // 12920
    if (errorToThrow) {                                                                                                // 12921
      throw errorToThrow;                                                                                              // 12922
    }                                                                                                                  // 12923
  },                                                                                                                   // 12924
                                                                                                                       // 12925
  /**                                                                                                                  // 12926
   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into                                       // 12927
   * them the respective return values of `this.transactionWrappers.init[i]`                                           // 12928
   * (`close`rs that correspond to initializers that failed will not be                                                // 12929
   * invoked).                                                                                                         // 12930
   */                                                                                                                  // 12931
  closeAll: function() {                                                                                               // 12932
    ("production" !== "development" ? invariant(                                                                       // 12933
      this.isInTransaction(),                                                                                          // 12934
      'Transaction.closeAll(): Cannot close transaction when none are open.'                                           // 12935
    ) : invariant(this.isInTransaction()));                                                                            // 12936
    var transactionWrappers = this.transactionWrappers;                                                                // 12937
    var wrapperCloseTimes = this.timingMetrics.wrapperCloseTimes;                                                      // 12938
    var errorToThrow = null;                                                                                           // 12939
    for (var i = 0; i < transactionWrappers.length; i++) {                                                             // 12940
      var wrapper = transactionWrappers[i];                                                                            // 12941
      var closeStart = Date.now();                                                                                     // 12942
      var initData = this.wrapperInitData[i];                                                                          // 12943
      try {                                                                                                            // 12944
        if (initData !== Transaction.OBSERVED_ERROR) {                                                                 // 12945
          wrapper.close && wrapper.close.call(this, initData);                                                         // 12946
        }                                                                                                              // 12947
      } catch (closeError) {                                                                                           // 12948
        // Prefer to show the stack trace of the first error.                                                          // 12949
        errorToThrow = errorToThrow || closeError;                                                                     // 12950
      } finally {                                                                                                      // 12951
        var closeEnd = Date.now();                                                                                     // 12952
        var curCloseTime = wrapperCloseTimes[i];                                                                       // 12953
        wrapperCloseTimes[i] = (curCloseTime || 0) + (closeEnd - closeStart);                                          // 12954
      }                                                                                                                // 12955
    }                                                                                                                  // 12956
    this.wrapperInitData.length = 0;                                                                                   // 12957
    this._isInTransaction = false;                                                                                     // 12958
    if (errorToThrow) {                                                                                                // 12959
      throw errorToThrow;                                                                                              // 12960
    }                                                                                                                  // 12961
  }                                                                                                                    // 12962
};                                                                                                                     // 12963
                                                                                                                       // 12964
var Transaction = {                                                                                                    // 12965
                                                                                                                       // 12966
  Mixin: Mixin,                                                                                                        // 12967
                                                                                                                       // 12968
  /**                                                                                                                  // 12969
   * Token to look for to determine if an error occured.                                                               // 12970
   */                                                                                                                  // 12971
  OBSERVED_ERROR: {}                                                                                                   // 12972
                                                                                                                       // 12973
};                                                                                                                     // 12974
                                                                                                                       // 12975
module.exports = Transaction;                                                                                          // 12976
                                                                                                                       // 12977
},{"./invariant":109}],84:[function(require,module,exports){                                                           // 12978
/**                                                                                                                    // 12979
 * Copyright 2013 Facebook, Inc.                                                                                       // 12980
 *                                                                                                                     // 12981
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 12982
 * you may not use this file except in compliance with the License.                                                    // 12983
 * You may obtain a copy of the License at                                                                             // 12984
 *                                                                                                                     // 12985
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 12986
 *                                                                                                                     // 12987
 * Unless required by applicable law or agreed to in writing, software                                                 // 12988
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 12989
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 12990
 * See the License for the specific language governing permissions and                                                 // 12991
 * limitations under the License.                                                                                      // 12992
 *                                                                                                                     // 12993
 * @providesModule ViewportMetrics                                                                                     // 12994
 */                                                                                                                    // 12995
                                                                                                                       // 12996
"use strict";                                                                                                          // 12997
                                                                                                                       // 12998
var getUnboundedScrollPosition = require("./getUnboundedScrollPosition");                                              // 12999
                                                                                                                       // 13000
var ViewportMetrics = {                                                                                                // 13001
                                                                                                                       // 13002
  currentScrollLeft: 0,                                                                                                // 13003
                                                                                                                       // 13004
  currentScrollTop: 0,                                                                                                 // 13005
                                                                                                                       // 13006
  refreshScrollValues: function() {                                                                                    // 13007
    var scrollPosition = getUnboundedScrollPosition(window);                                                           // 13008
    ViewportMetrics.currentScrollLeft = scrollPosition.x;                                                              // 13009
    ViewportMetrics.currentScrollTop = scrollPosition.y;                                                               // 13010
  }                                                                                                                    // 13011
                                                                                                                       // 13012
};                                                                                                                     // 13013
                                                                                                                       // 13014
module.exports = ViewportMetrics;                                                                                      // 13015
                                                                                                                       // 13016
},{"./getUnboundedScrollPosition":107}],85:[function(require,module,exports){                                          // 13017
/**                                                                                                                    // 13018
 * Copyright 2013 Facebook, Inc.                                                                                       // 13019
 *                                                                                                                     // 13020
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 13021
 * you may not use this file except in compliance with the License.                                                    // 13022
 * You may obtain a copy of the License at                                                                             // 13023
 *                                                                                                                     // 13024
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 13025
 *                                                                                                                     // 13026
 * Unless required by applicable law or agreed to in writing, software                                                 // 13027
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 13028
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 13029
 * See the License for the specific language governing permissions and                                                 // 13030
 * limitations under the License.                                                                                      // 13031
 *                                                                                                                     // 13032
 * @providesModule accumulate                                                                                          // 13033
 */                                                                                                                    // 13034
                                                                                                                       // 13035
"use strict";                                                                                                          // 13036
                                                                                                                       // 13037
var invariant = require("./invariant");                                                                                // 13038
                                                                                                                       // 13039
/**                                                                                                                    // 13040
 * Accumulates items that must not be null or undefined.                                                               // 13041
 *                                                                                                                     // 13042
 * This is used to conserve memory by avoiding array allocations.                                                      // 13043
 *                                                                                                                     // 13044
 * @return {*|array<*>} An accumulation of items.                                                                      // 13045
 */                                                                                                                    // 13046
function accumulate(current, next) {                                                                                   // 13047
  ("production" !== "development" ? invariant(                                                                         // 13048
    next != null,                                                                                                      // 13049
    'accumulate(...): Accumulated items must be not be null or undefined.'                                             // 13050
  ) : invariant(next != null));                                                                                        // 13051
  if (current == null) {                                                                                               // 13052
    return next;                                                                                                       // 13053
  } else {                                                                                                             // 13054
    // Both are not empty. Warning: Never call x.concat(y) when you are not                                            // 13055
    // certain that x is an Array (x could be a string with concat method).                                            // 13056
    var currentIsArray = Array.isArray(current);                                                                       // 13057
    var nextIsArray = Array.isArray(next);                                                                             // 13058
    if (currentIsArray) {                                                                                              // 13059
      return current.concat(next);                                                                                     // 13060
    } else {                                                                                                           // 13061
      if (nextIsArray) {                                                                                               // 13062
        return [current].concat(next);                                                                                 // 13063
      } else {                                                                                                         // 13064
        return [current, next];                                                                                        // 13065
      }                                                                                                                // 13066
    }                                                                                                                  // 13067
  }                                                                                                                    // 13068
}                                                                                                                      // 13069
                                                                                                                       // 13070
module.exports = accumulate;                                                                                           // 13071
                                                                                                                       // 13072
},{"./invariant":109}],86:[function(require,module,exports){                                                           // 13073
/**                                                                                                                    // 13074
 * Copyright 2013 Facebook, Inc.                                                                                       // 13075
 *                                                                                                                     // 13076
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 13077
 * you may not use this file except in compliance with the License.                                                    // 13078
 * You may obtain a copy of the License at                                                                             // 13079
 *                                                                                                                     // 13080
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 13081
 *                                                                                                                     // 13082
 * Unless required by applicable law or agreed to in writing, software                                                 // 13083
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 13084
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 13085
 * See the License for the specific language governing permissions and                                                 // 13086
 * limitations under the License.                                                                                      // 13087
 *                                                                                                                     // 13088
 * @providesModule adler32                                                                                             // 13089
 */                                                                                                                    // 13090
                                                                                                                       // 13091
/* jslint bitwise:true */                                                                                              // 13092
                                                                                                                       // 13093
"use strict";                                                                                                          // 13094
                                                                                                                       // 13095
var MOD = 65521;                                                                                                       // 13096
                                                                                                                       // 13097
// This is a clean-room implementation of adler32 designed for detecting                                               // 13098
// if markup is not what we expect it to be. It does not need to be                                                    // 13099
// cryptographically strong, only reasonable good at detecting if markup                                               // 13100
// generated on the server is different than that on the client.                                                       // 13101
function adler32(data) {                                                                                               // 13102
  var a = 1;                                                                                                           // 13103
  var b = 0;                                                                                                           // 13104
  for (var i = 0; i < data.length; i++) {                                                                              // 13105
    a = (a + data.charCodeAt(i)) % MOD;                                                                                // 13106
    b = (b + a) % MOD;                                                                                                 // 13107
  }                                                                                                                    // 13108
  return a | (b << 16);                                                                                                // 13109
}                                                                                                                      // 13110
                                                                                                                       // 13111
module.exports = adler32;                                                                                              // 13112
                                                                                                                       // 13113
},{}],87:[function(require,module,exports){                                                                            // 13114
/**                                                                                                                    // 13115
 * Copyright 2013 Facebook, Inc.                                                                                       // 13116
 *                                                                                                                     // 13117
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 13118
 * you may not use this file except in compliance with the License.                                                    // 13119
 * You may obtain a copy of the License at                                                                             // 13120
 *                                                                                                                     // 13121
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 13122
 *                                                                                                                     // 13123
 * Unless required by applicable law or agreed to in writing, software                                                 // 13124
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 13125
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 13126
 * See the License for the specific language governing permissions and                                                 // 13127
 * limitations under the License.                                                                                      // 13128
 *                                                                                                                     // 13129
 * @providesModule containsNode                                                                                        // 13130
 * @typechecks                                                                                                         // 13131
 */                                                                                                                    // 13132
                                                                                                                       // 13133
var isTextNode = require("./isTextNode");                                                                              // 13134
                                                                                                                       // 13135
/*jslint bitwise:true */                                                                                               // 13136
                                                                                                                       // 13137
/**                                                                                                                    // 13138
 * Checks if a given DOM node contains or is another DOM node.                                                         // 13139
 *                                                                                                                     // 13140
 * @param {?DOMNode} outerNode Outer DOM node.                                                                         // 13141
 * @param {?DOMNode} innerNode Inner DOM node.                                                                         // 13142
 * @return {boolean} True if `outerNode` contains or is `innerNode`.                                                   // 13143
 */                                                                                                                    // 13144
function containsNode(outerNode, innerNode) {                                                                          // 13145
  if (!outerNode || !innerNode) {                                                                                      // 13146
    return false;                                                                                                      // 13147
  } else if (outerNode === innerNode) {                                                                                // 13148
    return true;                                                                                                       // 13149
  } else if (isTextNode(outerNode)) {                                                                                  // 13150
    return false;                                                                                                      // 13151
  } else if (isTextNode(innerNode)) {                                                                                  // 13152
    return containsNode(outerNode, innerNode.parentNode);                                                              // 13153
  } else if (outerNode.contains) {                                                                                     // 13154
    return outerNode.contains(innerNode);                                                                              // 13155
  } else if (outerNode.compareDocumentPosition) {                                                                      // 13156
    return !!(outerNode.compareDocumentPosition(innerNode) & 16);                                                      // 13157
  } else {                                                                                                             // 13158
    return false;                                                                                                      // 13159
  }                                                                                                                    // 13160
}                                                                                                                      // 13161
                                                                                                                       // 13162
module.exports = containsNode;                                                                                         // 13163
                                                                                                                       // 13164
},{"./isTextNode":113}],88:[function(require,module,exports){                                                          // 13165
/**                                                                                                                    // 13166
 * Copyright 2013 Facebook, Inc.                                                                                       // 13167
 *                                                                                                                     // 13168
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 13169
 * you may not use this file except in compliance with the License.                                                    // 13170
 * You may obtain a copy of the License at                                                                             // 13171
 *                                                                                                                     // 13172
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 13173
 *                                                                                                                     // 13174
 * Unless required by applicable law or agreed to in writing, software                                                 // 13175
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 13176
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 13177
 * See the License for the specific language governing permissions and                                                 // 13178
 * limitations under the License.                                                                                      // 13179
 *                                                                                                                     // 13180
 * @providesModule copyProperties                                                                                      // 13181
 */                                                                                                                    // 13182
                                                                                                                       // 13183
/**                                                                                                                    // 13184
 * Copy properties from one or more objects (up to 5) into the first object.                                           // 13185
 * This is a shallow copy. It mutates the first object and also returns it.                                            // 13186
 *                                                                                                                     // 13187
 * NOTE: `arguments` has a very significant performance penalty, which is why                                          // 13188
 * we don't support unlimited arguments.                                                                               // 13189
 */                                                                                                                    // 13190
function copyProperties(obj, a, b, c, d, e, f) {                                                                       // 13191
  obj = obj || {};                                                                                                     // 13192
                                                                                                                       // 13193
  if ("production" !== "development") {                                                                                // 13194
    if (f) {                                                                                                           // 13195
      throw new Error('Too many arguments passed to copyProperties');                                                  // 13196
    }                                                                                                                  // 13197
  }                                                                                                                    // 13198
                                                                                                                       // 13199
  var args = [a, b, c, d, e];                                                                                          // 13200
  var ii = 0, v;                                                                                                       // 13201
  while (args[ii]) {                                                                                                   // 13202
    v = args[ii++];                                                                                                    // 13203
    for (var k in v) {                                                                                                 // 13204
      obj[k] = v[k];                                                                                                   // 13205
    }                                                                                                                  // 13206
                                                                                                                       // 13207
    // IE ignores toString in object iteration.. See:                                                                  // 13208
    // webreflection.blogspot.com/2007/07/quick-fix-internet-explorer-and.html                                         // 13209
    if (v.hasOwnProperty && v.hasOwnProperty('toString') &&                                                            // 13210
        (typeof v.toString != 'undefined') && (obj.toString !== v.toString)) {                                         // 13211
      obj.toString = v.toString;                                                                                       // 13212
    }                                                                                                                  // 13213
  }                                                                                                                    // 13214
                                                                                                                       // 13215
  return obj;                                                                                                          // 13216
}                                                                                                                      // 13217
                                                                                                                       // 13218
module.exports = copyProperties;                                                                                       // 13219
                                                                                                                       // 13220
},{}],89:[function(require,module,exports){                                                                            // 13221
/**                                                                                                                    // 13222
 * Copyright 2013 Facebook, Inc.                                                                                       // 13223
 *                                                                                                                     // 13224
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 13225
 * you may not use this file except in compliance with the License.                                                    // 13226
 * You may obtain a copy of the License at                                                                             // 13227
 *                                                                                                                     // 13228
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 13229
 *                                                                                                                     // 13230
 * Unless required by applicable law or agreed to in writing, software                                                 // 13231
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 13232
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 13233
 * See the License for the specific language governing permissions and                                                 // 13234
 * limitations under the License.                                                                                      // 13235
 *                                                                                                                     // 13236
 * @providesModule createArrayFrom                                                                                     // 13237
 * @typechecks                                                                                                         // 13238
 */                                                                                                                    // 13239
                                                                                                                       // 13240
/**                                                                                                                    // 13241
 * NOTE: if you are a previous user of this function, it has been considered                                           // 13242
 * unsafe because it's inconsistent across browsers for some inputs.                                                   // 13243
 * Instead use `Array.isArray()`.                                                                                      // 13244
 *                                                                                                                     // 13245
 * Perform a heuristic test to determine if an object is "array-like".                                                 // 13246
 *                                                                                                                     // 13247
 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"                                                      // 13248
 *   Joshu replied: "Mu."                                                                                              // 13249
 *                                                                                                                     // 13250
 * This function determines if its argument has "array nature": it returns                                             // 13251
 * true if the argument is an actual array, an `arguments' object, or an                                               // 13252
 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).                                               // 13253
 *                                                                                                                     // 13254
 * @param {*} obj                                                                                                      // 13255
 * @return {boolean}                                                                                                   // 13256
 */                                                                                                                    // 13257
function hasArrayNature(obj) {                                                                                         // 13258
  return (                                                                                                             // 13259
    // not null/false                                                                                                  // 13260
    !!obj &&                                                                                                           // 13261
    // arrays are objects, NodeLists are functions in Safari                                                           // 13262
    (typeof obj == 'object' || typeof obj == 'function') &&                                                            // 13263
    // quacks like an array                                                                                            // 13264
    ('length' in obj) &&                                                                                               // 13265
    // not window                                                                                                      // 13266
    !('setInterval' in obj) &&                                                                                         // 13267
    // no DOM node should be considered an array-like                                                                  // 13268
    // a 'select' element has 'length' and 'item' properties on IE8                                                    // 13269
    (typeof obj.nodeType != 'number') &&                                                                               // 13270
    (                                                                                                                  // 13271
      // a real array                                                                                                  // 13272
      (// HTMLCollection/NodeList                                                                                      // 13273
      (Array.isArray(obj) ||                                                                                           // 13274
      // arguments                                                                                                     // 13275
      ('callee' in obj) || 'item' in obj))                                                                             // 13276
    )                                                                                                                  // 13277
  );                                                                                                                   // 13278
}                                                                                                                      // 13279
                                                                                                                       // 13280
/**                                                                                                                    // 13281
 * Ensure that the argument is an array by wrapping it in an array if it is not.                                       // 13282
 * Creates a copy of the argument if it is already an array.                                                           // 13283
 *                                                                                                                     // 13284
 * This is mostly useful idiomatically:                                                                                // 13285
 *                                                                                                                     // 13286
 *   var createArrayFrom = require('createArrayFrom');                                                                 // 13287
 *                                                                                                                     // 13288
 *   function takesOneOrMoreThings(things) {                                                                           // 13289
 *     things = createArrayFrom(things);                                                                               // 13290
 *     ...                                                                                                             // 13291
 *   }                                                                                                                 // 13292
 *                                                                                                                     // 13293
 * This allows you to treat `things' as an array, but accept scalars in the API.                                       // 13294
 *                                                                                                                     // 13295
 * This is also good for converting certain pseudo-arrays, like `arguments` or                                         // 13296
 * HTMLCollections, into arrays.                                                                                       // 13297
 *                                                                                                                     // 13298
 * @param {*} obj                                                                                                      // 13299
 * @return {array}                                                                                                     // 13300
 */                                                                                                                    // 13301
function createArrayFrom(obj) {                                                                                        // 13302
  if (!hasArrayNature(obj)) {                                                                                          // 13303
    return [obj];                                                                                                      // 13304
  }                                                                                                                    // 13305
  if (obj.item) {                                                                                                      // 13306
    // IE does not support Array#slice on HTMLCollections                                                              // 13307
    var l = obj.length, ret = new Array(l);                                                                            // 13308
    while (l--) { ret[l] = obj[l]; }                                                                                   // 13309
    return ret;                                                                                                        // 13310
  }                                                                                                                    // 13311
  return Array.prototype.slice.call(obj);                                                                              // 13312
}                                                                                                                      // 13313
                                                                                                                       // 13314
module.exports = createArrayFrom;                                                                                      // 13315
                                                                                                                       // 13316
},{}],90:[function(require,module,exports){                                                                            // 13317
/**                                                                                                                    // 13318
 * Copyright 2013 Facebook, Inc.                                                                                       // 13319
 *                                                                                                                     // 13320
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 13321
 * you may not use this file except in compliance with the License.                                                    // 13322
 * You may obtain a copy of the License at                                                                             // 13323
 *                                                                                                                     // 13324
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 13325
 *                                                                                                                     // 13326
 * Unless required by applicable law or agreed to in writing, software                                                 // 13327
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 13328
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 13329
 * See the License for the specific language governing permissions and                                                 // 13330
 * limitations under the License.                                                                                      // 13331
 *                                                                                                                     // 13332
 * @providesModule createNodesFromMarkup                                                                               // 13333
 * @typechecks                                                                                                         // 13334
 */                                                                                                                    // 13335
                                                                                                                       // 13336
/*jslint evil: true, sub: true */                                                                                      // 13337
                                                                                                                       // 13338
var ExecutionEnvironment = require("./ExecutionEnvironment");                                                          // 13339
                                                                                                                       // 13340
var createArrayFrom = require("./createArrayFrom");                                                                    // 13341
var getMarkupWrap = require("./getMarkupWrap");                                                                        // 13342
var invariant = require("./invariant");                                                                                // 13343
                                                                                                                       // 13344
/**                                                                                                                    // 13345
 * Dummy container used to render all markup.                                                                          // 13346
 */                                                                                                                    // 13347
var dummyNode =                                                                                                        // 13348
  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;                                               // 13349
                                                                                                                       // 13350
/**                                                                                                                    // 13351
 * Pattern used by `getNodeName`.                                                                                      // 13352
 */                                                                                                                    // 13353
var nodeNamePattern = /^\s*<(\w+)/;                                                                                    // 13354
                                                                                                                       // 13355
/**                                                                                                                    // 13356
 * Extracts the `nodeName` of the first element in a string of markup.                                                 // 13357
 *                                                                                                                     // 13358
 * @param {string} markup String of markup.                                                                            // 13359
 * @return {?string} Node name of the supplied markup.                                                                 // 13360
 */                                                                                                                    // 13361
function getNodeName(markup) {                                                                                         // 13362
  var nodeNameMatch = markup.match(nodeNamePattern);                                                                   // 13363
  return nodeNameMatch && nodeNameMatch[1].toLowerCase();                                                              // 13364
}                                                                                                                      // 13365
                                                                                                                       // 13366
/**                                                                                                                    // 13367
 * Creates an array containing the nodes rendered from the supplied markup. The                                        // 13368
 * optionally supplied `handleScript` function will be invoked once for each                                           // 13369
 * <script> element that is rendered. If no `handleScript` function is supplied,                                       // 13370
 * an exception is thrown if any <script> elements are rendered.                                                       // 13371
 *                                                                                                                     // 13372
 * @param {string} markup A string of valid HTML markup.                                                               // 13373
 * @param {?function} handleScript Invoked once for each rendered <script>.                                            // 13374
 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.                                                 // 13375
 */                                                                                                                    // 13376
function createNodesFromMarkup(markup, handleScript) {                                                                 // 13377
  var node = dummyNode;                                                                                                // 13378
  ("production" !== "development" ? invariant(!!dummyNode, 'createNodesFromMarkup dummy not initialized') : invariant(!!dummyNode));
  var nodeName = getNodeName(markup);                                                                                  // 13380
                                                                                                                       // 13381
  var wrap = nodeName && getMarkupWrap(nodeName);                                                                      // 13382
  if (wrap) {                                                                                                          // 13383
    node.innerHTML = wrap[1] + markup + wrap[2];                                                                       // 13384
                                                                                                                       // 13385
    var wrapDepth = wrap[0];                                                                                           // 13386
    while (wrapDepth--) {                                                                                              // 13387
      node = node.lastChild;                                                                                           // 13388
    }                                                                                                                  // 13389
  } else {                                                                                                             // 13390
    node.innerHTML = markup;                                                                                           // 13391
  }                                                                                                                    // 13392
                                                                                                                       // 13393
  var scripts = node.getElementsByTagName('script');                                                                   // 13394
  if (scripts.length) {                                                                                                // 13395
    ("production" !== "development" ? invariant(                                                                       // 13396
      handleScript,                                                                                                    // 13397
      'createNodesFromMarkup(...): Unexpected <script> element rendered.'                                              // 13398
    ) : invariant(handleScript));                                                                                      // 13399
    createArrayFrom(scripts).forEach(handleScript);                                                                    // 13400
  }                                                                                                                    // 13401
                                                                                                                       // 13402
  var nodes = createArrayFrom(node.childNodes);                                                                        // 13403
  while (node.lastChild) {                                                                                             // 13404
    node.removeChild(node.lastChild);                                                                                  // 13405
  }                                                                                                                    // 13406
  return nodes;                                                                                                        // 13407
}                                                                                                                      // 13408
                                                                                                                       // 13409
module.exports = createNodesFromMarkup;                                                                                // 13410
                                                                                                                       // 13411
},{"./ExecutionEnvironment":21,"./createArrayFrom":89,"./getMarkupWrap":103,"./invariant":109}],91:[function(require,module,exports){
/**                                                                                                                    // 13413
 * Copyright 2013 Facebook, Inc.                                                                                       // 13414
 *                                                                                                                     // 13415
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 13416
 * you may not use this file except in compliance with the License.                                                    // 13417
 * You may obtain a copy of the License at                                                                             // 13418
 *                                                                                                                     // 13419
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 13420
 *                                                                                                                     // 13421
 * Unless required by applicable law or agreed to in writing, software                                                 // 13422
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 13423
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 13424
 * See the License for the specific language governing permissions and                                                 // 13425
 * limitations under the License.                                                                                      // 13426
 *                                                                                                                     // 13427
 * @providesModule createObjectFrom                                                                                    // 13428
 */                                                                                                                    // 13429
                                                                                                                       // 13430
/**                                                                                                                    // 13431
 * Construct an object from an array of keys                                                                           // 13432
 * and optionally specified value or list of values.                                                                   // 13433
 *                                                                                                                     // 13434
 *  >>> createObjectFrom(['a','b','c']);                                                                               // 13435
 *  {a: true, b: true, c: true}                                                                                        // 13436
 *                                                                                                                     // 13437
 *  >>> createObjectFrom(['a','b','c'], false);                                                                        // 13438
 *  {a: false, b: false, c: false}                                                                                     // 13439
 *                                                                                                                     // 13440
 *  >>> createObjectFrom(['a','b','c'], 'monkey');                                                                     // 13441
 *  {c:'monkey', b:'monkey' c:'monkey'}                                                                                // 13442
 *                                                                                                                     // 13443
 *  >>> createObjectFrom(['a','b','c'], [1,2,3]);                                                                      // 13444
 *  {a: 1, b: 2, c: 3}                                                                                                 // 13445
 *                                                                                                                     // 13446
 *  >>> createObjectFrom(['women', 'men'], [true, false]);                                                             // 13447
 *  {women: true, men: false}                                                                                          // 13448
 *                                                                                                                     // 13449
 * @param   Array   list of keys                                                                                       // 13450
 * @param   mixed   optional value or value array.  defaults true.                                                     // 13451
 * @returns object                                                                                                     // 13452
 */                                                                                                                    // 13453
function createObjectFrom(keys, values /* = true */) {                                                                 // 13454
  if ("production" !== "development") {                                                                                // 13455
    if (!Array.isArray(keys)) {                                                                                        // 13456
      throw new TypeError('Must pass an array of keys.');                                                              // 13457
    }                                                                                                                  // 13458
  }                                                                                                                    // 13459
                                                                                                                       // 13460
  var object = {};                                                                                                     // 13461
  var isArray = Array.isArray(values);                                                                                 // 13462
  if (typeof values == 'undefined') {                                                                                  // 13463
    values = true;                                                                                                     // 13464
  }                                                                                                                    // 13465
                                                                                                                       // 13466
  for (var ii = keys.length; ii--;) {                                                                                  // 13467
    object[keys[ii]] = isArray ? values[ii] : values;                                                                  // 13468
  }                                                                                                                    // 13469
  return object;                                                                                                       // 13470
}                                                                                                                      // 13471
                                                                                                                       // 13472
module.exports = createObjectFrom;                                                                                     // 13473
                                                                                                                       // 13474
},{}],92:[function(require,module,exports){                                                                            // 13475
/**                                                                                                                    // 13476
 * Copyright 2013 Facebook, Inc.                                                                                       // 13477
 *                                                                                                                     // 13478
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 13479
 * you may not use this file except in compliance with the License.                                                    // 13480
 * You may obtain a copy of the License at                                                                             // 13481
 *                                                                                                                     // 13482
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 13483
 *                                                                                                                     // 13484
 * Unless required by applicable law or agreed to in writing, software                                                 // 13485
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 13486
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 13487
 * See the License for the specific language governing permissions and                                                 // 13488
 * limitations under the License.                                                                                      // 13489
 *                                                                                                                     // 13490
 * @providesModule cx                                                                                                  // 13491
 */                                                                                                                    // 13492
                                                                                                                       // 13493
/**                                                                                                                    // 13494
 * This function is used to mark string literals representing CSS class names                                          // 13495
 * so that they can be transformed statically. This allows for modularization                                          // 13496
 * and minification of CSS class names.                                                                                // 13497
 *                                                                                                                     // 13498
 * In static_upstream, this function is actually implemented, but it should                                            // 13499
 * eventually be replaced with something more descriptive, and the transform                                           // 13500
 * that is used in the main stack should be ported for use elsewhere.                                                  // 13501
 *                                                                                                                     // 13502
 * @param string|object className to modularize, or an object of key/values.                                           // 13503
 *                      In the object case, the values are conditions that                                             // 13504
 *                      determine if the className keys should be included.                                            // 13505
 * @param [string ...]  Variable list of classNames in the string case.                                                // 13506
 * @return string       Renderable space-separated CSS className.                                                      // 13507
 */                                                                                                                    // 13508
function cx(classNames) {                                                                                              // 13509
  if (typeof classNames == 'object') {                                                                                 // 13510
    return Object.keys(classNames).map(function(className) {                                                           // 13511
      return classNames[className] ? className : '';                                                                   // 13512
    }).join(' ');                                                                                                      // 13513
  } else {                                                                                                             // 13514
    return Array.prototype.join.call(arguments, ' ');                                                                  // 13515
  }                                                                                                                    // 13516
}                                                                                                                      // 13517
                                                                                                                       // 13518
module.exports = cx;                                                                                                   // 13519
                                                                                                                       // 13520
},{}],93:[function(require,module,exports){                                                                            // 13521
/**                                                                                                                    // 13522
 * Copyright 2013 Facebook, Inc.                                                                                       // 13523
 *                                                                                                                     // 13524
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 13525
 * you may not use this file except in compliance with the License.                                                    // 13526
 * You may obtain a copy of the License at                                                                             // 13527
 *                                                                                                                     // 13528
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 13529
 *                                                                                                                     // 13530
 * Unless required by applicable law or agreed to in writing, software                                                 // 13531
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 13532
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 13533
 * See the License for the specific language governing permissions and                                                 // 13534
 * limitations under the License.                                                                                      // 13535
 *                                                                                                                     // 13536
 * @providesModule dangerousStyleValue                                                                                 // 13537
 * @typechecks static-only                                                                                             // 13538
 */                                                                                                                    // 13539
                                                                                                                       // 13540
"use strict";                                                                                                          // 13541
                                                                                                                       // 13542
var CSSProperty = require("./CSSProperty");                                                                            // 13543
                                                                                                                       // 13544
/**                                                                                                                    // 13545
 * Convert a value into the proper css writable value. The `styleName` name                                            // 13546
 * name should be logical (no hyphens), as specified                                                                   // 13547
 * in `CSSProperty.isUnitlessNumber`.                                                                                  // 13548
 *                                                                                                                     // 13549
 * @param {string} styleName CSS property name such as `topMargin`.                                                    // 13550
 * @param {*} value CSS property value such as `10px`.                                                                 // 13551
 * @return {string} Normalized style value with dimensions applied.                                                    // 13552
 */                                                                                                                    // 13553
function dangerousStyleValue(styleName, value) {                                                                       // 13554
  // Note that we've removed escapeTextForBrowser() calls here since the                                               // 13555
  // whole string will be escaped when the attribute is injected into                                                  // 13556
  // the markup. If you provide unsafe user data here they can inject                                                  // 13557
  // arbitrary CSS which may be problematic (I couldn't repro this):                                                   // 13558
  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet                                                    // 13559
  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/                                                // 13560
  // This is not an XSS hole but instead a potential CSS injection issue                                               // 13561
  // which has lead to a greater discussion about how we're going to                                                   // 13562
  // trust URLs moving forward. See #2115901                                                                           // 13563
                                                                                                                       // 13564
  var isEmpty = value == null || typeof value === 'boolean' || value === '';                                           // 13565
  if (isEmpty) {                                                                                                       // 13566
    return '';                                                                                                         // 13567
  }                                                                                                                    // 13568
                                                                                                                       // 13569
  var isNonNumeric = isNaN(value);                                                                                     // 13570
  if (isNonNumeric || value === 0 || CSSProperty.isUnitlessNumber[styleName]) {                                        // 13571
    return '' + value; // cast to string                                                                               // 13572
  }                                                                                                                    // 13573
                                                                                                                       // 13574
  return value + 'px';                                                                                                 // 13575
}                                                                                                                      // 13576
                                                                                                                       // 13577
module.exports = dangerousStyleValue;                                                                                  // 13578
                                                                                                                       // 13579
},{"./CSSProperty":3}],94:[function(require,module,exports){                                                           // 13580
/**                                                                                                                    // 13581
 * Copyright 2013 Facebook, Inc.                                                                                       // 13582
 *                                                                                                                     // 13583
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 13584
 * you may not use this file except in compliance with the License.                                                    // 13585
 * You may obtain a copy of the License at                                                                             // 13586
 *                                                                                                                     // 13587
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 13588
 *                                                                                                                     // 13589
 * Unless required by applicable law or agreed to in writing, software                                                 // 13590
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 13591
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 13592
 * See the License for the specific language governing permissions and                                                 // 13593
 * limitations under the License.                                                                                      // 13594
 *                                                                                                                     // 13595
 * @providesModule emptyFunction                                                                                       // 13596
 */                                                                                                                    // 13597
                                                                                                                       // 13598
var copyProperties = require("./copyProperties");                                                                      // 13599
                                                                                                                       // 13600
function makeEmptyFunction(arg) {                                                                                      // 13601
  return function() {                                                                                                  // 13602
    return arg;                                                                                                        // 13603
  };                                                                                                                   // 13604
}                                                                                                                      // 13605
                                                                                                                       // 13606
/**                                                                                                                    // 13607
 * This function accepts and discards inputs; it has no side effects. This is                                          // 13608
 * primarily useful idiomatically for overridable function endpoints which                                             // 13609
 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.                                             // 13610
 */                                                                                                                    // 13611
function emptyFunction() {}                                                                                            // 13612
                                                                                                                       // 13613
copyProperties(emptyFunction, {                                                                                        // 13614
  thatReturns: makeEmptyFunction,                                                                                      // 13615
  thatReturnsFalse: makeEmptyFunction(false),                                                                          // 13616
  thatReturnsTrue: makeEmptyFunction(true),                                                                            // 13617
  thatReturnsNull: makeEmptyFunction(null),                                                                            // 13618
  thatReturnsThis: function() { return this; },                                                                        // 13619
  thatReturnsArgument: function(arg) { return arg; }                                                                   // 13620
});                                                                                                                    // 13621
                                                                                                                       // 13622
module.exports = emptyFunction;                                                                                        // 13623
                                                                                                                       // 13624
},{"./copyProperties":88}],95:[function(require,module,exports){                                                       // 13625
/**                                                                                                                    // 13626
 * Copyright 2013 Facebook, Inc.                                                                                       // 13627
 *                                                                                                                     // 13628
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 13629
 * you may not use this file except in compliance with the License.                                                    // 13630
 * You may obtain a copy of the License at                                                                             // 13631
 *                                                                                                                     // 13632
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 13633
 *                                                                                                                     // 13634
 * Unless required by applicable law or agreed to in writing, software                                                 // 13635
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 13636
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 13637
 * See the License for the specific language governing permissions and                                                 // 13638
 * limitations under the License.                                                                                      // 13639
 *                                                                                                                     // 13640
 * @providesModule escapeTextForBrowser                                                                                // 13641
 * @typechecks static-only                                                                                             // 13642
 */                                                                                                                    // 13643
                                                                                                                       // 13644
"use strict";                                                                                                          // 13645
                                                                                                                       // 13646
var ESCAPE_LOOKUP = {                                                                                                  // 13647
  "&": "&amp;",                                                                                                        // 13648
  ">": "&gt;",                                                                                                         // 13649
  "<": "&lt;",                                                                                                         // 13650
  "\"": "&quot;",                                                                                                      // 13651
  "'": "&#x27;",                                                                                                       // 13652
  "/": "&#x2f;"                                                                                                        // 13653
};                                                                                                                     // 13654
                                                                                                                       // 13655
var ESCAPE_REGEX = /[&><"'\/]/g;                                                                                       // 13656
                                                                                                                       // 13657
function escaper(match) {                                                                                              // 13658
  return ESCAPE_LOOKUP[match];                                                                                         // 13659
}                                                                                                                      // 13660
                                                                                                                       // 13661
/**                                                                                                                    // 13662
 * Escapes text to prevent scripting attacks.                                                                          // 13663
 *                                                                                                                     // 13664
 * @param {*} text Text value to escape.                                                                               // 13665
 * @return {string} An escaped string.                                                                                 // 13666
 */                                                                                                                    // 13667
function escapeTextForBrowser(text) {                                                                                  // 13668
  return ('' + text).replace(ESCAPE_REGEX, escaper);                                                                   // 13669
}                                                                                                                      // 13670
                                                                                                                       // 13671
module.exports = escapeTextForBrowser;                                                                                 // 13672
                                                                                                                       // 13673
},{}],96:[function(require,module,exports){                                                                            // 13674
/**                                                                                                                    // 13675
 * Copyright 2013 Facebook, Inc.                                                                                       // 13676
 *                                                                                                                     // 13677
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 13678
 * you may not use this file except in compliance with the License.                                                    // 13679
 * You may obtain a copy of the License at                                                                             // 13680
 *                                                                                                                     // 13681
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 13682
 *                                                                                                                     // 13683
 * Unless required by applicable law or agreed to in writing, software                                                 // 13684
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 13685
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 13686
 * See the License for the specific language governing permissions and                                                 // 13687
 * limitations under the License.                                                                                      // 13688
 *                                                                                                                     // 13689
 * @providesModule ex                                                                                                  // 13690
 * @typechecks                                                                                                         // 13691
 * @nostacktrace                                                                                                       // 13692
 */                                                                                                                    // 13693
                                                                                                                       // 13694
/**                                                                                                                    // 13695
 * This function transforms error message with arguments into plain text error                                         // 13696
 * message, so that it can be passed to window.onerror without losing anything.                                        // 13697
 * It can then be transformed back by `erx()` function.                                                                // 13698
 *                                                                                                                     // 13699
 * Usage:                                                                                                              // 13700
 *   throw new Error(ex('Error %s from %s', errorCode, userID));                                                       // 13701
 *                                                                                                                     // 13702
 * @param {string} errorMessage                                                                                        // 13703
 */                                                                                                                    // 13704
                                                                                                                       // 13705
var ex = function(errorMessage/*, arg1, arg2, ...*/) {                                                                 // 13706
  var args = Array.prototype.slice.call(arguments).map(function(arg) {                                                 // 13707
    return String(arg);                                                                                                // 13708
  });                                                                                                                  // 13709
  var expectedLength = errorMessage.split('%s').length - 1;                                                            // 13710
                                                                                                                       // 13711
  if (expectedLength !== args.length - 1) {                                                                            // 13712
    // something wrong with the formatting string                                                                      // 13713
    return ex('ex args number mismatch: %s', JSON.stringify(args));                                                    // 13714
  }                                                                                                                    // 13715
                                                                                                                       // 13716
  return ex._prefix + JSON.stringify(args) + ex._suffix;                                                               // 13717
};                                                                                                                     // 13718
                                                                                                                       // 13719
ex._prefix = '<![EX[';                                                                                                 // 13720
ex._suffix = ']]>';                                                                                                    // 13721
                                                                                                                       // 13722
module.exports = ex;                                                                                                   // 13723
                                                                                                                       // 13724
},{}],97:[function(require,module,exports){                                                                            // 13725
/**                                                                                                                    // 13726
 * Copyright 2013 Facebook, Inc.                                                                                       // 13727
 *                                                                                                                     // 13728
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 13729
 * you may not use this file except in compliance with the License.                                                    // 13730
 * You may obtain a copy of the License at                                                                             // 13731
 *                                                                                                                     // 13732
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 13733
 *                                                                                                                     // 13734
 * Unless required by applicable law or agreed to in writing, software                                                 // 13735
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 13736
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 13737
 * See the License for the specific language governing permissions and                                                 // 13738
 * limitations under the License.                                                                                      // 13739
 *                                                                                                                     // 13740
 * @providesModule filterAttributes                                                                                    // 13741
 * @typechecks static-only                                                                                             // 13742
 */                                                                                                                    // 13743
                                                                                                                       // 13744
/*jslint evil: true */                                                                                                 // 13745
                                                                                                                       // 13746
'use strict';                                                                                                          // 13747
                                                                                                                       // 13748
/**                                                                                                                    // 13749
 * Like filter(), but for a DOM nodes attributes. Returns an array of                                                  // 13750
 * the filter DOMAttribute objects. Does some perf related this like                                                   // 13751
 * caching attributes.length.                                                                                          // 13752
 *                                                                                                                     // 13753
 * @param {DOMElement} node Node whose attributes you want to filter                                                   // 13754
 * @return {array} array of DOM attribute objects.                                                                     // 13755
 */                                                                                                                    // 13756
function filterAttributes(node, func, context) {                                                                       // 13757
  var attributes = node.attributes;                                                                                    // 13758
  var numAttributes = attributes.length;                                                                               // 13759
  var accumulator = [];                                                                                                // 13760
  for (var i = 0; i < numAttributes; i++) {                                                                            // 13761
    var attr = attributes.item(i);                                                                                     // 13762
    if (func.call(context, attr)) {                                                                                    // 13763
      accumulator.push(attr);                                                                                          // 13764
    }                                                                                                                  // 13765
  }                                                                                                                    // 13766
  return accumulator;                                                                                                  // 13767
}                                                                                                                      // 13768
                                                                                                                       // 13769
module.exports = filterAttributes;                                                                                     // 13770
                                                                                                                       // 13771
},{}],98:[function(require,module,exports){                                                                            // 13772
/**                                                                                                                    // 13773
 * Copyright 2013 Facebook, Inc.                                                                                       // 13774
 *                                                                                                                     // 13775
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 13776
 * you may not use this file except in compliance with the License.                                                    // 13777
 * You may obtain a copy of the License at                                                                             // 13778
 *                                                                                                                     // 13779
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 13780
 *                                                                                                                     // 13781
 * Unless required by applicable law or agreed to in writing, software                                                 // 13782
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 13783
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 13784
 * See the License for the specific language governing permissions and                                                 // 13785
 * limitations under the License.                                                                                      // 13786
 *                                                                                                                     // 13787
 * @providesModule flattenChildren                                                                                     // 13788
 */                                                                                                                    // 13789
                                                                                                                       // 13790
"use strict";                                                                                                          // 13791
                                                                                                                       // 13792
var invariant = require("./invariant");                                                                                // 13793
var traverseAllChildren = require("./traverseAllChildren");                                                            // 13794
                                                                                                                       // 13795
/**                                                                                                                    // 13796
 * @param {function} traverseContext Context passed through traversal.                                                 // 13797
 * @param {?ReactComponent} child React child component.                                                               // 13798
 * @param {!string} name String name of key path to child.                                                             // 13799
 */                                                                                                                    // 13800
function flattenSingleChildIntoContext(traverseContext, child, name) {                                                 // 13801
  // We found a component instance.                                                                                    // 13802
  var result = traverseContext;                                                                                        // 13803
  ("production" !== "development" ? invariant(                                                                         // 13804
    !result.hasOwnProperty(name),                                                                                      // 13805
    'flattenChildren(...): Encountered two children with the same key, `%s`. ' +                                       // 13806
    'Children keys must be unique.',                                                                                   // 13807
    name                                                                                                               // 13808
  ) : invariant(!result.hasOwnProperty(name)));                                                                        // 13809
  result[name] = child;                                                                                                // 13810
}                                                                                                                      // 13811
                                                                                                                       // 13812
/**                                                                                                                    // 13813
 * Flattens children that are typically specified as `props.children`.                                                 // 13814
 * @return {!object} flattened children keyed by name.                                                                 // 13815
 */                                                                                                                    // 13816
function flattenChildren(children) {                                                                                   // 13817
  if (children == null) {                                                                                              // 13818
    return children;                                                                                                   // 13819
  }                                                                                                                    // 13820
  var result = {};                                                                                                     // 13821
  traverseAllChildren(children, flattenSingleChildIntoContext, result);                                                // 13822
  return result;                                                                                                       // 13823
}                                                                                                                      // 13824
                                                                                                                       // 13825
module.exports = flattenChildren;                                                                                      // 13826
                                                                                                                       // 13827
},{"./invariant":109,"./traverseAllChildren":127}],99:[function(require,module,exports){                               // 13828
/**                                                                                                                    // 13829
 * Copyright 2013 Facebook, Inc.                                                                                       // 13830
 *                                                                                                                     // 13831
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 13832
 * you may not use this file except in compliance with the License.                                                    // 13833
 * You may obtain a copy of the License at                                                                             // 13834
 *                                                                                                                     // 13835
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 13836
 *                                                                                                                     // 13837
 * Unless required by applicable law or agreed to in writing, software                                                 // 13838
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 13839
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 13840
 * See the License for the specific language governing permissions and                                                 // 13841
 * limitations under the License.                                                                                      // 13842
 *                                                                                                                     // 13843
 * @providesModule forEachAccumulated                                                                                  // 13844
 */                                                                                                                    // 13845
                                                                                                                       // 13846
"use strict";                                                                                                          // 13847
                                                                                                                       // 13848
/**                                                                                                                    // 13849
 * @param {array} an "accumulation" of items which is either an Array or                                               // 13850
 * a single item. Useful when paired with the `accumulate` module. This is a                                           // 13851
 * simple utility that allows us to reason about a collection of items, but                                            // 13852
 * handling the case when there is exactly one item (and we do not need to                                             // 13853
 * allocate an array).                                                                                                 // 13854
 */                                                                                                                    // 13855
var forEachAccumulated = function(arr, cb, scope) {                                                                    // 13856
  if (Array.isArray(arr)) {                                                                                            // 13857
    arr.forEach(cb, scope);                                                                                            // 13858
  } else if (arr) {                                                                                                    // 13859
    cb.call(scope, arr);                                                                                               // 13860
  }                                                                                                                    // 13861
};                                                                                                                     // 13862
                                                                                                                       // 13863
module.exports = forEachAccumulated;                                                                                   // 13864
                                                                                                                       // 13865
},{}],100:[function(require,module,exports){                                                                           // 13866
/**                                                                                                                    // 13867
 * Copyright 2013 Facebook, Inc.                                                                                       // 13868
 *                                                                                                                     // 13869
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 13870
 * you may not use this file except in compliance with the License.                                                    // 13871
 * You may obtain a copy of the License at                                                                             // 13872
 *                                                                                                                     // 13873
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 13874
 *                                                                                                                     // 13875
 * Unless required by applicable law or agreed to in writing, software                                                 // 13876
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 13877
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 13878
 * See the License for the specific language governing permissions and                                                 // 13879
 * limitations under the License.                                                                                      // 13880
 *                                                                                                                     // 13881
 * @providesModule ge                                                                                                  // 13882
 */                                                                                                                    // 13883
                                                                                                                       // 13884
/**                                                                                                                    // 13885
 * Find a node by ID.  Optionally search a sub-tree outside of the document                                            // 13886
 *                                                                                                                     // 13887
 * Use ge if you're not sure whether or not the element exists. You can test                                           // 13888
 * for existence yourself in your application code.                                                                    // 13889
 *                                                                                                                     // 13890
 * If your application code depends on the existence of the element, use $                                             // 13891
 * instead, which will throw in DEV if the element doesn't exist.                                                      // 13892
 */                                                                                                                    // 13893
function ge(arg, root, tag) {                                                                                          // 13894
  return typeof arg != 'string' ? arg :                                                                                // 13895
    !root ? document.getElementById(arg) :                                                                             // 13896
    _geFromSubtree(arg, root, tag);                                                                                    // 13897
}                                                                                                                      // 13898
                                                                                                                       // 13899
function _geFromSubtree(id, root, tag) {                                                                               // 13900
  var elem, children, ii;                                                                                              // 13901
                                                                                                                       // 13902
  if (_getNodeID(root) == id) {                                                                                        // 13903
    return root;                                                                                                       // 13904
  } else if (root.getElementsByTagName) {                                                                              // 13905
    // All Elements implement this, which does an iterative DFS, which is                                              // 13906
    // faster than recursion and doesn't run into stack depth issues.                                                  // 13907
    children = root.getElementsByTagName(tag || '*');                                                                  // 13908
    for (ii = 0; ii < children.length; ii++) {                                                                         // 13909
      if (_getNodeID(children[ii]) == id) {                                                                            // 13910
        return children[ii];                                                                                           // 13911
      }                                                                                                                // 13912
    }                                                                                                                  // 13913
  } else {                                                                                                             // 13914
    // DocumentFragment does not implement getElementsByTagName, so                                                    // 13915
    // recurse over its children. Its children must be Elements, so                                                    // 13916
    // each child will use the getElementsByTagName case instead.                                                      // 13917
    children = root.childNodes;                                                                                        // 13918
    for (ii = 0; ii < children.length; ii++) {                                                                         // 13919
      elem = _geFromSubtree(id, children[ii]);                                                                         // 13920
      if (elem) {                                                                                                      // 13921
        return elem;                                                                                                   // 13922
      }                                                                                                                // 13923
    }                                                                                                                  // 13924
  }                                                                                                                    // 13925
                                                                                                                       // 13926
  return null;                                                                                                         // 13927
}                                                                                                                      // 13928
                                                                                                                       // 13929
/**                                                                                                                    // 13930
 * Return the ID value for a given node. This allows us to avoid issues                                                // 13931
 * with forms that contain inputs with name="id".                                                                      // 13932
 *                                                                                                                     // 13933
 * @return string (null if attribute not set)                                                                          // 13934
 */                                                                                                                    // 13935
function _getNodeID(node) {                                                                                            // 13936
  // #document and #document-fragment do not have getAttributeNode.                                                    // 13937
  var id = node.getAttributeNode && node.getAttributeNode('id');                                                       // 13938
  return id ? id.value : null;                                                                                         // 13939
}                                                                                                                      // 13940
                                                                                                                       // 13941
module.exports = ge;                                                                                                   // 13942
                                                                                                                       // 13943
},{}],101:[function(require,module,exports){                                                                           // 13944
/**                                                                                                                    // 13945
 * Copyright 2013 Facebook, Inc.                                                                                       // 13946
 *                                                                                                                     // 13947
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 13948
 * you may not use this file except in compliance with the License.                                                    // 13949
 * You may obtain a copy of the License at                                                                             // 13950
 *                                                                                                                     // 13951
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 13952
 *                                                                                                                     // 13953
 * Unless required by applicable law or agreed to in writing, software                                                 // 13954
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 13955
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 13956
 * See the License for the specific language governing permissions and                                                 // 13957
 * limitations under the License.                                                                                      // 13958
 *                                                                                                                     // 13959
 * @providesModule getActiveElement                                                                                    // 13960
 * @typechecks                                                                                                         // 13961
 */                                                                                                                    // 13962
                                                                                                                       // 13963
/**                                                                                                                    // 13964
 * Same as document.activeElement but wraps in a try-catch block. In IE it is                                          // 13965
 * not safe to call document.activeElement if there is nothing focused.                                                // 13966
 */                                                                                                                    // 13967
function getActiveElement() /*?DOMElement*/ {                                                                          // 13968
  try {                                                                                                                // 13969
    return document.activeElement;                                                                                     // 13970
  } catch (e) {                                                                                                        // 13971
    return null;                                                                                                       // 13972
  }                                                                                                                    // 13973
}                                                                                                                      // 13974
                                                                                                                       // 13975
module.exports = getActiveElement;                                                                                     // 13976
                                                                                                                       // 13977
                                                                                                                       // 13978
},{}],102:[function(require,module,exports){                                                                           // 13979
/**                                                                                                                    // 13980
 * Copyright 2013 Facebook, Inc.                                                                                       // 13981
 *                                                                                                                     // 13982
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 13983
 * you may not use this file except in compliance with the License.                                                    // 13984
 * You may obtain a copy of the License at                                                                             // 13985
 *                                                                                                                     // 13986
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 13987
 *                                                                                                                     // 13988
 * Unless required by applicable law or agreed to in writing, software                                                 // 13989
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 13990
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 13991
 * See the License for the specific language governing permissions and                                                 // 13992
 * limitations under the License.                                                                                      // 13993
 *                                                                                                                     // 13994
 * @providesModule getEventTarget                                                                                      // 13995
 * @typechecks static-only                                                                                             // 13996
 */                                                                                                                    // 13997
                                                                                                                       // 13998
"use strict";                                                                                                          // 13999
                                                                                                                       // 14000
/**                                                                                                                    // 14001
 * Gets the target node from a native browser event by accounting for                                                  // 14002
 * inconsistencies in browser DOM APIs.                                                                                // 14003
 *                                                                                                                     // 14004
 * @param {object} nativeEvent Native browser event.                                                                   // 14005
 * @return {DOMEventTarget} Target node.                                                                               // 14006
 */                                                                                                                    // 14007
function getEventTarget(nativeEvent) {                                                                                 // 14008
  var target = nativeEvent.target || nativeEvent.srcElement || window;                                                 // 14009
  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).                                                       // 14010
  // @see http://www.quirksmode.org/js/events_properties.html                                                          // 14011
  return target.nodeType === 3 ? target.parentNode : target;                                                           // 14012
}                                                                                                                      // 14013
                                                                                                                       // 14014
module.exports = getEventTarget;                                                                                       // 14015
                                                                                                                       // 14016
},{}],103:[function(require,module,exports){                                                                           // 14017
/**                                                                                                                    // 14018
 * Copyright 2013 Facebook, Inc.                                                                                       // 14019
 *                                                                                                                     // 14020
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 14021
 * you may not use this file except in compliance with the License.                                                    // 14022
 * You may obtain a copy of the License at                                                                             // 14023
 *                                                                                                                     // 14024
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 14025
 *                                                                                                                     // 14026
 * Unless required by applicable law or agreed to in writing, software                                                 // 14027
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 14028
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 14029
 * See the License for the specific language governing permissions and                                                 // 14030
 * limitations under the License.                                                                                      // 14031
 *                                                                                                                     // 14032
 * @providesModule getMarkupWrap                                                                                       // 14033
 */                                                                                                                    // 14034
                                                                                                                       // 14035
var ExecutionEnvironment = require("./ExecutionEnvironment");                                                          // 14036
                                                                                                                       // 14037
var invariant = require("./invariant");                                                                                // 14038
                                                                                                                       // 14039
/**                                                                                                                    // 14040
 * Dummy container used to detect which wraps are necessary.                                                           // 14041
 */                                                                                                                    // 14042
var dummyNode =                                                                                                        // 14043
  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;                                               // 14044
                                                                                                                       // 14045
/**                                                                                                                    // 14046
 * Some browsers cannot use `innerHTML` to render certain elements standalone,                                         // 14047
 * so we wrap them, render the wrapped nodes, then extract the desired node.                                           // 14048
 *                                                                                                                     // 14049
 * In IE8, certain elements cannot render alone, so wrap all elements ('*').                                           // 14050
 */                                                                                                                    // 14051
var shouldWrap = {                                                                                                     // 14052
  // Force wrapping for SVG elements because if they get created inside a <div>,                                       // 14053
  // they will be initialized in the wrong namespace (and will not display).                                           // 14054
  'circle': true,                                                                                                      // 14055
  'g': true,                                                                                                           // 14056
  'line': true,                                                                                                        // 14057
  'path': true,                                                                                                        // 14058
  'polyline': true,                                                                                                    // 14059
  'rect': true,                                                                                                        // 14060
  'text': true                                                                                                         // 14061
};                                                                                                                     // 14062
                                                                                                                       // 14063
var selectWrap = [1, '<select multiple="true">', '</select>'];                                                         // 14064
var tableWrap = [1, '<table>', '</table>'];                                                                            // 14065
var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];                                                       // 14066
                                                                                                                       // 14067
var svgWrap = [1, '<svg>', '</svg>'];                                                                                  // 14068
                                                                                                                       // 14069
var markupWrap = {                                                                                                     // 14070
  '*': [1, '?<div>', '</div>'],                                                                                        // 14071
                                                                                                                       // 14072
  'area': [1, '<map>', '</map>'],                                                                                      // 14073
  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],                                               // 14074
  'legend': [1, '<fieldset>', '</fieldset>'],                                                                          // 14075
  'param': [1, '<object>', '</object>'],                                                                               // 14076
  'tr': [2, '<table><tbody>', '</tbody></table>'],                                                                     // 14077
                                                                                                                       // 14078
  'optgroup': selectWrap,                                                                                              // 14079
  'option': selectWrap,                                                                                                // 14080
                                                                                                                       // 14081
  'caption': tableWrap,                                                                                                // 14082
  'colgroup': tableWrap,                                                                                               // 14083
  'tbody': tableWrap,                                                                                                  // 14084
  'tfoot': tableWrap,                                                                                                  // 14085
  'thead': tableWrap,                                                                                                  // 14086
                                                                                                                       // 14087
  'td': trWrap,                                                                                                        // 14088
  'th': trWrap,                                                                                                        // 14089
                                                                                                                       // 14090
  'circle': svgWrap,                                                                                                   // 14091
  'g': svgWrap,                                                                                                        // 14092
  'line': svgWrap,                                                                                                     // 14093
  'path': svgWrap,                                                                                                     // 14094
  'polyline': svgWrap,                                                                                                 // 14095
  'rect': svgWrap,                                                                                                     // 14096
  'text': svgWrap                                                                                                      // 14097
};                                                                                                                     // 14098
                                                                                                                       // 14099
/**                                                                                                                    // 14100
 * Gets the markup wrap configuration for the supplied `nodeName`.                                                     // 14101
 *                                                                                                                     // 14102
 * NOTE: This lazily detects which wraps are necessary for the current browser.                                        // 14103
 *                                                                                                                     // 14104
 * @param {string} nodeName Lowercase `nodeName`.                                                                      // 14105
 * @return {?array} Markup wrap configuration, if applicable.                                                          // 14106
 */                                                                                                                    // 14107
function getMarkupWrap(nodeName) {                                                                                     // 14108
  ("production" !== "development" ? invariant(!!dummyNode, 'Markup wrapping node not initialized') : invariant(!!dummyNode));
  if (!markupWrap.hasOwnProperty(nodeName)) {                                                                          // 14110
    nodeName = '*';                                                                                                    // 14111
  }                                                                                                                    // 14112
  if (!shouldWrap.hasOwnProperty(nodeName)) {                                                                          // 14113
    if (nodeName === '*') {                                                                                            // 14114
      dummyNode.innerHTML = '<link />';                                                                                // 14115
    } else {                                                                                                           // 14116
      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';                                                   // 14117
    }                                                                                                                  // 14118
    shouldWrap[nodeName] = !dummyNode.firstChild;                                                                      // 14119
  }                                                                                                                    // 14120
  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;                                                           // 14121
}                                                                                                                      // 14122
                                                                                                                       // 14123
                                                                                                                       // 14124
module.exports = getMarkupWrap;                                                                                        // 14125
                                                                                                                       // 14126
},{"./ExecutionEnvironment":21,"./invariant":109}],104:[function(require,module,exports){                              // 14127
/**                                                                                                                    // 14128
 * Copyright 2013 Facebook, Inc.                                                                                       // 14129
 *                                                                                                                     // 14130
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 14131
 * you may not use this file except in compliance with the License.                                                    // 14132
 * You may obtain a copy of the License at                                                                             // 14133
 *                                                                                                                     // 14134
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 14135
 *                                                                                                                     // 14136
 * Unless required by applicable law or agreed to in writing, software                                                 // 14137
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 14138
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 14139
 * See the License for the specific language governing permissions and                                                 // 14140
 * limitations under the License.                                                                                      // 14141
 *                                                                                                                     // 14142
 * @providesModule getNodeForCharacterOffset                                                                           // 14143
 */                                                                                                                    // 14144
                                                                                                                       // 14145
"use strict";                                                                                                          // 14146
                                                                                                                       // 14147
/**                                                                                                                    // 14148
 * Given any node return the first leaf node without children.                                                         // 14149
 *                                                                                                                     // 14150
 * @param {DOMElement|DOMTextNode} node                                                                                // 14151
 * @return {DOMElement|DOMTextNode}                                                                                    // 14152
 */                                                                                                                    // 14153
function getLeafNode(node) {                                                                                           // 14154
  while (node && node.firstChild) {                                                                                    // 14155
    node = node.firstChild;                                                                                            // 14156
  }                                                                                                                    // 14157
  return node;                                                                                                         // 14158
}                                                                                                                      // 14159
                                                                                                                       // 14160
/**                                                                                                                    // 14161
 * Get the next sibling within a container. This will walk up the                                                      // 14162
 * DOM if a node's siblings have been exhausted.                                                                       // 14163
 *                                                                                                                     // 14164
 * @param {DOMElement|DOMTextNode} node                                                                                // 14165
 * @return {?DOMElement|DOMTextNode}                                                                                   // 14166
 */                                                                                                                    // 14167
function getSiblingNode(node) {                                                                                        // 14168
  while (node) {                                                                                                       // 14169
    if (node.nextSibling) {                                                                                            // 14170
      return node.nextSibling;                                                                                         // 14171
    }                                                                                                                  // 14172
    node = node.parentNode;                                                                                            // 14173
  }                                                                                                                    // 14174
}                                                                                                                      // 14175
                                                                                                                       // 14176
/**                                                                                                                    // 14177
 * Get object describing the nodes which contain characters at offset.                                                 // 14178
 *                                                                                                                     // 14179
 * @param {DOMElement|DOMTextNode} root                                                                                // 14180
 * @param {number} offset                                                                                              // 14181
 * @return {?object}                                                                                                   // 14182
 */                                                                                                                    // 14183
function getNodeForCharacterOffset(root, offset) {                                                                     // 14184
  var node = getLeafNode(root);                                                                                        // 14185
  var nodeStart = 0;                                                                                                   // 14186
  var nodeEnd = 0;                                                                                                     // 14187
                                                                                                                       // 14188
  while (node) {                                                                                                       // 14189
    if (node.nodeType == 3) {                                                                                          // 14190
      nodeEnd = nodeStart + node.textContent.length;                                                                   // 14191
                                                                                                                       // 14192
      if (nodeStart <= offset && nodeEnd >= offset) {                                                                  // 14193
        return {                                                                                                       // 14194
          node: node,                                                                                                  // 14195
          offset: offset - nodeStart                                                                                   // 14196
        };                                                                                                             // 14197
      }                                                                                                                // 14198
                                                                                                                       // 14199
      nodeStart = nodeEnd;                                                                                             // 14200
    }                                                                                                                  // 14201
                                                                                                                       // 14202
    node = getLeafNode(getSiblingNode(node));                                                                          // 14203
  }                                                                                                                    // 14204
}                                                                                                                      // 14205
                                                                                                                       // 14206
module.exports = getNodeForCharacterOffset;                                                                            // 14207
                                                                                                                       // 14208
},{}],105:[function(require,module,exports){                                                                           // 14209
/**                                                                                                                    // 14210
 * Copyright 2013 Facebook, Inc.                                                                                       // 14211
 *                                                                                                                     // 14212
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 14213
 * you may not use this file except in compliance with the License.                                                    // 14214
 * You may obtain a copy of the License at                                                                             // 14215
 *                                                                                                                     // 14216
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 14217
 *                                                                                                                     // 14218
 * Unless required by applicable law or agreed to in writing, software                                                 // 14219
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 14220
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 14221
 * See the License for the specific language governing permissions and                                                 // 14222
 * limitations under the License.                                                                                      // 14223
 *                                                                                                                     // 14224
 * @providesModule getReactRootElementInContainer                                                                      // 14225
 */                                                                                                                    // 14226
                                                                                                                       // 14227
"use strict";                                                                                                          // 14228
                                                                                                                       // 14229
var DOC_NODE_TYPE = 9;                                                                                                 // 14230
                                                                                                                       // 14231
/**                                                                                                                    // 14232
 * @param {DOMElement|DOMDocument} container DOM element that may contain                                              // 14233
 *                                           a React component                                                         // 14234
 * @return {?*} DOM element that may have the reactRoot ID, or null.                                                   // 14235
 */                                                                                                                    // 14236
function getReactRootElementInContainer(container) {                                                                   // 14237
  if (!container) {                                                                                                    // 14238
    return null;                                                                                                       // 14239
  }                                                                                                                    // 14240
                                                                                                                       // 14241
  if (container.nodeType === DOC_NODE_TYPE) {                                                                          // 14242
    return container.documentElement;                                                                                  // 14243
  } else {                                                                                                             // 14244
    return container.firstChild;                                                                                       // 14245
  }                                                                                                                    // 14246
}                                                                                                                      // 14247
                                                                                                                       // 14248
module.exports = getReactRootElementInContainer;                                                                       // 14249
                                                                                                                       // 14250
},{}],106:[function(require,module,exports){                                                                           // 14251
/**                                                                                                                    // 14252
 * Copyright 2013 Facebook, Inc.                                                                                       // 14253
 *                                                                                                                     // 14254
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 14255
 * you may not use this file except in compliance with the License.                                                    // 14256
 * You may obtain a copy of the License at                                                                             // 14257
 *                                                                                                                     // 14258
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 14259
 *                                                                                                                     // 14260
 * Unless required by applicable law or agreed to in writing, software                                                 // 14261
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 14262
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 14263
 * See the License for the specific language governing permissions and                                                 // 14264
 * limitations under the License.                                                                                      // 14265
 *                                                                                                                     // 14266
 * @providesModule getTextContentAccessor                                                                              // 14267
 */                                                                                                                    // 14268
                                                                                                                       // 14269
"use strict";                                                                                                          // 14270
                                                                                                                       // 14271
var ExecutionEnvironment = require("./ExecutionEnvironment");                                                          // 14272
                                                                                                                       // 14273
var contentKey = null;                                                                                                 // 14274
                                                                                                                       // 14275
/**                                                                                                                    // 14276
 * Gets the key used to access text content on a DOM node.                                                             // 14277
 *                                                                                                                     // 14278
 * @return {?string} Key used to access text content.                                                                  // 14279
 * @internal                                                                                                           // 14280
 */                                                                                                                    // 14281
function getTextContentAccessor() {                                                                                    // 14282
  if (!contentKey && ExecutionEnvironment.canUseDOM) {                                                                 // 14283
    contentKey = 'innerText' in document.createElement('div') ?                                                        // 14284
      'innerText' :                                                                                                    // 14285
      'textContent';                                                                                                   // 14286
  }                                                                                                                    // 14287
  return contentKey;                                                                                                   // 14288
}                                                                                                                      // 14289
                                                                                                                       // 14290
module.exports = getTextContentAccessor;                                                                               // 14291
                                                                                                                       // 14292
},{"./ExecutionEnvironment":21}],107:[function(require,module,exports){                                                // 14293
/**                                                                                                                    // 14294
 * Copyright 2013 Facebook, Inc.                                                                                       // 14295
 *                                                                                                                     // 14296
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 14297
 * you may not use this file except in compliance with the License.                                                    // 14298
 * You may obtain a copy of the License at                                                                             // 14299
 *                                                                                                                     // 14300
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 14301
 *                                                                                                                     // 14302
 * Unless required by applicable law or agreed to in writing, software                                                 // 14303
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 14304
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 14305
 * See the License for the specific language governing permissions and                                                 // 14306
 * limitations under the License.                                                                                      // 14307
 *                                                                                                                     // 14308
 * @providesModule getUnboundedScrollPosition                                                                          // 14309
 * @typechecks                                                                                                         // 14310
 */                                                                                                                    // 14311
                                                                                                                       // 14312
"use strict";                                                                                                          // 14313
                                                                                                                       // 14314
/**                                                                                                                    // 14315
 * Gets the scroll position of the supplied element or window.                                                         // 14316
 *                                                                                                                     // 14317
 * The return values are unbounded, unlike `getScrollPosition`. This means they                                        // 14318
 * may be negative or exceed the element boundaries (which is possible using                                           // 14319
 * inertial scrolling).                                                                                                // 14320
 *                                                                                                                     // 14321
 * @param {DOMWindow|DOMElement} scrollable                                                                            // 14322
 * @return {object} Map with `x` and `y` keys.                                                                         // 14323
 */                                                                                                                    // 14324
function getUnboundedScrollPosition(scrollable) {                                                                      // 14325
  if (scrollable === window) {                                                                                         // 14326
    return {                                                                                                           // 14327
      x: document.documentElement.scrollLeft || document.body.scrollLeft,                                              // 14328
      y: document.documentElement.scrollTop  || document.body.scrollTop                                                // 14329
    };                                                                                                                 // 14330
  }                                                                                                                    // 14331
  return {                                                                                                             // 14332
    x: scrollable.scrollLeft,                                                                                          // 14333
    y: scrollable.scrollTop                                                                                            // 14334
  };                                                                                                                   // 14335
}                                                                                                                      // 14336
                                                                                                                       // 14337
module.exports = getUnboundedScrollPosition;                                                                           // 14338
                                                                                                                       // 14339
},{}],108:[function(require,module,exports){                                                                           // 14340
/**                                                                                                                    // 14341
 * Copyright 2013 Facebook, Inc.                                                                                       // 14342
 *                                                                                                                     // 14343
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 14344
 * you may not use this file except in compliance with the License.                                                    // 14345
 * You may obtain a copy of the License at                                                                             // 14346
 *                                                                                                                     // 14347
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 14348
 *                                                                                                                     // 14349
 * Unless required by applicable law or agreed to in writing, software                                                 // 14350
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 14351
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 14352
 * See the License for the specific language governing permissions and                                                 // 14353
 * limitations under the License.                                                                                      // 14354
 *                                                                                                                     // 14355
 * @providesModule hyphenate                                                                                           // 14356
 * @typechecks                                                                                                         // 14357
 */                                                                                                                    // 14358
                                                                                                                       // 14359
var _uppercasePattern = /([A-Z])/g;                                                                                    // 14360
                                                                                                                       // 14361
/**                                                                                                                    // 14362
 * Hyphenates a camelcased string, for example:                                                                        // 14363
 *                                                                                                                     // 14364
 *   > hyphenate('backgroundColor')                                                                                    // 14365
 *   < "background-color"                                                                                              // 14366
 *                                                                                                                     // 14367
 * @param {string} string                                                                                              // 14368
 * @return {string}                                                                                                    // 14369
 */                                                                                                                    // 14370
function hyphenate(string) {                                                                                           // 14371
  return string.replace(_uppercasePattern, '-$1').toLowerCase();                                                       // 14372
}                                                                                                                      // 14373
                                                                                                                       // 14374
module.exports = hyphenate;                                                                                            // 14375
                                                                                                                       // 14376
},{}],109:[function(require,module,exports){                                                                           // 14377
/**                                                                                                                    // 14378
 * Copyright 2013 Facebook, Inc.                                                                                       // 14379
 *                                                                                                                     // 14380
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 14381
 * you may not use this file except in compliance with the License.                                                    // 14382
 * You may obtain a copy of the License at                                                                             // 14383
 *                                                                                                                     // 14384
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 14385
 *                                                                                                                     // 14386
 * Unless required by applicable law or agreed to in writing, software                                                 // 14387
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 14388
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 14389
 * See the License for the specific language governing permissions and                                                 // 14390
 * limitations under the License.                                                                                      // 14391
 *                                                                                                                     // 14392
 * @providesModule invariant                                                                                           // 14393
 */                                                                                                                    // 14394
                                                                                                                       // 14395
/**                                                                                                                    // 14396
 * Use invariant() to assert state which your program assumes to be true.                                              // 14397
 *                                                                                                                     // 14398
 * Provide sprintf style format and arguments to provide information about                                             // 14399
 * what broke and what you were expecting.                                                                             // 14400
 *                                                                                                                     // 14401
 * The invariant message will be stripped in production, but the invariant                                             // 14402
 * will remain to ensure logic does not differ in production.                                                          // 14403
 */                                                                                                                    // 14404
                                                                                                                       // 14405
function invariant(condition) {                                                                                        // 14406
  if (!condition) {                                                                                                    // 14407
    throw new Error('Invariant Violation');                                                                            // 14408
  }                                                                                                                    // 14409
}                                                                                                                      // 14410
                                                                                                                       // 14411
module.exports = invariant;                                                                                            // 14412
                                                                                                                       // 14413
if ("production" !== "development") {                                                                                  // 14414
  var invariantDev = function(condition, format, a, b, c, d, e, f) {                                                   // 14415
    if (format === undefined) {                                                                                        // 14416
      throw new Error('invariant requires an error message argument');                                                 // 14417
    }                                                                                                                  // 14418
                                                                                                                       // 14419
    if (!condition) {                                                                                                  // 14420
      var args = [a, b, c, d, e, f];                                                                                   // 14421
      var argIndex = 0;                                                                                                // 14422
      throw new Error(                                                                                                 // 14423
        'Invariant Violation: ' +                                                                                      // 14424
        format.replace(/%s/g, function() { return args[argIndex++]; })                                                 // 14425
      );                                                                                                               // 14426
    }                                                                                                                  // 14427
  };                                                                                                                   // 14428
                                                                                                                       // 14429
  module.exports = invariantDev;                                                                                       // 14430
}                                                                                                                      // 14431
                                                                                                                       // 14432
},{}],110:[function(require,module,exports){                                                                           // 14433
/**                                                                                                                    // 14434
 * Copyright 2013 Facebook, Inc.                                                                                       // 14435
 *                                                                                                                     // 14436
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 14437
 * you may not use this file except in compliance with the License.                                                    // 14438
 * You may obtain a copy of the License at                                                                             // 14439
 *                                                                                                                     // 14440
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 14441
 *                                                                                                                     // 14442
 * Unless required by applicable law or agreed to in writing, software                                                 // 14443
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 14444
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 14445
 * See the License for the specific language governing permissions and                                                 // 14446
 * limitations under the License.                                                                                      // 14447
 *                                                                                                                     // 14448
 * @providesModule isEventSupported                                                                                    // 14449
 */                                                                                                                    // 14450
                                                                                                                       // 14451
"use strict";                                                                                                          // 14452
                                                                                                                       // 14453
var ExecutionEnvironment = require("./ExecutionEnvironment");                                                          // 14454
                                                                                                                       // 14455
var testNode, useHasFeature;                                                                                           // 14456
if (ExecutionEnvironment.canUseDOM) {                                                                                  // 14457
  testNode = document.createElement('div');                                                                            // 14458
  useHasFeature =                                                                                                      // 14459
    document.implementation &&                                                                                         // 14460
    document.implementation.hasFeature &&                                                                              // 14461
    // `hasFeature` always returns true in Firefox 19+.                                                                // 14462
    document.implementation.hasFeature('', '') !== true;                                                               // 14463
}                                                                                                                      // 14464
                                                                                                                       // 14465
/**                                                                                                                    // 14466
 * Checks if an event is supported in the current execution environment.                                               // 14467
 *                                                                                                                     // 14468
 * NOTE: This will not work correctly for non-generic events such as `change`,                                         // 14469
 * `reset`, `load`, `error`, and `select`.                                                                             // 14470
 *                                                                                                                     // 14471
 * Borrows from Modernizr.                                                                                             // 14472
 *                                                                                                                     // 14473
 * @param {string} eventNameSuffix Event name, e.g. "click".                                                           // 14474
 * @param {?boolean} capture Check if the capture phase is supported.                                                  // 14475
 * @return {boolean} True if the event is supported.                                                                   // 14476
 * @internal                                                                                                           // 14477
 * @license Modernizr 3.0.0pre (Custom Build) | MIT                                                                    // 14478
 */                                                                                                                    // 14479
function isEventSupported(eventNameSuffix, capture) {                                                                  // 14480
  if (!testNode || (capture && !testNode.addEventListener)) {                                                          // 14481
    return false;                                                                                                      // 14482
  }                                                                                                                    // 14483
  var element = document.createElement('div');                                                                         // 14484
                                                                                                                       // 14485
  var eventName = 'on' + eventNameSuffix;                                                                              // 14486
  var isSupported = eventName in element;                                                                              // 14487
                                                                                                                       // 14488
  if (!isSupported) {                                                                                                  // 14489
    element.setAttribute(eventName, 'return;');                                                                        // 14490
    isSupported = typeof element[eventName] === 'function';                                                            // 14491
    if (typeof element[eventName] !== 'undefined') {                                                                   // 14492
      element[eventName] = undefined;                                                                                  // 14493
    }                                                                                                                  // 14494
    element.removeAttribute(eventName);                                                                                // 14495
  }                                                                                                                    // 14496
                                                                                                                       // 14497
  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {                                                  // 14498
    // This is the only way to test support for the `wheel` event in IE9+.                                             // 14499
    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');                                           // 14500
  }                                                                                                                    // 14501
                                                                                                                       // 14502
  element = null;                                                                                                      // 14503
  return isSupported;                                                                                                  // 14504
}                                                                                                                      // 14505
                                                                                                                       // 14506
module.exports = isEventSupported;                                                                                     // 14507
                                                                                                                       // 14508
},{"./ExecutionEnvironment":21}],111:[function(require,module,exports){                                                // 14509
/**                                                                                                                    // 14510
 * Copyright 2013 Facebook, Inc.                                                                                       // 14511
 *                                                                                                                     // 14512
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 14513
 * you may not use this file except in compliance with the License.                                                    // 14514
 * You may obtain a copy of the License at                                                                             // 14515
 *                                                                                                                     // 14516
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 14517
 *                                                                                                                     // 14518
 * Unless required by applicable law or agreed to in writing, software                                                 // 14519
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 14520
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 14521
 * See the License for the specific language governing permissions and                                                 // 14522
 * limitations under the License.                                                                                      // 14523
 *                                                                                                                     // 14524
 * @providesModule isNode                                                                                              // 14525
 * @typechecks                                                                                                         // 14526
 */                                                                                                                    // 14527
                                                                                                                       // 14528
/**                                                                                                                    // 14529
 * @param {*} object The object to check.                                                                              // 14530
 * @return {boolean} Whether or not the object is a DOM node.                                                          // 14531
 */                                                                                                                    // 14532
function isNode(object) {                                                                                              // 14533
  return !!(object && (                                                                                                // 14534
    typeof Node !== 'undefined' ? object instanceof Node :                                                             // 14535
      typeof object === 'object' &&                                                                                    // 14536
      typeof object.nodeType === 'number' &&                                                                           // 14537
      typeof object.nodeName === 'string'                                                                              // 14538
  ));                                                                                                                  // 14539
}                                                                                                                      // 14540
                                                                                                                       // 14541
module.exports = isNode;                                                                                               // 14542
                                                                                                                       // 14543
},{}],112:[function(require,module,exports){                                                                           // 14544
/**                                                                                                                    // 14545
 * Copyright 2013 Facebook, Inc.                                                                                       // 14546
 *                                                                                                                     // 14547
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 14548
 * you may not use this file except in compliance with the License.                                                    // 14549
 * You may obtain a copy of the License at                                                                             // 14550
 *                                                                                                                     // 14551
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 14552
 *                                                                                                                     // 14553
 * Unless required by applicable law or agreed to in writing, software                                                 // 14554
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 14555
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 14556
 * See the License for the specific language governing permissions and                                                 // 14557
 * limitations under the License.                                                                                      // 14558
 *                                                                                                                     // 14559
 * @providesModule isTextInputElement                                                                                  // 14560
 */                                                                                                                    // 14561
                                                                                                                       // 14562
"use strict";                                                                                                          // 14563
                                                                                                                       // 14564
/**                                                                                                                    // 14565
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary     // 14566
 */                                                                                                                    // 14567
var supportedInputTypes = {                                                                                            // 14568
  'color': true,                                                                                                       // 14569
  'date': true,                                                                                                        // 14570
  'datetime': true,                                                                                                    // 14571
  'datetime-local': true,                                                                                              // 14572
  'email': true,                                                                                                       // 14573
  'month': true,                                                                                                       // 14574
  'number': true,                                                                                                      // 14575
  'password': true,                                                                                                    // 14576
  'range': true,                                                                                                       // 14577
  'search': true,                                                                                                      // 14578
  'tel': true,                                                                                                         // 14579
  'text': true,                                                                                                        // 14580
  'time': true,                                                                                                        // 14581
  'url': true,                                                                                                         // 14582
  'week': true                                                                                                         // 14583
};                                                                                                                     // 14584
                                                                                                                       // 14585
function isTextInputElement(elem) {                                                                                    // 14586
  return elem && (                                                                                                     // 14587
    (elem.nodeName === 'INPUT' && supportedInputTypes[elem.type]) ||                                                   // 14588
    elem.nodeName === 'TEXTAREA'                                                                                       // 14589
  );                                                                                                                   // 14590
}                                                                                                                      // 14591
                                                                                                                       // 14592
module.exports = isTextInputElement;                                                                                   // 14593
                                                                                                                       // 14594
},{}],113:[function(require,module,exports){                                                                           // 14595
/**                                                                                                                    // 14596
 * Copyright 2013 Facebook, Inc.                                                                                       // 14597
 *                                                                                                                     // 14598
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 14599
 * you may not use this file except in compliance with the License.                                                    // 14600
 * You may obtain a copy of the License at                                                                             // 14601
 *                                                                                                                     // 14602
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 14603
 *                                                                                                                     // 14604
 * Unless required by applicable law or agreed to in writing, software                                                 // 14605
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 14606
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 14607
 * See the License for the specific language governing permissions and                                                 // 14608
 * limitations under the License.                                                                                      // 14609
 *                                                                                                                     // 14610
 * @providesModule isTextNode                                                                                          // 14611
 * @typechecks                                                                                                         // 14612
 */                                                                                                                    // 14613
                                                                                                                       // 14614
var isNode = require("./isNode");                                                                                      // 14615
                                                                                                                       // 14616
/**                                                                                                                    // 14617
 * @param {*} object The object to check.                                                                              // 14618
 * @return {boolean} Whether or not the object is a DOM text node.                                                     // 14619
 */                                                                                                                    // 14620
function isTextNode(object) {                                                                                          // 14621
  return isNode(object) && object.nodeType == 3;                                                                       // 14622
}                                                                                                                      // 14623
                                                                                                                       // 14624
module.exports = isTextNode;                                                                                           // 14625
                                                                                                                       // 14626
},{"./isNode":111}],114:[function(require,module,exports){                                                             // 14627
/**                                                                                                                    // 14628
 * Copyright 2013 Facebook, Inc.                                                                                       // 14629
 *                                                                                                                     // 14630
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 14631
 * you may not use this file except in compliance with the License.                                                    // 14632
 * You may obtain a copy of the License at                                                                             // 14633
 *                                                                                                                     // 14634
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 14635
 *                                                                                                                     // 14636
 * Unless required by applicable law or agreed to in writing, software                                                 // 14637
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 14638
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 14639
 * See the License for the specific language governing permissions and                                                 // 14640
 * limitations under the License.                                                                                      // 14641
 *                                                                                                                     // 14642
 * @providesModule joinClasses                                                                                         // 14643
 * @typechecks static-only                                                                                             // 14644
 */                                                                                                                    // 14645
                                                                                                                       // 14646
"use strict";                                                                                                          // 14647
                                                                                                                       // 14648
/**                                                                                                                    // 14649
 * Combines multiple className strings into one.                                                                       // 14650
 * http://jsperf.com/joinclasses-args-vs-array                                                                         // 14651
 *                                                                                                                     // 14652
 * @param {...?string} classes                                                                                         // 14653
 * @return {string}                                                                                                    // 14654
 */                                                                                                                    // 14655
function joinClasses(className/*, ... */) {                                                                            // 14656
  if (!className) {                                                                                                    // 14657
    className = '';                                                                                                    // 14658
  }                                                                                                                    // 14659
  var nextClass;                                                                                                       // 14660
  var argLength = arguments.length;                                                                                    // 14661
  if (argLength > 1) {                                                                                                 // 14662
    for (var ii = 1; ii < argLength; ii++) {                                                                           // 14663
      nextClass = arguments[ii];                                                                                       // 14664
      nextClass && (className += ' ' + nextClass);                                                                     // 14665
    }                                                                                                                  // 14666
  }                                                                                                                    // 14667
  return className;                                                                                                    // 14668
}                                                                                                                      // 14669
                                                                                                                       // 14670
module.exports = joinClasses;                                                                                          // 14671
                                                                                                                       // 14672
},{}],115:[function(require,module,exports){                                                                           // 14673
/**                                                                                                                    // 14674
 * Copyright 2013 Facebook, Inc.                                                                                       // 14675
 *                                                                                                                     // 14676
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 14677
 * you may not use this file except in compliance with the License.                                                    // 14678
 * You may obtain a copy of the License at                                                                             // 14679
 *                                                                                                                     // 14680
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 14681
 *                                                                                                                     // 14682
 * Unless required by applicable law or agreed to in writing, software                                                 // 14683
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 14684
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 14685
 * See the License for the specific language governing permissions and                                                 // 14686
 * limitations under the License.                                                                                      // 14687
 *                                                                                                                     // 14688
 * @providesModule keyMirror                                                                                           // 14689
 * @typechecks static-only                                                                                             // 14690
 */                                                                                                                    // 14691
                                                                                                                       // 14692
"use strict";                                                                                                          // 14693
                                                                                                                       // 14694
var invariant = require("./invariant");                                                                                // 14695
                                                                                                                       // 14696
/**                                                                                                                    // 14697
 * Constructs an enumeration with keys equal to their value.                                                           // 14698
 *                                                                                                                     // 14699
 * For example:                                                                                                        // 14700
 *                                                                                                                     // 14701
 *   var COLORS = keyMirror({blue: null, red: null});                                                                  // 14702
 *   var myColor = COLORS.blue;                                                                                        // 14703
 *   var isColorValid = !!COLORS[myColor];                                                                             // 14704
 *                                                                                                                     // 14705
 * The last line could not be performed if the values of the generated enum were                                       // 14706
 * not equal to their keys.                                                                                            // 14707
 *                                                                                                                     // 14708
 *   Input:  {key1: val1, key2: val2}                                                                                  // 14709
 *   Output: {key1: key1, key2: key2}                                                                                  // 14710
 *                                                                                                                     // 14711
 * @param {object} obj                                                                                                 // 14712
 * @return {object}                                                                                                    // 14713
 */                                                                                                                    // 14714
var keyMirror = function(obj) {                                                                                        // 14715
  var ret = {};                                                                                                        // 14716
  var key;                                                                                                             // 14717
  ("production" !== "development" ? invariant(                                                                         // 14718
    obj instanceof Object && !Array.isArray(obj),                                                                      // 14719
    'keyMirror(...): Argument must be an object.'                                                                      // 14720
  ) : invariant(obj instanceof Object && !Array.isArray(obj)));                                                        // 14721
  for (key in obj) {                                                                                                   // 14722
    if (!obj.hasOwnProperty(key)) {                                                                                    // 14723
      continue;                                                                                                        // 14724
    }                                                                                                                  // 14725
    ret[key] = key;                                                                                                    // 14726
  }                                                                                                                    // 14727
  return ret;                                                                                                          // 14728
};                                                                                                                     // 14729
                                                                                                                       // 14730
module.exports = keyMirror;                                                                                            // 14731
                                                                                                                       // 14732
},{"./invariant":109}],116:[function(require,module,exports){                                                          // 14733
/**                                                                                                                    // 14734
 * Copyright 2013 Facebook, Inc.                                                                                       // 14735
 *                                                                                                                     // 14736
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 14737
 * you may not use this file except in compliance with the License.                                                    // 14738
 * You may obtain a copy of the License at                                                                             // 14739
 *                                                                                                                     // 14740
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 14741
 *                                                                                                                     // 14742
 * Unless required by applicable law or agreed to in writing, software                                                 // 14743
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 14744
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 14745
 * See the License for the specific language governing permissions and                                                 // 14746
 * limitations under the License.                                                                                      // 14747
 *                                                                                                                     // 14748
 * @providesModule keyOf                                                                                               // 14749
 */                                                                                                                    // 14750
                                                                                                                       // 14751
/**                                                                                                                    // 14752
 * Allows extraction of a minified key. Let's the build system minify keys                                             // 14753
 * without loosing the ability to dynamically use key strings as values                                                // 14754
 * themselves. Pass in an object with a single key/val pair and it will return                                         // 14755
 * you the string key of that single record. Suppose you want to grab the                                              // 14756
 * value for a key 'className' inside of an object. Key/val minification may                                           // 14757
 * have aliased that key to be 'xa12'. keyOf({className: null}) will return                                            // 14758
 * 'xa12' in that case. Resolve keys you want to use once at startup time, then                                        // 14759
 * reuse those resolutions.                                                                                            // 14760
 */                                                                                                                    // 14761
var keyOf = function(oneKeyObj) {                                                                                      // 14762
  var key;                                                                                                             // 14763
  for (key in oneKeyObj) {                                                                                             // 14764
    if (!oneKeyObj.hasOwnProperty(key)) {                                                                              // 14765
      continue;                                                                                                        // 14766
    }                                                                                                                  // 14767
    return key;                                                                                                        // 14768
  }                                                                                                                    // 14769
  return null;                                                                                                         // 14770
};                                                                                                                     // 14771
                                                                                                                       // 14772
                                                                                                                       // 14773
module.exports = keyOf;                                                                                                // 14774
                                                                                                                       // 14775
},{}],117:[function(require,module,exports){                                                                           // 14776
/**                                                                                                                    // 14777
 * Copyright 2013 Facebook, Inc.                                                                                       // 14778
 *                                                                                                                     // 14779
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 14780
 * you may not use this file except in compliance with the License.                                                    // 14781
 * You may obtain a copy of the License at                                                                             // 14782
 *                                                                                                                     // 14783
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 14784
 *                                                                                                                     // 14785
 * Unless required by applicable law or agreed to in writing, software                                                 // 14786
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 14787
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 14788
 * See the License for the specific language governing permissions and                                                 // 14789
 * limitations under the License.                                                                                      // 14790
 *                                                                                                                     // 14791
 * @providesModule memoizeStringOnly                                                                                   // 14792
 * @typechecks static-only                                                                                             // 14793
 */                                                                                                                    // 14794
                                                                                                                       // 14795
"use strict";                                                                                                          // 14796
                                                                                                                       // 14797
/**                                                                                                                    // 14798
 * Memoizes the return value of a function that accepts one string argument.                                           // 14799
 *                                                                                                                     // 14800
 * @param {function} callback                                                                                          // 14801
 * @return {function}                                                                                                  // 14802
 */                                                                                                                    // 14803
function memoizeStringOnly(callback) {                                                                                 // 14804
  var cache = {};                                                                                                      // 14805
  return function(string) {                                                                                            // 14806
    if (cache.hasOwnProperty(string)) {                                                                                // 14807
      return cache[string];                                                                                            // 14808
    } else {                                                                                                           // 14809
      return cache[string] = callback.call(this, string);                                                              // 14810
    }                                                                                                                  // 14811
  };                                                                                                                   // 14812
}                                                                                                                      // 14813
                                                                                                                       // 14814
module.exports = memoizeStringOnly;                                                                                    // 14815
                                                                                                                       // 14816
},{}],118:[function(require,module,exports){                                                                           // 14817
/**                                                                                                                    // 14818
 * Copyright 2013 Facebook, Inc.                                                                                       // 14819
 *                                                                                                                     // 14820
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 14821
 * you may not use this file except in compliance with the License.                                                    // 14822
 * You may obtain a copy of the License at                                                                             // 14823
 *                                                                                                                     // 14824
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 14825
 *                                                                                                                     // 14826
 * Unless required by applicable law or agreed to in writing, software                                                 // 14827
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 14828
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 14829
 * See the License for the specific language governing permissions and                                                 // 14830
 * limitations under the License.                                                                                      // 14831
 *                                                                                                                     // 14832
 * @providesModule merge                                                                                               // 14833
 */                                                                                                                    // 14834
                                                                                                                       // 14835
"use strict";                                                                                                          // 14836
                                                                                                                       // 14837
var mergeInto = require("./mergeInto");                                                                                // 14838
                                                                                                                       // 14839
/**                                                                                                                    // 14840
 * Shallow merges two structures into a return value, without mutating either.                                         // 14841
 *                                                                                                                     // 14842
 * @param {?object} one Optional object with properties to merge from.                                                 // 14843
 * @param {?object} two Optional object with properties to merge from.                                                 // 14844
 * @return {object} The shallow extension of one by two.                                                               // 14845
 */                                                                                                                    // 14846
var merge = function(one, two) {                                                                                       // 14847
  var result = {};                                                                                                     // 14848
  mergeInto(result, one);                                                                                              // 14849
  mergeInto(result, two);                                                                                              // 14850
  return result;                                                                                                       // 14851
};                                                                                                                     // 14852
                                                                                                                       // 14853
module.exports = merge;                                                                                                // 14854
                                                                                                                       // 14855
},{"./mergeInto":120}],119:[function(require,module,exports){                                                          // 14856
/**                                                                                                                    // 14857
 * Copyright 2013 Facebook, Inc.                                                                                       // 14858
 *                                                                                                                     // 14859
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 14860
 * you may not use this file except in compliance with the License.                                                    // 14861
 * You may obtain a copy of the License at                                                                             // 14862
 *                                                                                                                     // 14863
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 14864
 *                                                                                                                     // 14865
 * Unless required by applicable law or agreed to in writing, software                                                 // 14866
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 14867
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 14868
 * See the License for the specific language governing permissions and                                                 // 14869
 * limitations under the License.                                                                                      // 14870
 *                                                                                                                     // 14871
 * @providesModule mergeHelpers                                                                                        // 14872
 *                                                                                                                     // 14873
 * requiresPolyfills: Array.isArray                                                                                    // 14874
 */                                                                                                                    // 14875
                                                                                                                       // 14876
"use strict";                                                                                                          // 14877
                                                                                                                       // 14878
var invariant = require("./invariant");                                                                                // 14879
var keyMirror = require("./keyMirror");                                                                                // 14880
                                                                                                                       // 14881
/**                                                                                                                    // 14882
 * Maximum number of levels to traverse. Will catch circular structures.                                               // 14883
 * @const                                                                                                              // 14884
 */                                                                                                                    // 14885
var MAX_MERGE_DEPTH = 36;                                                                                              // 14886
                                                                                                                       // 14887
/**                                                                                                                    // 14888
 * We won't worry about edge cases like new String('x') or new Boolean(true).                                          // 14889
 * Functions are considered terminals, and arrays are not.                                                             // 14890
 * @param {*} o The item/object/value to test.                                                                         // 14891
 * @return {boolean} true iff the argument is a terminal.                                                              // 14892
 */                                                                                                                    // 14893
var isTerminal = function(o) {                                                                                         // 14894
  return typeof o !== 'object' || o === null;                                                                          // 14895
};                                                                                                                     // 14896
                                                                                                                       // 14897
var mergeHelpers = {                                                                                                   // 14898
                                                                                                                       // 14899
  MAX_MERGE_DEPTH: MAX_MERGE_DEPTH,                                                                                    // 14900
                                                                                                                       // 14901
  isTerminal: isTerminal,                                                                                              // 14902
                                                                                                                       // 14903
  /**                                                                                                                  // 14904
   * Converts null/undefined values into empty object.                                                                 // 14905
   *                                                                                                                   // 14906
   * @param {?Object=} arg Argument to be normalized (nullable optional)                                               // 14907
   * @return {!Object}                                                                                                 // 14908
   */                                                                                                                  // 14909
  normalizeMergeArg: function(arg) {                                                                                   // 14910
    return arg === undefined || arg === null ? {} : arg;                                                               // 14911
  },                                                                                                                   // 14912
                                                                                                                       // 14913
  /**                                                                                                                  // 14914
   * If merging Arrays, a merge strategy *must* be supplied. If not, it is                                             // 14915
   * likely the caller's fault. If this function is ever called with anything                                          // 14916
   * but `one` and `two` being `Array`s, it is the fault of the merge utilities.                                       // 14917
   *                                                                                                                   // 14918
   * @param {*} one Array to merge into.                                                                               // 14919
   * @param {*} two Array to merge from.                                                                               // 14920
   */                                                                                                                  // 14921
  checkMergeArrayArgs: function(one, two) {                                                                            // 14922
    ("production" !== "development" ? invariant(                                                                       // 14923
      Array.isArray(one) && Array.isArray(two),                                                                        // 14924
      'Critical assumptions about the merge functions have been violated. ' +                                          // 14925
      'This is the fault of the merge functions themselves, not necessarily ' +                                        // 14926
      'the callers.'                                                                                                   // 14927
    ) : invariant(Array.isArray(one) && Array.isArray(two)));                                                          // 14928
  },                                                                                                                   // 14929
                                                                                                                       // 14930
  /**                                                                                                                  // 14931
   * @param {*} one Object to merge into.                                                                              // 14932
   * @param {*} two Object to merge from.                                                                              // 14933
   */                                                                                                                  // 14934
  checkMergeObjectArgs: function(one, two) {                                                                           // 14935
    mergeHelpers.checkMergeObjectArg(one);                                                                             // 14936
    mergeHelpers.checkMergeObjectArg(two);                                                                             // 14937
  },                                                                                                                   // 14938
                                                                                                                       // 14939
  /**                                                                                                                  // 14940
   * @param {*} arg                                                                                                    // 14941
   */                                                                                                                  // 14942
  checkMergeObjectArg: function(arg) {                                                                                 // 14943
    ("production" !== "development" ? invariant(                                                                       // 14944
      !isTerminal(arg) && !Array.isArray(arg),                                                                         // 14945
      'Critical assumptions about the merge functions have been violated. ' +                                          // 14946
      'This is the fault of the merge functions themselves, not necessarily ' +                                        // 14947
      'the callers.'                                                                                                   // 14948
    ) : invariant(!isTerminal(arg) && !Array.isArray(arg)));                                                           // 14949
  },                                                                                                                   // 14950
                                                                                                                       // 14951
  /**                                                                                                                  // 14952
   * Checks that a merge was not given a circular object or an object that had                                         // 14953
   * too great of depth.                                                                                               // 14954
   *                                                                                                                   // 14955
   * @param {number} Level of recursion to validate against maximum.                                                   // 14956
   */                                                                                                                  // 14957
  checkMergeLevel: function(level) {                                                                                   // 14958
    ("production" !== "development" ? invariant(                                                                       // 14959
      level < MAX_MERGE_DEPTH,                                                                                         // 14960
      'Maximum deep merge depth exceeded. You may be attempting to merge ' +                                           // 14961
      'circular structures in an unsupported way.'                                                                     // 14962
    ) : invariant(level < MAX_MERGE_DEPTH));                                                                           // 14963
  },                                                                                                                   // 14964
                                                                                                                       // 14965
  /**                                                                                                                  // 14966
   * Checks that the supplied merge strategy is valid.                                                                 // 14967
   *                                                                                                                   // 14968
   * @param {string} Array merge strategy.                                                                             // 14969
   */                                                                                                                  // 14970
  checkArrayStrategy: function(strategy) {                                                                             // 14971
    ("production" !== "development" ? invariant(                                                                       // 14972
      strategy === undefined || strategy in mergeHelpers.ArrayStrategies,                                              // 14973
      'You must provide an array strategy to deep merge functions to ' +                                               // 14974
      'instruct the deep merge how to resolve merging two arrays.'                                                     // 14975
    ) : invariant(strategy === undefined || strategy in mergeHelpers.ArrayStrategies));                                // 14976
  },                                                                                                                   // 14977
                                                                                                                       // 14978
  /**                                                                                                                  // 14979
   * Set of possible behaviors of merge algorithms when encountering two Arrays                                        // 14980
   * that must be merged together.                                                                                     // 14981
   * - `clobber`: The left `Array` is ignored.                                                                         // 14982
   * - `indexByIndex`: The result is achieved by recursively deep merging at                                           // 14983
   *   each index. (not yet supported.)                                                                                // 14984
   */                                                                                                                  // 14985
  ArrayStrategies: keyMirror({                                                                                         // 14986
    Clobber: true,                                                                                                     // 14987
    IndexByIndex: true                                                                                                 // 14988
  })                                                                                                                   // 14989
                                                                                                                       // 14990
};                                                                                                                     // 14991
                                                                                                                       // 14992
module.exports = mergeHelpers;                                                                                         // 14993
                                                                                                                       // 14994
},{"./invariant":109,"./keyMirror":115}],120:[function(require,module,exports){                                        // 14995
/**                                                                                                                    // 14996
 * Copyright 2013 Facebook, Inc.                                                                                       // 14997
 *                                                                                                                     // 14998
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 14999
 * you may not use this file except in compliance with the License.                                                    // 15000
 * You may obtain a copy of the License at                                                                             // 15001
 *                                                                                                                     // 15002
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 15003
 *                                                                                                                     // 15004
 * Unless required by applicable law or agreed to in writing, software                                                 // 15005
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 15006
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 15007
 * See the License for the specific language governing permissions and                                                 // 15008
 * limitations under the License.                                                                                      // 15009
 *                                                                                                                     // 15010
 * @providesModule mergeInto                                                                                           // 15011
 * @typechecks static-only                                                                                             // 15012
 */                                                                                                                    // 15013
                                                                                                                       // 15014
"use strict";                                                                                                          // 15015
                                                                                                                       // 15016
var mergeHelpers = require("./mergeHelpers");                                                                          // 15017
                                                                                                                       // 15018
var checkMergeObjectArg = mergeHelpers.checkMergeObjectArg;                                                            // 15019
                                                                                                                       // 15020
/**                                                                                                                    // 15021
 * Shallow merges two structures by mutating the first parameter.                                                      // 15022
 *                                                                                                                     // 15023
 * @param {object} one Object to be merged into.                                                                       // 15024
 * @param {?object} two Optional object with properties to merge from.                                                 // 15025
 */                                                                                                                    // 15026
function mergeInto(one, two) {                                                                                         // 15027
  checkMergeObjectArg(one);                                                                                            // 15028
  if (two != null) {                                                                                                   // 15029
    checkMergeObjectArg(two);                                                                                          // 15030
    for (var key in two) {                                                                                             // 15031
      if (!two.hasOwnProperty(key)) {                                                                                  // 15032
        continue;                                                                                                      // 15033
      }                                                                                                                // 15034
      one[key] = two[key];                                                                                             // 15035
    }                                                                                                                  // 15036
  }                                                                                                                    // 15037
}                                                                                                                      // 15038
                                                                                                                       // 15039
module.exports = mergeInto;                                                                                            // 15040
                                                                                                                       // 15041
},{"./mergeHelpers":119}],121:[function(require,module,exports){                                                       // 15042
/**                                                                                                                    // 15043
 * Copyright 2013 Facebook, Inc.                                                                                       // 15044
 *                                                                                                                     // 15045
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 15046
 * you may not use this file except in compliance with the License.                                                    // 15047
 * You may obtain a copy of the License at                                                                             // 15048
 *                                                                                                                     // 15049
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 15050
 *                                                                                                                     // 15051
 * Unless required by applicable law or agreed to in writing, software                                                 // 15052
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 15053
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 15054
 * See the License for the specific language governing permissions and                                                 // 15055
 * limitations under the License.                                                                                      // 15056
 *                                                                                                                     // 15057
 * @providesModule mixInto                                                                                             // 15058
 */                                                                                                                    // 15059
                                                                                                                       // 15060
"use strict";                                                                                                          // 15061
                                                                                                                       // 15062
/**                                                                                                                    // 15063
 * Simply copies properties to the prototype.                                                                          // 15064
 */                                                                                                                    // 15065
var mixInto = function(constructor, methodBag) {                                                                       // 15066
  var methodName;                                                                                                      // 15067
  for (methodName in methodBag) {                                                                                      // 15068
    if (!methodBag.hasOwnProperty(methodName)) {                                                                       // 15069
      continue;                                                                                                        // 15070
    }                                                                                                                  // 15071
    constructor.prototype[methodName] = methodBag[methodName];                                                         // 15072
  }                                                                                                                    // 15073
};                                                                                                                     // 15074
                                                                                                                       // 15075
module.exports = mixInto;                                                                                              // 15076
                                                                                                                       // 15077
},{}],122:[function(require,module,exports){                                                                           // 15078
/**                                                                                                                    // 15079
 * Copyright 2013 Facebook, Inc.                                                                                       // 15080
 *                                                                                                                     // 15081
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 15082
 * you may not use this file except in compliance with the License.                                                    // 15083
 * You may obtain a copy of the License at                                                                             // 15084
 *                                                                                                                     // 15085
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 15086
 *                                                                                                                     // 15087
 * Unless required by applicable law or agreed to in writing, software                                                 // 15088
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 15089
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 15090
 * See the License for the specific language governing permissions and                                                 // 15091
 * limitations under the License.                                                                                      // 15092
 *                                                                                                                     // 15093
 * @providesModule mutateHTMLNodeWithMarkup                                                                            // 15094
 * @typechecks static-only                                                                                             // 15095
 */                                                                                                                    // 15096
                                                                                                                       // 15097
/*jslint evil: true */                                                                                                 // 15098
                                                                                                                       // 15099
'use strict';                                                                                                          // 15100
                                                                                                                       // 15101
var createNodesFromMarkup = require("./createNodesFromMarkup");                                                        // 15102
var filterAttributes = require("./filterAttributes");                                                                  // 15103
var invariant = require("./invariant");                                                                                // 15104
                                                                                                                       // 15105
/**                                                                                                                    // 15106
 * You can't set the innerHTML of a document. Unless you have                                                          // 15107
 * this function.                                                                                                      // 15108
 *                                                                                                                     // 15109
 * @param {DOMElement} node with tagName == 'html'                                                                     // 15110
 * @param {string} markup markup string including <html>.                                                              // 15111
 */                                                                                                                    // 15112
function mutateHTMLNodeWithMarkup(node, markup) {                                                                      // 15113
  ("production" !== "development" ? invariant(                                                                         // 15114
    node.tagName.toLowerCase() === 'html',                                                                             // 15115
    'mutateHTMLNodeWithMarkup(): node must have tagName of "html", got %s',                                            // 15116
    node.tagName                                                                                                       // 15117
  ) : invariant(node.tagName.toLowerCase() === 'html'));                                                               // 15118
                                                                                                                       // 15119
  markup = markup.trim();                                                                                              // 15120
  ("production" !== "development" ? invariant(                                                                         // 15121
    markup.toLowerCase().indexOf('<html') === 0,                                                                       // 15122
    'mutateHTMLNodeWithMarkup(): markup must start with <html'                                                         // 15123
  ) : invariant(markup.toLowerCase().indexOf('<html') === 0));                                                         // 15124
                                                                                                                       // 15125
  // First let's extract the various pieces of markup.                                                                 // 15126
  var htmlOpenTagEnd = markup.indexOf('>') + 1;                                                                        // 15127
  var htmlCloseTagStart = markup.lastIndexOf('<');                                                                     // 15128
  var htmlOpenTag = markup.substring(0, htmlOpenTagEnd);                                                               // 15129
  var innerHTML = markup.substring(htmlOpenTagEnd, htmlCloseTagStart);                                                 // 15130
                                                                                                                       // 15131
  // Now for the fun stuff. Pass through both sets of attributes and                                                   // 15132
  // bring them up-to-date. We get the new set by creating a markup                                                    // 15133
  // fragment.                                                                                                         // 15134
  var shouldExtractAttributes = htmlOpenTag.indexOf(' ') > -1;                                                         // 15135
  var attributeHolder = null;                                                                                          // 15136
                                                                                                                       // 15137
  if (shouldExtractAttributes) {                                                                                       // 15138
    // We extract the attributes by creating a <span> and evaluating                                                   // 15139
    // the node.                                                                                                       // 15140
    attributeHolder = createNodesFromMarkup(                                                                           // 15141
      htmlOpenTag.replace('html ', 'span ') + '</span>'                                                                // 15142
    )[0];                                                                                                              // 15143
                                                                                                                       // 15144
    // Add all attributes present in attributeHolder                                                                   // 15145
    var attributesToSet = filterAttributes(                                                                            // 15146
      attributeHolder,                                                                                                 // 15147
      function(attr) {                                                                                                 // 15148
        return node.getAttributeNS(attr.namespaceURI, attr.name) !== attr.value;                                       // 15149
      }                                                                                                                // 15150
    );                                                                                                                 // 15151
    attributesToSet.forEach(function(attr) {                                                                           // 15152
      node.setAttributeNS(attr.namespaceURI, attr.name, attr.value);                                                   // 15153
    });                                                                                                                // 15154
  }                                                                                                                    // 15155
                                                                                                                       // 15156
  // Remove all attributes not present in attributeHolder                                                              // 15157
  var attributesToRemove = filterAttributes(                                                                           // 15158
    node,                                                                                                              // 15159
    function(attr) {                                                                                                   // 15160
      // Remove all attributes if attributeHolder is null or if it does not have                                       // 15161
      // the desired attribute.                                                                                        // 15162
      return !(                                                                                                        // 15163
        attributeHolder &&                                                                                             // 15164
          attributeHolder.hasAttributeNS(attr.namespaceURI, attr.name)                                                 // 15165
      );                                                                                                               // 15166
    }                                                                                                                  // 15167
  );                                                                                                                   // 15168
  attributesToRemove.forEach(function(attr) {                                                                          // 15169
    node.removeAttributeNS(attr.namespaceURI, attr.name);                                                              // 15170
  });                                                                                                                  // 15171
                                                                                                                       // 15172
  // Finally, set the inner HTML. No tricks needed. Do this last to                                                    // 15173
  // minimize likelihood of triggering reflows.                                                                        // 15174
  node.innerHTML = innerHTML;                                                                                          // 15175
}                                                                                                                      // 15176
                                                                                                                       // 15177
module.exports = mutateHTMLNodeWithMarkup;                                                                             // 15178
                                                                                                                       // 15179
},{"./createNodesFromMarkup":90,"./filterAttributes":97,"./invariant":109}],123:[function(require,module,exports){     // 15180
/**                                                                                                                    // 15181
 * Copyright 2013 Facebook, Inc.                                                                                       // 15182
 *                                                                                                                     // 15183
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 15184
 * you may not use this file except in compliance with the License.                                                    // 15185
 * You may obtain a copy of the License at                                                                             // 15186
 *                                                                                                                     // 15187
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 15188
 *                                                                                                                     // 15189
 * Unless required by applicable law or agreed to in writing, software                                                 // 15190
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 15191
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 15192
 * See the License for the specific language governing permissions and                                                 // 15193
 * limitations under the License.                                                                                      // 15194
 *                                                                                                                     // 15195
 * @providesModule objMap                                                                                              // 15196
 */                                                                                                                    // 15197
                                                                                                                       // 15198
"use strict";                                                                                                          // 15199
                                                                                                                       // 15200
/**                                                                                                                    // 15201
 * For each key/value pair, invokes callback func and constructs a resulting                                           // 15202
 * object which contains, for every key in obj, values that are the result of                                          // 15203
 * of invoking the function:                                                                                           // 15204
 *                                                                                                                     // 15205
 *   func(value, key, iteration)                                                                                       // 15206
 *                                                                                                                     // 15207
 * @param {?object} obj Object to map keys over                                                                        // 15208
 * @param {function} func Invoked for each key/val pair.                                                               // 15209
 * @param {?*} context                                                                                                 // 15210
 * @return {?object} Result of mapping or null if obj is falsey                                                        // 15211
 */                                                                                                                    // 15212
function objMap(obj, func, context) {                                                                                  // 15213
  if (!obj) {                                                                                                          // 15214
    return null;                                                                                                       // 15215
  }                                                                                                                    // 15216
  var i = 0;                                                                                                           // 15217
  var ret = {};                                                                                                        // 15218
  for (var key in obj) {                                                                                               // 15219
    if (obj.hasOwnProperty(key)) {                                                                                     // 15220
      ret[key] = func.call(context, obj[key], key, i++);                                                               // 15221
    }                                                                                                                  // 15222
  }                                                                                                                    // 15223
  return ret;                                                                                                          // 15224
}                                                                                                                      // 15225
                                                                                                                       // 15226
module.exports = objMap;                                                                                               // 15227
                                                                                                                       // 15228
},{}],124:[function(require,module,exports){                                                                           // 15229
/**                                                                                                                    // 15230
 * Copyright 2013 Facebook, Inc.                                                                                       // 15231
 *                                                                                                                     // 15232
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 15233
 * you may not use this file except in compliance with the License.                                                    // 15234
 * You may obtain a copy of the License at                                                                             // 15235
 *                                                                                                                     // 15236
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 15237
 *                                                                                                                     // 15238
 * Unless required by applicable law or agreed to in writing, software                                                 // 15239
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 15240
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 15241
 * See the License for the specific language governing permissions and                                                 // 15242
 * limitations under the License.                                                                                      // 15243
 *                                                                                                                     // 15244
 * @providesModule objMapKeyVal                                                                                        // 15245
 */                                                                                                                    // 15246
                                                                                                                       // 15247
"use strict";                                                                                                          // 15248
                                                                                                                       // 15249
/**                                                                                                                    // 15250
 * Behaves the same as `objMap` but invokes func with the key first, and value                                         // 15251
 * second. Use `objMap` unless you need this special case.                                                             // 15252
 * Invokes func as:                                                                                                    // 15253
 *                                                                                                                     // 15254
 *   func(key, value, iteration)                                                                                       // 15255
 *                                                                                                                     // 15256
 * @param {?object} obj Object to map keys over                                                                        // 15257
 * @param {!function} func Invoked for each key/val pair.                                                              // 15258
 * @param {?*} context                                                                                                 // 15259
 * @return {?object} Result of mapping or null if obj is falsey                                                        // 15260
 */                                                                                                                    // 15261
function objMapKeyVal(obj, func, context) {                                                                            // 15262
  if (!obj) {                                                                                                          // 15263
    return null;                                                                                                       // 15264
  }                                                                                                                    // 15265
  var i = 0;                                                                                                           // 15266
  var ret = {};                                                                                                        // 15267
  for (var key in obj) {                                                                                               // 15268
    if (obj.hasOwnProperty(key)) {                                                                                     // 15269
      ret[key] = func.call(context, key, obj[key], i++);                                                               // 15270
    }                                                                                                                  // 15271
  }                                                                                                                    // 15272
  return ret;                                                                                                          // 15273
}                                                                                                                      // 15274
                                                                                                                       // 15275
module.exports = objMapKeyVal;                                                                                         // 15276
                                                                                                                       // 15277
},{}],125:[function(require,module,exports){                                                                           // 15278
/**                                                                                                                    // 15279
 * Copyright 2013 Facebook, Inc.                                                                                       // 15280
 *                                                                                                                     // 15281
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 15282
 * you may not use this file except in compliance with the License.                                                    // 15283
 * You may obtain a copy of the License at                                                                             // 15284
 *                                                                                                                     // 15285
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 15286
 *                                                                                                                     // 15287
 * Unless required by applicable law or agreed to in writing, software                                                 // 15288
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 15289
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 15290
 * See the License for the specific language governing permissions and                                                 // 15291
 * limitations under the License.                                                                                      // 15292
 *                                                                                                                     // 15293
 * @providesModule performanceNow                                                                                      // 15294
 * @typechecks static-only                                                                                             // 15295
 */                                                                                                                    // 15296
                                                                                                                       // 15297
"use strict";                                                                                                          // 15298
                                                                                                                       // 15299
var ExecutionEnvironment = require("./ExecutionEnvironment");                                                          // 15300
                                                                                                                       // 15301
/**                                                                                                                    // 15302
 * Detect if we can use window.performance.now() and gracefully                                                        // 15303
 * fallback to Date.now() if it doesn't exist.                                                                         // 15304
 * We need to support Firefox < 15 for now due to Facebook's webdriver                                                 // 15305
 * infrastructure.                                                                                                     // 15306
 */                                                                                                                    // 15307
var performance = null;                                                                                                // 15308
                                                                                                                       // 15309
if (ExecutionEnvironment.canUseDOM) {                                                                                  // 15310
  performance = window.performance || window.webkitPerformance;                                                        // 15311
}                                                                                                                      // 15312
                                                                                                                       // 15313
if (!performance || !performance.now) {                                                                                // 15314
  performance = Date;                                                                                                  // 15315
}                                                                                                                      // 15316
                                                                                                                       // 15317
var performanceNow = performance.now.bind(performance);                                                                // 15318
                                                                                                                       // 15319
module.exports = performanceNow;                                                                                       // 15320
                                                                                                                       // 15321
},{"./ExecutionEnvironment":21}],126:[function(require,module,exports){                                                // 15322
/**                                                                                                                    // 15323
 * Copyright 2013 Facebook, Inc.                                                                                       // 15324
 *                                                                                                                     // 15325
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 15326
 * you may not use this file except in compliance with the License.                                                    // 15327
 * You may obtain a copy of the License at                                                                             // 15328
 *                                                                                                                     // 15329
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 15330
 *                                                                                                                     // 15331
 * Unless required by applicable law or agreed to in writing, software                                                 // 15332
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 15333
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 15334
 * See the License for the specific language governing permissions and                                                 // 15335
 * limitations under the License.                                                                                      // 15336
 *                                                                                                                     // 15337
 * @providesModule shallowEqual                                                                                        // 15338
 */                                                                                                                    // 15339
                                                                                                                       // 15340
"use strict";                                                                                                          // 15341
                                                                                                                       // 15342
/**                                                                                                                    // 15343
 * Performs equality by iterating through keys on an object and returning                                              // 15344
 * false when any key has values which are not strictly equal between                                                  // 15345
 * objA and objB. Returns true when the values of all keys are strictly equal.                                         // 15346
 *                                                                                                                     // 15347
 * @return {boolean}                                                                                                   // 15348
 */                                                                                                                    // 15349
function shallowEqual(objA, objB) {                                                                                    // 15350
  if (objA === objB) {                                                                                                 // 15351
    return true;                                                                                                       // 15352
  }                                                                                                                    // 15353
  var key;                                                                                                             // 15354
  // Test for A's keys different from B.                                                                               // 15355
  for (key in objA) {                                                                                                  // 15356
    if (objA.hasOwnProperty(key) &&                                                                                    // 15357
        (!objB.hasOwnProperty(key) || objA[key] !== objB[key])) {                                                      // 15358
      return false;                                                                                                    // 15359
    }                                                                                                                  // 15360
  }                                                                                                                    // 15361
  // Test for B'a keys missing from A.                                                                                 // 15362
  for (key in objB) {                                                                                                  // 15363
    if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {                                                       // 15364
      return false;                                                                                                    // 15365
    }                                                                                                                  // 15366
  }                                                                                                                    // 15367
  return true;                                                                                                         // 15368
}                                                                                                                      // 15369
                                                                                                                       // 15370
module.exports = shallowEqual;                                                                                         // 15371
                                                                                                                       // 15372
},{}],127:[function(require,module,exports){                                                                           // 15373
/**                                                                                                                    // 15374
 * Copyright 2013 Facebook, Inc.                                                                                       // 15375
 *                                                                                                                     // 15376
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 15377
 * you may not use this file except in compliance with the License.                                                    // 15378
 * You may obtain a copy of the License at                                                                             // 15379
 *                                                                                                                     // 15380
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 15381
 *                                                                                                                     // 15382
 * Unless required by applicable law or agreed to in writing, software                                                 // 15383
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 15384
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 15385
 * See the License for the specific language governing permissions and                                                 // 15386
 * limitations under the License.                                                                                      // 15387
 *                                                                                                                     // 15388
 * @providesModule traverseAllChildren                                                                                 // 15389
 */                                                                                                                    // 15390
                                                                                                                       // 15391
"use strict";                                                                                                          // 15392
                                                                                                                       // 15393
var ReactComponent = require("./ReactComponent");                                                                      // 15394
var ReactTextComponent = require("./ReactTextComponent");                                                              // 15395
                                                                                                                       // 15396
var invariant = require("./invariant");                                                                                // 15397
                                                                                                                       // 15398
/**                                                                                                                    // 15399
 * TODO: Test that:                                                                                                    // 15400
 * 1. `mapChildren` transforms strings and numbers into `ReactTextComponent`.                                          // 15401
 * 2. it('should fail when supplied duplicate key', function() {                                                       // 15402
 * 3. That a single child and an array with one item have the same key pattern.                                        // 15403
 * });                                                                                                                 // 15404
 */                                                                                                                    // 15405
                                                                                                                       // 15406
/**                                                                                                                    // 15407
 * @param {?*} children Children tree container.                                                                       // 15408
 * @param {!string} nameSoFar Name of the key path so far.                                                             // 15409
 * @param {!number} indexSoFar Number of children encountered until this point.                                        // 15410
 * @param {!function} callback Callback to invoke with each child found.                                               // 15411
 * @param {?*} traverseContext Used to pass information throughout the traversal                                       // 15412
 * process.                                                                                                            // 15413
 * @return {!number} The number of children in this subtree.                                                           // 15414
 */                                                                                                                    // 15415
var traverseAllChildrenImpl =                                                                                          // 15416
  function(children, nameSoFar, indexSoFar, callback, traverseContext) {                                               // 15417
    var subtreeCount = 0;  // Count of children found in the current subtree.                                          // 15418
    if (Array.isArray(children)) {                                                                                     // 15419
      for (var i = 0; i < children.length; i++) {                                                                      // 15420
        var child = children[i];                                                                                       // 15421
        var nextName = nameSoFar + ReactComponent.getKey(child, i);                                                    // 15422
        var nextIndex = indexSoFar + subtreeCount;                                                                     // 15423
        subtreeCount += traverseAllChildrenImpl(                                                                       // 15424
          child,                                                                                                       // 15425
          nextName,                                                                                                    // 15426
          nextIndex,                                                                                                   // 15427
          callback,                                                                                                    // 15428
          traverseContext                                                                                              // 15429
        );                                                                                                             // 15430
      }                                                                                                                // 15431
    } else {                                                                                                           // 15432
      var type = typeof children;                                                                                      // 15433
      var isOnlyChild = nameSoFar === '';                                                                              // 15434
      // If it's the only child, treat the name as if it was wrapped in an array                                       // 15435
      // so that it's consistent if the number of children grows                                                       // 15436
      var storageName = isOnlyChild ?                                                                                  // 15437
        ReactComponent.getKey(children, 0):                                                                            // 15438
        nameSoFar;                                                                                                     // 15439
      if (children === null || children === undefined || type === 'boolean') {                                         // 15440
        // All of the above are perceived as null.                                                                     // 15441
        callback(traverseContext, null, storageName, indexSoFar);                                                      // 15442
        subtreeCount = 1;                                                                                              // 15443
      } else if (children.mountComponentIntoNode) {                                                                    // 15444
        callback(traverseContext, children, storageName, indexSoFar);                                                  // 15445
        subtreeCount = 1;                                                                                              // 15446
      } else {                                                                                                         // 15447
        if (type === 'object') {                                                                                       // 15448
          ("production" !== "development" ? invariant(                                                                 // 15449
            !children || children.nodeType !== 1,                                                                      // 15450
            'traverseAllChildren(...): Encountered an invalid child; DOM ' +                                           // 15451
            'elements are not valid children of React components.'                                                     // 15452
          ) : invariant(!children || children.nodeType !== 1));                                                        // 15453
          for (var key in children) {                                                                                  // 15454
            if (children.hasOwnProperty(key)) {                                                                        // 15455
              subtreeCount += traverseAllChildrenImpl(                                                                 // 15456
                children[key],                                                                                         // 15457
                nameSoFar + '{' + key + '}',                                                                           // 15458
                indexSoFar + subtreeCount,                                                                             // 15459
                callback,                                                                                              // 15460
                traverseContext                                                                                        // 15461
              );                                                                                                       // 15462
            }                                                                                                          // 15463
          }                                                                                                            // 15464
        } else if (type === 'string') {                                                                                // 15465
          var normalizedText = new ReactTextComponent(children);                                                       // 15466
          callback(traverseContext, normalizedText, storageName, indexSoFar);                                          // 15467
          subtreeCount += 1;                                                                                           // 15468
        } else if (type === 'number') {                                                                                // 15469
          var normalizedNumber = new ReactTextComponent('' + children);                                                // 15470
          callback(traverseContext, normalizedNumber, storageName, indexSoFar);                                        // 15471
          subtreeCount += 1;                                                                                           // 15472
        }                                                                                                              // 15473
      }                                                                                                                // 15474
    }                                                                                                                  // 15475
    return subtreeCount;                                                                                               // 15476
  };                                                                                                                   // 15477
                                                                                                                       // 15478
/**                                                                                                                    // 15479
 * Traverses children that are typically specified as `props.children`, but                                            // 15480
 * might also be specified through attributes:                                                                         // 15481
 *                                                                                                                     // 15482
 * - `traverseAllChildren(this.props.children, ...)`                                                                   // 15483
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`                                                          // 15484
 *                                                                                                                     // 15485
 * The `traverseContext` is an optional argument that is passed through the                                            // 15486
 * entire traversal. It can be used to store accumulations or anything else that                                       // 15487
 * the callback might find relevant.                                                                                   // 15488
 *                                                                                                                     // 15489
 * @param {?*} children Children tree object.                                                                          // 15490
 * @param {!function} callback To invoke upon traversing each child.                                                   // 15491
 * @param {?*} traverseContext Context for traversal.                                                                  // 15492
 */                                                                                                                    // 15493
function traverseAllChildren(children, callback, traverseContext) {                                                    // 15494
  if (children !== null && children !== undefined) {                                                                   // 15495
    traverseAllChildrenImpl(children, '', 0, callback, traverseContext);                                               // 15496
  }                                                                                                                    // 15497
}                                                                                                                      // 15498
                                                                                                                       // 15499
module.exports = traverseAllChildren;                                                                                  // 15500
                                                                                                                       // 15501
},{"./ReactComponent":28,"./ReactTextComponent":65,"./invariant":109}]},{},[71])                                       // 15502
(71)                                                                                                                   // 15503
});                                                                                                                    // 15504
;                                                                                                                      // 15505
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/react/react.js                                                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
MeteorMixin = {                                                                                                        // 1
    _handleMeteorChange: function(cb) {                                                                                // 2
        this.setState({meteor: this.getMeteorState()}, cb);                                                            // 3
    },                                                                                                                 // 4
                                                                                                                       // 5
    _cancelComputation: function() {                                                                                   // 6
        this._meteorComputation.stop();                                                                                // 7
        this._meteorComputation = null;                                                                                // 8
    },                                                                                                                 // 9
                                                                                                                       // 10
    componentWillMount: function() {                                                                                   // 11
        this._meteorComputation = Deps.autorun(this._handleMeteorChange.bind(this, null));                             // 12
        this._realReplaceState = this.replaceState;                                                                    // 13
        this.replaceState = this._replaceState;                                                                        // 14
    },                                                                                                                 // 15
                                                                                                                       // 16
    _replaceState: function(newState, cb) {                                                                            // 17
        if (this.state.meteor === newState.meteor) {                                                                   // 18
            this.state = newState;                                                                                     // 19
            this._cancelComputation();                                                                                 // 20
            this._meteorComputation = Deps.autorun(this._handleMeteorChange.bind(this, cb));                           // 21
        } else {                                                                                                       // 22
            this._realReplaceState(newState, cb);                                                                      // 23
        }                                                                                                              // 24
    },                                                                                                                 // 25
                                                                                                                       // 26
    componentWillReceiveProps: function(nextProps) {                                                                   // 27
        var oldProps = this.props;                                                                                     // 28
        this.props = nextProps;                                                                                        // 29
        this._handleMeteorChange(null);                                                                                // 30
        this.props = oldProps;                                                                                         // 31
    },                                                                                                                 // 32
                                                                                                                       // 33
    componentWillUnmount: function() {                                                                                 // 34
        this._cancelComputation();                                                                                     // 35
    }                                                                                                                  // 36
                                                                                                                       // 37
};                                                                                                                     // 38
                                                                                                                       // 39
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);
