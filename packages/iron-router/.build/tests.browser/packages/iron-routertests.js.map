{"version":3,"file":"/packages/iron-router:tests.js","sources":["iron-router/test/test_helpers.js","iron-router/test/both/route.js","iron-router/test/both/route_controller.js","iron-router/test/both/router.js","iron-router/test/both/utils.js","iron-router/test/client/mocks.js","iron-router/test/client/router.js","iron-router/test/client/route_controller.js","iron-router/test/client/wait_list.js"],"names":[],"mappings":";;;;;;;;AAAA,kB;AACA,oB;AACA,mB;AACA,wB;AACA,G;;AAEA,4C;AACA,sB;AACA,kB;AACA,6B;AACA,K;AACA,C;;;;;;;;;;;;;;;;;;;ACXA,E;AACA,kB;AACA,G;;AAEA,a;AACA,qB;AACA,4B;AACA,sC;AACA,0C;AACA,6B;AACA,wC;AACA,sD;AACA,uB;AACA,mC;AACA,qC;AACA,E;;AAEA,kD;AACA,6C;AACA,wB;AACA,K;AACA,oC;AACA,oC;AACA,qC;AACA,uC;AACA,sC;;AAEA,yC;AACA,wB;AACA,K;AACA,sC;AACA,sC;AACA,uC;AACA,uC;AACA,yC;AACA,wC;;AAEA,sC;AACA,qB;AACA,K;AACA,wC;AACA,wC;AACA,yC;AACA,yC;AACA,2C;AACA,0C;;AAEA,yC;AACA,wB;AACA,K;AACA,sC;AACA,sC;AACA,wC;AACA,wC;AACA,yC;AACA,yC;AACA,2C;AACA,0C;;AAEA,+C;AACA,8B;AACA,K;AACA,+B;AACA,+B;AACA,gC;AACA,gC;AACA,iC;AACA,iC;AACA,mC;AACA,kC;;AAEA,4C;AACA,2B;AACA,K;AACA,+B;AACA,+B;AACA,gC;AACA,gC;AACA,iC;AACA,iC;AACA,kC;AACA,kC;AACA,mC;AACA,mC;AACA,qC;AACA,oC;;AAEA,8C;AACA,6B;AACA,K;AACA,gC;AACA,+B;AACA,gC;AACA,gC;AACA,iC;AACA,iC;AACA,kC;AACA,kC;AACA,mC;AACA,mC;AACA,oC;AACA,oC;AACA,qC;AACA,qC;AACA,uC;AACA,sC;;AAEA,yC;AACA,wB;AACA,K;AACA,wC;AACA,wC;AACA,0C;AACA,0C;AACA,4C;AACA,4C;;AAEA,8C;AACA,6B;AACA,K;AACA,iD;AACA,iD;;AAEA,sC;AACA,qB;AACA,K;AACA,+C;AACA,+C;AACA,G;;AAEA,gD;AACA,6C;AACA,wB;AACA,K;;AAEA,8B;AACA,uD;;AAEA,yC;AACA,wB;AACA,K;;AAEA,wC;AACA,gC;;AAEA,sC;AACA,qB;AACA,K;AACA,sC;AACA,mC;AACA,mC;;AAEA,yC;AACA,wB;AACA,K;AACA,oC;AACA,mC;AACA,oC;;AAEA,sC;AACA,mC;AACA,mC;AACA,E;AACA,+C;AACA,8B;AACA,K;AACA,E;AACA,6B;AACA,iC;;AAEA,8B;AACA,gC;;AAEA,4C;AACA,2B;AACA,K;;AAEA,6B;AACA,oC;AACA,oC;;AAEA,8B;AACA,mC;AACA,oC;;AAEA,+B;AACA,mC;AACA,oC;;AAEA,gC;AACA,mC;AACA,mC;;AAEA,8C;AACA,6B;AACA,K;;AAEA,8B;AACA,oC;AACA,mC;AACA,sC;;AAEA,+B;AACA,oC;AACA,mC;AACA,sC;;AAEA,gC;AACA,mC;AACA,mC;AACA,sC;;AAEA,iC;AACA,mC;AACA,mC;AACA,sC;;AAEA,kC;AACA,mC;AACA,mC;AACA,qC;;AAEA,yC;AACA,wB;AACA,K;AACA,qD;AACA,8C;;AAEA,8C;AACA,6B;AACA,K;AACA,iD;AACA,4C;;AAEA,sC;AACA,qB;AACA,K;AACA,6C;AACA,+B;AACA,+B;AACA,G;;AAEA,oE;AACA,6C;AACA,wB;AACA,K;;AAEA,a;;AAEA,kD;AACA,mC;AACA,oC;AACA,4B;AACA,uC;;AAEA,oD;AACA,mC;AACA,G;;AAEA,iD;AACA,6C;AACA,wB;AACA,K;;AAEA,a;AACA,c;;AAEA,Y;AACA,c;AACA,I;AACA,gD;;AAEA,Y;AACA,Y;AACA,I;AACA,gD;;AAEA,Y;AACA,c;AACA,I;AACA,a;AACA,Y;AACA,Y;AACA,M;AACA,qB;AACA,I;AACA,uE;;AAEA,Y;AACA,Y;AACA,I;AACA,a;AACA,Y;AACA,U;AACA,M;AACA,W;AACA,I;AACA,+D;AACA,qE;;AAEA,oC;;AAEA,yC;AACA,wB;AACA,K;AACA,Y;AACA,kB;AACA,iB;AACA,I;AACA,kD;AACA,Y;AACA,iB;AACA,I;AACA,gD;;AAEA,+C;AACA,8B;AACA,K;AACA,Y;AACA,c;AACA,I;AACA,0C;AACA,c;AACA,yC;AACA,mC;;AAEA,4C;AACA,2B;AACA,K;AACA,qC;AACA,mC;AACA,Y;AACA,iB;AACA,I;AACA,0C;AACA,Y;AACA,kB;AACA,iB;AACA,I;AACA,4C;AACA,Y;AACA,iB;AACA,I;AACA,0C;;AAEA,8C;AACA,6B;AACA,K;AACA,sC;AACA,oC;AACA,Y;AACA,iB;AACA,I;AACA,0C;AACA,Y;AACA,kB;AACA,iB;AACA,I;AACA,4C;AACA,Y;AACA,iB;AACA,I;AACA,0C;AACA,Y;AACA,kB;AACA,mB;AACA,I;AACA,4C;AACA,Y;AACA,kB;AACA,mB;AACA,I;AACA,0C;AACA,Y;AACA,mB;AACA,I;AACA,0C;AACA,Y;AACA,kB;AACA,kB;AACA,mB;AACA,I;AACA,8C;;AAEA,yC;AACA,wB;AACA,K;AACA,8B;AACA,6D;AACA,G;;AAEA,uD;AACA,6C;AACA,wB;AACA,K;;AAEA,sD;AACA,qD;AACA,yE;AACA,0D;AACA,gE;AACA,G;;AAEA,uD;AACA,Y;AACA,0B;;AAEA,4D;AACA,6B;AACA,+C;;AAEA,2B;AACA,yB;AACA,wB;AACA,I;;AAEA,4C;AACA,kE;AACA,sD;AACA,wC;AACA,0C;AACA,2C;AACA,I;;AAEA,8B;AACA,yC;AACA,oC;AACA,wB;AACA,K;AACA,2B;;AAEA,yC;AACA,yC;AACA,iC;AACA,wB;AACA,K;AACA,2B;;AAEA,gB;AACA,gD;AACA,oD;AACA,yC;AACA,qC;AACA,wB;AACA,K;AACA,2B;;AAEA,8C;AACA,yC;AACA,wB;AACA,K;AACA,2B;;AAEA,iC;AACA,8C;AACA,yC;AACA,wB;AACA,K;AACA,gE;AACA,yF;AACA,sC;AACA,yC;AACA,G;;AAEA,4D;AACA,iB;AACA,yB;AACA,2B;AACA,0B;AACA,0B;AACA,I;;AAEA,qD;;AAEA,gD;AACA,2D;AACA,yD;AACA,mD;AACA,G;;;;;;;;;;;;;;;;;;;AC9dA,gC;AACA,yB;AACA,sB;AACA,oB;AACA,K;AACA,E;;AAEA,4C;AACA,8B;AACA,4C;AACA,uC;AACA,E;;AAEA,+C;AACA,kC;AACA,2B;AACA,wB;AACA,sB;AACA,O;AACA,I;AACA,4C;;AAEA,8C;AACA,oC;AACA,E;;AAEA,+D;AACA,8B;AACA,4C;;AAEA,uC;AACA,gC;AACA,K;;AAEA,6B;AACA,+B;AACA,K;;AAEA,sC;;AAEA,0E;AACA,4E;AACA,G;;AAEA,kE;AACA,8B;AACA,4C;AACA,oD;AACA,Y;;AAEA,c;AACA,4C;AACA,0D;;AAEA,mB;AACA,8C;AACA,4C;AACA,6E;;AAEA,kB;AACA,4C;AACA,4C;AACA,2E;;AAEA,8B;AACA,sC;AACA,4C;AACA,yE;;AAEA,6B;AACA,6C;AACA,4C;AACA,gF;AACA,G;;AAEA,sE;AACA,8B;AACA,4C;;AAEA,iB;;AAEA,uC;AACA,wB;AACA,2B;AACA,K;AACA,K;;AAEA,6B;AACA,wB;AACA,0B;AACA,K;AACA,K;;AAEA,0C;;AAEA,2C;AACA,yB;AACA,gB;;AAEA,Y;AACA,mB;AACA,6B;AACA,O;AACA,K;AACA,I;;AAEA,qC;AACA,gC;AACA,I;;AAEA,oC;AACA,0B;AACA,I;;AAEA,4B;AACA,2B;AACA,I;;AAEA,2B;AACA,uB;AACA,K;;AAEA,+B;;AAEA,8H;AACA,G;;AAEA,kE;AACA,8B;AACA,4C;AACA,oD;;AAEA,iB;;AAEA,gB;AACA,sB;AACA,sB;AACA,c;AACA,M;;AAEA,sB;AACA,sB;AACA,K;AACA,I;;AAEA,wC;AACA,0F;AACA,8E;AACA,G;;AAEA,iE;AACA,8B;AACA,4C;AACA,oD;;AAEA,iB;;AAEA,gB;AACA,sB;AACA,sB;AACA,6B;AACA,M;;AAEA,sB;AACA,sB;AACA,K;AACA,I;;AAEA,yB;AACA,2F;AACA,G;;AAEA,4D;AACA,8B;AACA,4C;AACA,oD;AACA,iB;;AAEA,4B;AACA,wB;AACA,I;;AAEA,2B;AACA,uB;AACA,K;;AAEA,wB;AACA,qB;AACA,I;;AAEA,mC;AACA,qB;AACA,Y;AACA,W;AACA,Q;AACA,K;AACA,G;;AAEA,wD;AACA,8B;AACA,4C;AACA,oD;;AAEA,iB;AACA,6B;AACA,yB;AACA,I;;AAEA,c;;AAEA,4D;AACA,0D;AACA,yD;AACA,G;;AAEA,wE;AACA,iB;AACA,4B;AACA,uB;AACA,yB;AACA,M;;AAEA,yB;AACA,2B;AACA,M;;AAEA,wB;AACA,0B;AACA,M;;AAEA,yB;AACA,2B;AACA,K;AACA,K;;AAEA,qB;AACA,8B;;AAEA,8B;AACA,wC;;AAEA,6B;AACA,iD;;AAEA,sB;AACA,2D;AACA,G;;AAEA,mF;AACA,iB;AACA,uC;AACA,yB;AACA,2B;AACA,K;AACA,K;;AAEA,6B;AACA,yB;AACA,0B;AACA,K;AACA,K;;AAEA,gC;AACA,8B;AACA,yC;AACA,G;;;;;;;;;;;;;;;;;;;ACzQA,+E;AACA,qB;AACA,+E;AACA,sB;AACA,sB;AACA,0B;AACA,E;;AAEA,e;AACA,kB;AACA,qD;AACA,kF;AACA,oC;AACA,6B;AACA,I;AACA,mC;AACA,6B;AACA,G;AACA,I;AACA,kB;AACA,oD;AACA,qE;AACA,oC;AACA,6B;AACA,I;AACA,mC;AACA,6B;AACA,G;AACA,G;;AAEA,4B;AACA,0B;AACA,0B;;AAEA,+E;AACA,uB;AACA,+E;AACA,+C;AACA,sB;AACA,yB;;AAEA,kB;AACA,gB;AACA,gD;;AAEA,6B;AACA,2B;AACA,G;;AAEA,8C;AACA,sB;AACA,yB;;AAEA,kB;AACA,gB;;AAEA,+C;;AAEA,6B;AACA,2B;AACA,G;;AAEA,+E;AACA,Y;AACA,+E;AACA,sB;AACA,4D;AACA,wB;;AAEA,2B;;AAEA,6B;AACA,2B;;AAEA,4C;AACA,iC;AACA,uB;AACA,M;;AAEA,yB;AACA,sC;AACA,uD;AACA,mC;AACA,M;;AAEA,kC;AACA,mD;AACA,+B;AACA,M;;AAEA,6B;AACA,qE;;AAEA,yB;AACA,8B;AACA,8E;;AAEA,2B;AACA,kD;AACA,mE;AACA,+D;AACA,K;AACA,C;;AAEA,+E;AACA,Y;AACA,+E;AACA,sB;AACA,4D;AACA,wB;;AAEA,2B;;AAEA,6B;AACA,2B;;AAEA,4C;AACA,iC;AACA,uB;AACA,M;;AAEA,yB;AACA,sC;AACA,uD;AACA,mC;AACA,M;;AAEA,kC;AACA,mD;AACA,+B;AACA,M;;AAEA,6B;AACA,qE;;AAEA,yB;AACA,8B;AACA,8E;;AAEA,2B;AACA,kD;AACA,mE;AACA,+D;AACA,K;AACA,C;;;;;;;;;;;;;;;;;;;AChJA,sD;AACA,gD;;AAEA,kB;AACA,kB;AACA,I;;AAEA,8C;AACA,sE;AACA,G;;AAEA,oD;AACA,iD;AACA,iD;AACA,mE;AACA,qE;AACA,G;;AAEA,wD;AACA,6D;AACA,8D;AACA,8D;AACA,G;;AAEA,mD;AACA,wD;AACA,yD;AACA,yD;AACA,yD;AACA,G;;;;;;;;;;;;;;;;;;;AC7BA,2B;AACA,sB;AACA,C;;AAEA,kC;AACA,uB;AACA,gC;AACA,sB;AACA,I;AACA,oB;AACA,sB;AACA,G;AACA,G;;AAEA,sC;AACA,sB;AACA,Q;AACA,c;AACA,gB;AACA,kB;AACA,Y;AACA,Y;AACA,W;AACA,W;AACA,U;AACA,sB;AACA,oB;AACA,2C;AACA,G;;;;;;;;;;;;;;;;;;AC5BA,sB;AACA,kB;AACA,yC;;AAEA,+B;AACA,+B;AACA,qB;AACA,qB;AACA,K;AACA,E;AACA,0E;AACA,gB;AACA,C;;;AAGA,4D;AACA,8B;AACA,E;AACA,yB;AACA,uB;AACA,mD;AACA,8D;AACA,O;AACA,uB;AACA,0B;AACA,8B;AACA,yB;AACA,Q;AACA,+D;AACA,O;AACA,wB;AACA,K;AACA,E;AACA,2B;AACA,gD;AACA,K;AACA,E;AACA,iB;AACA,E;AACA,2B;AACA,8B;AACA,2B;AACA,8B;AACA,wB;AACA,E;AACA,mB;AACA,kC;AACA,qC;AACA,wC;AACA,E;AACA,mB;AACA,kC;AACA,qC;AACA,kC;AACA,6C;AACA,qC;AACA,E;AACA,+C;AACA,wC;;AAEA,qB;AACA,0C;;AAEA,mB;AACA,wC;AACA,G;;AAEA,6D;AACA,8B;AACA,E;AACA,0B;AACA,yB;AACA,uB;AACA,0B;AACA,+C;AACA,O;AACA,O;AACA,sB;AACA,K;AACA,E;AACA,iB;AACA,4B;AACA,E;AACA,mB;AACA,mC;AACA,G;;AAEA,mG;AACA,8B;AACA,E;AACA,yB;AACA,sB;AACA,sB;AACA,K;AACA,E;AACA,kC;AACA,0C;AACA,6B;AACA,mB;AACA,kC;AACA,G;AACA,E;AACA,2C;AACA,E;AACA,4C;AACA,iB;AACA,2B;AACA,E;AACA,gC;AACA,2B;AACA,gC;AACA,2B;AACA,gC;AACA,2B;AACA,gC;AACA,2B;AACA,G;;;;;;;;;;;;;;;;;;;ACpHA,iB;AACA,uB;AACA,wB;AACA,e;AACA,S;AACA,gB;AACA,O;;AAEA,+C;AACA,kC;AACA,2B;AACA,wB;AACA,sB;AACA,O;AACA,I;AACA,4C;;AAEA,8C;AACA,oC;AACA,E;;AAEA,wE;AACA,6B;AACA,wB;;AAEA,iB;AACA,+B;AACA,yB;AACA,I;;AAEA,kC;AACA,4B;AACA,I;;AAEA,oC;AACA,8B;AACA,I;;AAEA,a;AACA,iE;;AAEA,gB;AACA,uE;;AAEA,kB;AACA,2E;AACA,G;;AAEA,+D;AACA,wC;AACA,uB;AACA,qB;AACA,K;AACA,K;;AAEA,yC;AACA,iB;AACA,K;;AAEA,uC;;AAEA,Y;;AAEA,+B;AACA,sE;;AAEA,gC;AACA,mE;;AAEA,6B;AACA,uE;AACA,G;;AAEA,yE;AACA,6B;AACA,W;AACA,qG;AACA,W;AACA,0F;AACA,G;;;;;;;;;;;;;;;;;;;AC/EA,G;AACA,4E;AACA,+E;AACA,Q;AACA,G;AACA,0C;AACA,qC;AACA,iD;;AAEA,qC;AACA,iD;;AAEA,2C;AACA,sB;AACA,K;;AAEA,qE;AACA,E;AACA,gB;AACA,e;AACA,sE;;AAEA,gB;AACA,8E;;AAEA,e;AACA,iE;AACA,G","sourcesContent":["Router.configure({\n  autoRender: false,\n  autoStart: false,\n  supressWarnings: true \n});\n\n// setup some publications to test behaviour\nif (Meteor.isServer) {\n  Meteor.publish({\n    neverReady: function() {}\n  });\n}\n","/*\n * Tests for Route\n */\n\nvar paths = {\n  explicit: '/posts',\n  required: '/posts/:param',\n  multi: '/posts/:paramOne/:paramTwo',\n  optional: '/posts/:paramOne/:paramTwo?',\n  simpleOptional: '/:param?',\n  twoOptional: '/:paramOne?/:paramTwo?',\n  mixedOptional: '/:paramOne?/:paramTwo/:paramThree?',\n  wildcard: '/posts/*',\n  namedWildcard: '/posts/:file(*)',\n  regex: /^\\/commits\\/(\\d+)\\.\\.(\\d+)/\n};\n\nTinytest.add('Route - matching', function (test) {\n  var route = new Route(Router, 'explicit', {\n    path: paths.explicit\n  });\n  test.isTrue(route.test('/posts'));\n  test.isTrue(route.exec('/posts'));\n  test.isTrue(route.test('/posts/'));\n  test.isFalse(route.test('/posts/1'));\n  test.isNull(route.exec('/posts/1'));\n\n  route = new Route(Router, 'required', {\n    path: paths.required\n  });\n  test.isTrue(route.test('/posts/1'));\n  test.isTrue(route.exec('/posts/1'));\n  test.isTrue(route.test('/posts/1/'));\n  test.isTrue(route.exec('/posts/1/'));\n  test.isFalse(route.test('/posts/1/2'));\n  test.isNull(route.exec('/posts/1/2'));\n\n  route = new Route(Router, 'multi', {\n    path: paths.multi\n  });\n  test.isTrue(route.test('/posts/1/2'));\n  test.isTrue(route.exec('/posts/1/2'));\n  test.isTrue(route.test('/posts/1/2/'));\n  test.isTrue(route.exec('/posts/1/2/'));\n  test.isFalse(route.test('/posts/1/2/3'));\n  test.isNull(route.exec('/posts/1/2/3'));\n\n  route = new Route(Router, 'optional', {\n    path: paths.optional\n  });\n  test.isTrue(route.test('/posts/1'));\n  test.isTrue(route.exec('/posts/1'));\n  test.isTrue(route.test('/posts/1/2'));\n  test.isTrue(route.exec('/posts/1/2'));\n  test.isTrue(route.test('/posts/1/2/'));\n  test.isTrue(route.exec('/posts/1/2/'));\n  test.isFalse(route.test('/posts/1/2/3'));\n  test.isNull(route.exec('/posts/1/2/3'));\n\n  route = new Route(Router, 'simpleOptional', {\n    path: paths.simpleOptional\n  });\n  test.isTrue(route.test('/'));\n  test.isTrue(route.exec('/'));\n  test.isTrue(route.test('/1'));\n  test.isTrue(route.exec('/1'));\n  test.isTrue(route.test('/1/'));\n  test.isTrue(route.exec('/1/'));\n  test.isFalse(route.test('/1/2'));\n  test.isNull(route.exec('/1/2'));\n\n  route = new Route(Router, 'twoOptional', {\n    path: paths.twoOptional\n  });\n  test.isTrue(route.test('/'));\n  test.isTrue(route.exec('/'));\n  test.isTrue(route.test('/1'));\n  test.isTrue(route.exec('/1'));\n  test.isTrue(route.test('/1/'));\n  test.isTrue(route.exec('/1/'));\n  test.isTrue(route.test('/1/2'));\n  test.isTrue(route.exec('/1/2'));\n  test.isTrue(route.test('/1/2/'));\n  test.isTrue(route.exec('/1/2/'));\n  test.isFalse(route.test('/1/2/3'));\n  test.isNull(route.exec('/1/2/3'));\n\n  route = new Route(Router, 'mixedOptional', {\n    path: paths.mixedOptional\n  });\n  test.isFalse(route.test('/'));\n  test.isNull(route.exec('/'));\n  test.isTrue(route.test('/1'));\n  test.isTrue(route.exec('/1'));\n  test.isTrue(route.test('/1/'));\n  test.isTrue(route.exec('/1/'));\n  test.isTrue(route.test('/1/2'));\n  test.isTrue(route.exec('/1/2'));\n  test.isTrue(route.test('/1/2/'));\n  test.isTrue(route.exec('/1/2/'));\n  test.isTrue(route.test('/1/2/3'));\n  test.isTrue(route.exec('/1/2/3'));\n  test.isTrue(route.test('/1/2/3/'));\n  test.isTrue(route.exec('/1/2/3/'));\n  test.isFalse(route.test('/1/2/3/4'));\n  test.isNull(route.exec('/1/2/3/4'));\n\n  route = new Route(Router, 'wildcard', {\n    path: paths.wildcard\n  });\n  test.isTrue(route.test('/posts/1/2'));\n  test.isTrue(route.exec('/posts/1/2'));\n  test.isTrue(route.test('/posts/1/2/3'));\n  test.isTrue(route.exec('/posts/1/2/3'));\n  test.isTrue(route.test('/posts/1/2/3/4'));\n  test.isTrue(route.exec('/posts/1/2/3/4'));\n\n  route = new Route(Router, 'namedWildcard', {\n    path: paths.namedWildcard\n  });\n  test.isTrue(route.test('/posts/path/to/file'));\n  test.isTrue(route.exec('/posts/path/to/file'));\n\n  route = new Route(Router, 'regex', {\n    path: paths.regex\n  });\n  test.isTrue(route.test('/commits/123..456'));\n  test.isTrue(route.exec('/commits/123..456'));\n});\n\nTinytest.add('Route - params', function (test) {\n  var route = new Route(Router, 'explicit', {\n    path: paths.explicit\n  });\n\n  test.isNull(route.params());\n  test.isTrue(route.params('/posts') instanceof Array);\n\n  route = new Route(Router, 'required', {\n    path: paths.required\n  });\n\n  var params = route.params('/posts/1');\n  test.equal(params.param, \"1\");\n\n  route = new Route(Router, 'multi', {\n    path: paths.multi\n  });\n  params = route.params('/posts/1/2');\n  test.equal(params.paramOne, '1');\n  test.equal(params.paramTwo, '2');\n\n  route = new Route(Router, 'optional', {\n    path: paths.optional\n  });\n  params = route.params('/posts/1');\n  test.equal(params.paramOne, '1');\n  test.isUndefined(params.paramTwo);\n\n  params = route.params('/posts/1/2');\n  test.equal(params.paramOne, '1');\n  test.equal(params.paramTwo, '2');\n  \n  route = new Route(Router, 'simpleOptional', {\n    path: paths.simpleOptional\n  });\n  \n  params = route.params('/');\n  test.isUndefined(params.param);\n\n  params = route.params('/1');\n  test.equal(params.param, '1');\n\n  route = new Route(Router, 'twoOptional', {\n    path: paths.twoOptional\n  });\n\n  params = route.params('/');\n  test.isUndefined(params.paramOne);\n  test.isUndefined(params.paramTwo);\n\n  params = route.params('/1');\n  test.equal(params.paramOne, '1');\n  test.isUndefined(params.paramTwo);\n\n  params = route.params('/1/');\n  test.equal(params.paramOne, '1');\n  test.isUndefined(params.paramTwo);\n\n  params = route.params('/1/2');\n  test.equal(params.paramOne, '1');\n  test.equal(params.paramTwo, '2');\n\n  route = new Route(Router, 'mixedOptional', {\n    path: paths.mixedOptional\n  });\n\n  params = route.params('/1');\n  test.isUndefined(params.paramOne);\n  test.equal(params.paramTwo, '1');\n  test.isUndefined(params.paramThree);\n\n  params = route.params('/1/');\n  test.isUndefined(params.paramOne);\n  test.equal(params.paramTwo, '1');\n  test.isUndefined(params.paramThree);\n\n  params = route.params('/1/2');\n  test.equal(params.paramOne, '1');\n  test.equal(params.paramTwo, '2');\n  test.isUndefined(params.paramThree);\n\n  params = route.params('/1/2/');\n  test.equal(params.paramOne, '1');\n  test.equal(params.paramTwo, '2');\n  test.isUndefined(params.paramThree);\n\n  params = route.params('/1/2/3');\n  test.equal(params.paramOne, '1');\n  test.equal(params.paramTwo, '2');\n  test.equal(params.paramThree, '3');\n\n  route = new Route(Router, 'wildcard', {\n    path: paths.wildcard\n  });\n  params = route.params('/posts/some/wildcard/path');\n  test.equal(params[0], 'some/wildcard/path');\n\n  route = new Route(Router, 'namedWildcard', {\n    path: paths.namedWildcard\n  });\n  params = route.params('/posts/some/file/path');\n  test.equal(params.file, 'some/file/path');\n\n  route = new Route(Router, 'regex', {\n    path: paths.regex\n  });\n  params = route.params('/commits/123..456');\n  test.equal(params[0], '123');\n  test.equal(params[1], '456');\n});\n\nTinytest.add('Route - params with query and hash', function (test) {\n  var route = new Route(Router, 'optional', {\n    path: paths.optional\n  });\n\n  var params;\n\n  params = route.params('/posts/1?q=s#anchorTag');\n  test.equal(params.paramOne, '1');\n  test.isUndefined(params.paramTwo);\n  test.equal(params.q, 's');\n  test.equal(params.hash, 'anchorTag');\n\n  params = route.params('/posts/1/2?q=s#anchorTag');\n  test.equal(params.paramTwo, '2');\n});\n\nTinytest.add('Route - resolve', function (test) {\n  var route = new Route(Router, 'required', {\n    path: paths.required\n  });\n\n  var params;\n  var options;\n\n  params = {\n    param: '1'\n  };\n  test.equal(route.resolve(params), '/posts/1');\n\n  params = {\n    param: 1\n  };\n  test.equal(route.resolve(params), '/posts/1');\n\n  params = {\n    param: '1'\n  };\n  options = {\n    query: {\n      q: 's'\n    },\n    hash: 'anchorTag'\n  };\n  test.equal(route.resolve(params, options), '/posts/1?q=s#anchorTag');\n\n  params = {\n    param: 1\n  };\n  options = {\n    query: {\n      q: 2\n    },\n    hash: 3\n  };\n  test.equal(route.resolve(params, options), '/posts/1?q=2#3', \n    'Must be able to resolve integer-formatted (non-string) params');\n\n  test.equal(route.resolve(), null);\n\n  route = new Route(Router, 'optional', {\n    path: paths.optional\n  });\n  params = {\n    paramOne: 'a',\n    paramTwo: 'b'\n  };\n  test.equal(route.resolve(params), '/posts/a/b');\n  params = {\n    paramOne: 'a'\n  };\n  test.equal(route.resolve(params), '/posts/a');\n\n  route = new Route(Router, 'simpleOptional', {\n    path: paths.simpleOptional\n  });\n  params = {\n    param: 'a'\n  };\n  test.equal(route.resolve(params), '/a');\n  params = {};\n  test.equal(route.resolve(params), '/');\n  test.equal(route.resolve(), '/');\n\n  route = new Route(Router, 'twoOptional', {\n    path: paths.twoOptional\n  });\n  test.equal(route.resolve({}), '/');\n  test.equal(route.resolve(), '/');\n  params = {\n    paramOne: 'a'\n  };\n  test.equal(route.resolve(params), '/a');\n  params = {\n    paramOne: 'a',\n    paramTwo: 'b'\n  };\n  test.equal(route.resolve(params), '/a/b');\n  params = {\n    paramTwo: 'b'\n  };\n  test.equal(route.resolve(params), '/b');\n\n  route = new Route(Router, 'mixedOptional', {\n    path: paths.mixedOptional\n  });\n  test.equal(route.resolve({}), null);\n  test.equal(route.resolve(), null);\n  params = {\n    paramOne: 'a'\n  };\n  test.equal(route.resolve(params), null);\n  params = {\n    paramOne: 'a',\n    paramTwo: 'b'\n  };\n  test.equal(route.resolve(params), '/a/b');\n  params = {\n    paramTwo: 'b'\n  };\n  test.equal(route.resolve(params), '/b');\n  params = {\n    paramTwo: 'b',\n    paramThree: 'c'\n  };\n  test.equal(route.resolve(params), '/b/c');\n  params = {\n    paramOne: 'a',\n    paramThree: 'c'\n  };\n  test.equal(route.resolve(params), null);\n  params = {\n    paramThree: 'c'\n  };\n  test.equal(route.resolve(params), null);\n  params = {\n    paramOne: 'a',\n    paramTwo: 'b',\n    paramThree: 'c'\n  };\n  test.equal(route.resolve(params), '/a/b/c');\n\n  route = new Route(Router, 'wildcard', {\n    path: paths.wildcard\n  });\n  params = ['some/file/path'];\n  test.equal(route.resolve(params), '/posts/some/file/path');\n});\n\nTinytest.add('Route - normalizePath', function (test) {\n  var route = new Route(Router, 'explicit', {\n    path: paths.explicit\n  });\n\n  test.equal(route.normalizePath('/posts'), '/posts');\n  test.equal(route.normalizePath('posts'), '/posts');\n  test.equal(route.normalizePath(Meteor.absoluteUrl('posts')), '/posts');\n  test.equal(route.normalizePath('/posts?q=s'), '/posts');\n  test.equal(route.normalizePath('/posts#anchorTag'), '/posts');\n});\n\nTinytest.add('Route - newController', function (test) {\n  var route;\n  var root = Utils.global;\n\n  root.TestController = function (router, route, options)  {\n    if (arguments.length < 2)\n      throw new Error('Argument length check');\n\n    this.options = options;\n    this.router = router;\n    this.route = route; \n  };\n\n  var testGetController = function (route) {\n    var controller = route.newController('/test', {option: true});\n    test.isTrue(controller instanceof TestController);\n    test.equal(controller.route, route);\n    test.equal(controller.router, Router);\n    test.isTrue(controller.options.option);\n  };\n\n  // case 1: controller option\n  var route = new Route(Router, 'test', {\n    controller: root.TestController,\n    template: 'template'\n  });\n  testGetController(route);\n\n  // case 1a: controller option as string\n  var route = new Route(Router, 'test', {\n    controller: 'TestController',\n    template: 'template'\n  });\n  testGetController(route);\n\n  root.App = {};\n  root.App.TestController = root.TestController;\n  // case 1b: controller option as namespaced string\n  var route = new Route(Router, 'test', {\n    controller: 'App.TestController',\n    template: 'template'\n  });\n  testGetController(route);\n\n  // case 2: resolve controller intelligently \n  var route = new Route(Router, 'test', {\n    template: 'template'\n  });\n  testGetController(route);\n\n  // case 3: anonymous controller\n  // case 2: resolve controller intelligently \n  var route = new Route(Router, 'anon', {\n    template: 'template'\n  });\n  var controller = route.newController('/anon', {option: true});\n  test.isTrue(controller instanceof RouteController, 'Anonymous controller not created');\n  test.equal(controller.route, route);\n  test.isTrue(controller.options.option);\n});\n\nTinytest.add('Route - rewriteLegacyHooks', function (test) {\n  var options = {\n    load: function () {},\n    before: function () {},\n    after: function () {},\n    unload: function () {}\n  };\n\n  var route = new Route(Router, 'explicit', options);\n\n  test.equal(route.options.onRun, options.load);\n  test.equal(route.options.onBeforeAction, options.before);\n  test.equal(route.options.onAfterAction, options.after);\n  test.equal(route.options.onStop, options.unload);\n});\n","var createRouter = function () {\n  return new IronRouter({\n    autoRender: false,\n    autoStart: false\n  });\n};\n\nvar initController = function (C, options) {\n  var router = createRouter();\n  var route = new Route(router, 'test', {});\n  return new C(router, route, options);\n};\n\nvar createController = function (proto, opts) {\n  var createRouter = function () {\n    return new IronRouter({\n      autoRender: false,\n      autoStart: false\n    });\n  };\n  var route = new Route(Router, 'test', {});\n\n  var R = RouteController.extend(proto || {});\n  return new R(Router, route, opts);\n};\n\nTinytest.add('RouteController - inheritance', function (test) {\n  var Router = createRouter();\n  var route = new Route(Router, 'test', {});\n\n  var Parent = RouteController.extend({\n    parentMethod: function () {}\n  });\n\n  var Child = Parent.extend({\n    childMethod: function () {}\n  });\n\n  var inst = new Child(Router, route);\n\n  test.isTrue(_.isFunction(inst.childMethod), 'child method not defined');\n  test.isTrue(_.isFunction(inst.parentMethod), 'parent method not defined');\n});\n\nTinytest.add('RouteController - lookupProperty', function (test) {\n  var Router = createRouter();\n  var route = new Route(Router, 'test', {});\n  var inst = new RouteController(Router, route, {});\n  var value;\n\n  // undefined\n  value = inst.lookupProperty('myProperty');\n  test.isUndefined(value, 'property should be undefined');\n\n  // router options\n  Router.options.myProperty = 'myRouterValue';\n  value = inst.lookupProperty('myProperty');\n  test.equal(value, 'myRouterValue', 'property should be on router options');\n\n  // route options\n  route.options.myProperty = 'myRouteValue';\n  value = inst.lookupProperty('myProperty');\n  test.equal(value, 'myRouteValue', 'property should be on route options');\n\n  // route controller instance\n  inst.myProperty = 'myInstanceValue';\n  value = inst.lookupProperty('myProperty');\n  test.equal(value, 'myInstanceValue', 'property should be on instance');\n\n  // route controller options\n  inst.options.myProperty = 'myOptionsValue';\n  value = inst.lookupProperty('myProperty');\n  test.equal(value, 'myOptionsValue', 'property should be on instance options');\n});\n\nTinytest.add('RouteController - runHooks run order', function (test) {\n  var Router = createRouter();\n  var route = new Route(Router, 'test', {});\n\n  var calls = [];\n\n  var Parent = RouteController.extend({\n    onRun: function () {\n      calls.push('parent');\n    }\n  });\n\n  var Child = Parent.extend({\n    onRun: function () {\n      calls.push('child');\n    }\n  });\n\n  var inst = new Child(Router, route, {});\n\n  Router.getHooks = function (name, type) {\n    if (name !== 'onRun')\n      return [];\n\n    return [\n      function () {\n        calls.push('router');\n      }\n    ]\n  };\n\n  route.options.onRun = function () {\n    calls.push('route options');\n  };\n\n  inst.options.onRun = function () {\n    calls.push('options');\n  };\n\n  inst.onRun = function () {\n    calls.push('instance');\n  };\n\n  var more = [function () {\n    calls.push('more');\n  }];\n\n  inst.runHooks('onRun', more);\n\n  test.equal(calls, ['options', 'parent', 'child', 'instance', 'route options', 'router', 'more'], 'runHooks order is wrong');\n});\n\nTinytest.add('RouteController - runHooks pause', function (test) {\n  var Router = createRouter();\n  var route = new Route(Router, 'test', {});\n  var inst = new RouteController(Router, route, {});\n\n  var calls = [];\n\n  inst.onRun = [\n    function (pause) {\n      calls.push('1');\n      pause();\n    },\n\n    function (pause) {\n      calls.push('2');\n    }\n  ];\n\n  var isPaused = inst.runHooks('onRun');\n  test.equal(calls, ['1'], 'looks like a downstream hook ran even though we were paused');\n  test.isTrue(isPaused, \"looks like runHooks didn't return the paused value\");\n});\n\nTinytest.add('RouteController - runHooks stop', function (test) {\n  var Router = createRouter();\n  var route = new Route(Router, 'test', {});\n  var inst = new RouteController(Router, route, {});\n\n  var calls = [];\n\n  inst.onRun = [\n    function (pause) {\n      calls.push('1');\n      inst._stopController();\n    },\n\n    function (pause) {\n      calls.push('2');\n    }\n  ];\n\n  inst.runHooks('onRun');\n  test.equal(calls, ['1'], 'looks like a downstream hook ran even though we were stopped');\n});\n\nTinytest.add('RouteController - runHooks', function (test) {\n  var Router = createRouter();\n  var route = new Route(Router, 'test', {});\n  var inst = new RouteController(Router, route, {});\n  var calls = [];\n\n  inst.onRun = function () {\n    calls.push('onRun');\n  };\n\n  var more = [function () {\n    calls.push('more');\n  }];\n\n  var cb = function () {\n    calls.push('cb');\n  };\n\n  inst.runHooks('onRun', more, cb);\n  test.equal(calls, [\n    'onRun',\n    'more',\n    'cb'\n  ]);\n});\n\nTinytest.add('RouteController - stop', function (test) {\n  var Router = createRouter();\n  var route = new Route(Router, 'test', {});\n  var inst = new RouteController(Router, route, {});\n\n  var calls = [];\n  inst.onStop = function () {\n    calls.push('onStop');\n  };\n\n  inst.stop();\n\n  test.isFalse(inst.isRunning, 'isRunning should be false');\n  test.isTrue(inst.isStopped, 'isStopped should be true');\n  test.equal(calls, ['onStop'], 'stop hooks not called');\n});\n\nTinytest.add('RouteController - support legacy hooks', function (test) {\n  var calls = [];\n  var c = createController({\n    load: function () {\n      calls.push('load');\n    },\n\n    before: function () {\n      calls.push('before');\n    },\n\n    after: function () {\n      calls.push('after');\n    },\n\n    unload: function () {\n      calls.push('unload');\n    }\n  });\n\n  c.runHooks('onRun')\n  test.equal(calls, ['load']);\n\n  c.runHooks('onBeforeAction')\n  test.equal(calls, ['load', 'before']);\n\n  c.runHooks('onAfterAction')\n  test.equal(calls, ['load', 'before', 'after']);\n\n  c.runHooks('onStop')\n  test.equal(calls, ['load', 'before', 'after', 'unload']);\n});\n\nTinytest.add('RouteController - support legacy hook inheritance', function (test) {\n  var calls = [];\n  var Parent = RouteController.extend({\n    before: function () {\n      calls.push('parent');\n    }\n  });\n\n  var Child = Parent.extend({\n    before: function () {\n      calls.push('child');\n    }\n  });\n\n  var c = initController(Child);\n  c.runHooks('onBeforeAction')\n  test.equal(calls, ['parent', 'child']);\n});\n","/*****************************************************************************/\n/* Mocks and Stubs */\n/*****************************************************************************/\nvar controllerMock = {\n  run: function () {},\n  runHooks: function () {}\n};\n\nvar routes = [{\n  where: 'client',\n  test: function (path) { return path == 'client'; },\n  newController: function (path, options) { return EJSON.clone(controllerMock); },\n  path: function (params, options) {\n    return [params, options];\n  },\n  url: function (params, options) {\n    return [params, options];\n  }\n}, {\n  where: 'server',\n  test: function (path) { return path == 'server' },\n  newController: function () { return EJSON.clone(controllerMock); },\n  path: function (params, options) {\n    return [params, options];\n  },\n  url: function (params, options) {\n    return [params, options];\n  }\n}];\n\n// simulate the named routes\nroutes.client = routes[0];\nroutes.server = routes[1];\n\n/*****************************************************************************/\n/* Client and Server */\n/*****************************************************************************/\nTinytest.add('Router - path', function (test) {\n  var router = Router;\n  router.routes = routes;\n\n  var params = [];\n  var opts = {};\n  var res = router.path('client', params, opts);\n\n  test.equal(res[0], params);\n  test.equal(res[1], opts);\n});\n\nTinytest.add('Router - url', function (test) {\n  var router = Router;\n  router.routes = routes;\n\n  var params = [];\n  var opts = {};\n\n  var res = router.url('client', params, opts);\n\n  test.equal(res[0], params);\n  test.equal(res[1], opts);\n});\n\n/*****************************************************************************/\n/* Client */\n/*****************************************************************************/\nif (Meteor.isClient) {\n  Tinytest.add('Router - client dispatch', function (test) {\n    var router = Router;\n\n    router.routes = routes;\n\n    var runController = null;\n    var runCallback = null;\n\n    router.run = function (controller, cb) {\n      runController = controller;\n      runCallback = cb;\n    };\n\n    // 1. onRouteNotFound\n    var onRouteNotFoundCalled = false;\n    router.onRouteNotFound = function (path, options) {\n      onRouteNotFoundCalled = true;\n    };\n\n    var onUnhandledCalled = false;\n    router.onUnhandled = function (path, options) {\n      onUnhandledCalled = true;\n    };\n\n    router.dispatch('bogus');\n    test.isTrue(onRouteNotFoundCalled, 'onRouteNotFound not called');\n\n    // 2. where !== where\n    router.dispatch('server');\n    test.isTrue(onUnhandledCalled, 'onUnhandled not called for server route');\n\n    // 3. run method called\n    router.dispatch('client', {}, function () {});\n    test.isTrue(runController, 'run not called with a controller');\n    test.isTrue(runCallback, 'run not called with a callback');\n  });\n}\n\n/*****************************************************************************/\n/* Server */\n/*****************************************************************************/\nif (Meteor.isServer) {\n  Tinytest.add('Router - server dispatch', function (test) {\n    var router = Router;\n\n    router.routes = routes;\n\n    var runController = null;\n    var runCallback = null;\n\n    router.run = function (controller, cb) {\n      runController = controller;\n      runCallback = cb;\n    };\n\n    // 1. onRouteNotFound\n    var onRouteNotFoundCalled = false;\n    router.onRouteNotFound = function (path, options) {\n      onRouteNotFoundCalled = true;\n    };\n\n    var onUnhandledCalled = false;\n    router.onUnhandled = function (path, options) {\n      onUnhandledCalled = true;\n    };\n\n    router.dispatch('bogus');\n    test.isTrue(onRouteNotFoundCalled, 'onRouteNotFound not called');\n\n    // 2. where !== where\n    router.dispatch('client');\n    test.isTrue(onUnhandledCalled, 'onUnhandled not called for client route');\n\n    // 3. run method called\n    router.dispatch('server', {}, function () {});\n    test.isTrue(runController, 'run not called with a controller');\n    test.isTrue(runCallback, 'run not called with a callback');\n  });\n}\n","Tinytest.add('Utils - resolveValue', function (test) {\n  var global = (function () { return this; })();\n\n  global.outer = {\n    inner: 'value'\n  };\n\n  var res = Utils.resolveValue('outer.inner');\n  test.equal(res, 'value', 'unable to resolveValue on global object');\n});\n\nTinytest.add('Utils - capitalize', function (test) {\n  test.equal(Utils.capitalize('lower'), 'Lower');\n  test.equal(Utils.capitalize('Lower'), 'Lower');\n  test.equal(Utils.capitalize('lowerSomething'), 'LowerSomething');\n  test.equal(Utils.capitalize('lower-something'), 'Lower-something');\n});\n\nTinytest.add('Utils - upperCamelCase', function (test) {\n  test.equal(Utils.upperCamelCase('postsShow'), 'PostsShow');\n  test.equal(Utils.upperCamelCase('posts-show'), 'PostsShow');\n  test.equal(Utils.upperCamelCase('posts_show'), 'PostsShow');\n});\n\nTinytest.add('Utils - camelCase', function (test) {\n  test.equal(Utils.camelCase('PostsShow'), 'postsShow');\n  test.equal(Utils.camelCase('posts-show'), 'postsShow');\n  test.equal(Utils.camelCase('Posts-show'), 'postsShow');\n  test.equal(Utils.camelCase('posts_show'), 'postsShow');\n});\n","LocationMock = function() {\n  this._path = '/one';\n}\n\n_.extend(LocationMock.prototype, {\n  start: function() {},\n  set: function(path, options) {\n    this._path = path;\n  },\n  path: function() {\n    return this._path;\n  }\n});\n\n// XXX: probably record what this does\nUIMock = function() {}\n_.each([\n  'setRegion',\n  'clearRegion',\n  'getRegionKeys',\n  'getData',\n  'setData',\n  'render',\n  'insert',\n  'layout'\n], function (method) {\n  // nothing for now\n  UIMock.prototype[method] = function() {};\n});","// uiManager api tests\n// hot code reload\n// run (deps changed and current changed)\n\nvar mockedRouter = function() {\n  var router = new IronRouter({\n    autoStart: false,\n    autoRender: false\n  });\n  \n  router.configure({ location: new LocationMock, uiManager: new UIMock });\n  return router;\n}\n\n\nTinytest.add('ClientRouter - onRun hooks', function (test) {\n  var router = mockedRouter();\n  \n  router.map(function() {\n    this.route('one', {\n      onRun: function() { oneRunHookCalled += 1; },\n      onBeforeAction: function() { oneBeforeHookCalled += 1; }\n    });\n    this.route('two', {\n      onRun: function() { \n        twoRunHookCalled += 1;\n        router.go('one');\n      },\n      onBeforeAction: function() { twoBeforeHookCalled += 1; },\n    });\n    this.route('three');\n  });\n  \n  router.onRun(function() {\n    onRunHookCalledAt = router._location.path();\n  });\n  \n  router.start();\n  \n  var oneRunHookCalled = 0;\n  var oneBeforeHookCalled = 0;\n  var twoRunHookCalled = 0;\n  var twoBeforeHookCalled = 0;\n  var onRunHookCalledAt;\n  \n  router.go('one');\n  test.equal(oneRunHookCalled, 1);\n  test.equal(oneBeforeHookCalled, 1);\n  test.equal(onRunHookCalledAt, '/one');\n  \n  router.go('two');\n  test.equal(oneRunHookCalled, 2);\n  test.equal(oneBeforeHookCalled, 2);\n  test.equal(twoRunHookCalled, 1);\n  // show have redirected before this happens\n  test.equal(twoBeforeHookCalled, 0);\n  \n  // we are redirected to one, so this comes up\n  test.equal(onRunHookCalledAt, '/one');\n\n  router.go('three');\n  test.equal(onRunHookCalledAt, '/three');\n\n  router.go('one');\n  test.equal(onRunHookCalledAt, '/one');\n});\n\nTinytest.add('ClientRouter - onStop hooks', function (test) {\n  var router = mockedRouter();\n  \n  var stopCalledAt = null;\n  router.map(function() {\n    this.route('one', {\n      onStop: function() {\n        stopCalledAt = router._location.path();\n      }\n    });\n    this.route('two');\n  });\n  \n  router.start();\n  test.isNull(stopCalledAt);\n  \n  router.go('two');\n  test.equal(stopCalledAt, '/one');\n});\n\nTinytest.add('ClientRouter - calling same route twice does not write to history', function (test) {\n  var router = mockedRouter();\n  \n  router.map(function() {\n    this.route('one');\n    this.route('two');\n  });\n  \n  var location = new LocationMock;\n  var setCalled = 0, oldSet = location.set\n  location.set = function() {\n    setCalled += 1;\n    oldSet.apply(this, arguments);\n  }\n  \n  router.configure({ location: location });\n  \n  // starting the router doesn't set the url\n  router.start();\n  test.equal(setCalled, 0);\n  \n  router.go(router.path('one'));\n  test.equal(setCalled, 0);\n  router.go(router.path('two'));\n  test.equal(setCalled, 1);\n  router.go(router.path('one'));\n  test.equal(setCalled, 2);\n  router.go(router.path('one'));\n  test.equal(setCalled, 2);\n});\n","// lookupTemplate\n// lookupLayoutTemplate\n// lookupRegionTemplates\n// lookupWaitOn\n// render\n// renderRegions\n// wait\n\nvar createController = function (proto, opts) {\n  var createRouter = function () {\n    return new IronRouter({\n      autoRender: false,\n      autoStart: false\n    });\n  };\n  var route = new Route(Router, 'test', {});\n\n  var R = RouteController.extend(proto || {});\n  return new R(Router, route, opts);\n};\n\nTinytest.add('Client RouteController - Router UI API', function (test) {\n  var c = createController();\n  var router = c.router;\n\n  var calls = [];\n  router.layout = function () {\n    calls.push('layout');\n  };\n\n  router.setRegion = function () {\n    calls.push('setRegion');\n  };\n\n  router.clearRegion = function () {\n    calls.push('clearRegion');\n  };\n\n  c.layout();\n  test.equal(calls[0], 'layout', 'layout not proxied to router');\n\n  c.setRegion();\n  test.equal(calls[1], 'setRegion', 'setRegion not proxied to router');\n\n  c.clearRegion();\n  test.equal(calls[2], 'clearRegion', 'clearRegion not proxied to router');\n});\n\nTinytest.add('Client RouteController - data', function (test) {\n  var cWithDataFunc = createController({\n    data: function () {\n      return 'value';\n    }\n  });\n\n  var cWithDataValue = createController({\n    data: 'value'\n  });\n\n  var cWithNoData = createController();\n\n  var value;\n\n  value = cWithDataFunc.data();\n  test.equal(value, 'value', \"couldn't get value from data function\");\n\n  value = cWithDataValue.data();\n  test.equal(value, 'value', \"couldn't get value from data value\");\n\n  value = cWithNoData.data();\n  test.isNull(value, \"controller with no data should give null value\");\n});\n\nTinytest.add('Client RouteController - _run then stop', function (test) {\n  var c = createController();\n  c._run();\n  test.isFalse(c._computation.stopped, \"doesn't look like the controller's computation si running.\");\n  c.stop();\n  test.isTrue(c._computation.stopped, \"stop() didn't stop the controller's computation.\");\n});\n","/**\n * We'll assume the underlying deps-ext stuff works, so here we'll only test\n * that ready() method returns true when all ready functions in the list return\n * true.\n */\nTinytest.add('WaitList', function (test) {\n  var one = new ReactiveValue(false);\n  one.ready = function () { return this.get(); };\n\n  var two = new ReactiveValue(false);\n  two.ready = function () { return this.get(); };\n\n  var waitlist = new WaitList(function () {\n    return [one, two];\n  });\n\n  test.isFalse(waitlist.ready(), \"waitlist should not be ready yet\");\n  \n  one.set(true);\n  Deps.flush();\n  test.isFalse(waitlist.ready(), \"waitlist still shouldn't be ready\");\n\n  two.set(true);\n  test.isTrue(waitlist.ready(), \"waitlist should be ready even before flush\");\n\n  Deps.flush();\n  test.isTrue(waitlist.ready(), \"waitlist should be ready now!\");\n});\n"]}