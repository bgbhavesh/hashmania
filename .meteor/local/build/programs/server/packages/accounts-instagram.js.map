{"version":3,"file":"/packages/accounts-instagram.js","sources":["accounts-instagram/lib/accounts_instagram.js","accounts-instagram/lib/instagram_server.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,4C;;AAEA,sB;AACA,6D;AACA,6C;AACA,0D;AACA,+B;AACA,2B;AACA,S;;AAEA,0G;AACA,gF;AACA,M;AACA,Q;AACA,mC;AACA,gD;AACA,wB;AACA,oC;AACA,2C;AACA,yC;AACA,S;AACA,O;AACA,C;;;;;;;;;;;;;;;;;;;ACtBA,e;AACA,6D;;AAEA,8C;AACA,4C;AACA,gB;AACA,gB;AACA,uB;AACA,iC;AACA,+C;AACA,4C;AACA,U;;AAEA,kD;;AAEA,qC;AACA,kC;;;;AAIA,Y;AACA,iC;AACA,kB;AACA,sB;AACA,8C;AACA,uD;AACA,gD;AACA,a;AACA,S;AACA,M;AACA,G;;AAEA,gC;AACA,gB;AACA,4C;AACA,yC;AACA,qF;AACA,gB;AACA,6E;;AAEA,sB;;AAEA,qB;AACA,kC;AACA,kE;AACA,6B;AACA,uD;AACA,yD;AACA,gE;AACA,kG;AACA,4C;AACA,Y;AACA,Q;AACA,Y;AACA,wC;AACA,wE;AACA,mC;AACA,gE;AACA,oE;AACA,gG;AACA,wG;AACA,kD;AACA,kB;AACA,qC;AACA,qE;AACA,gC;AACA,0C;AACA,4C;AACA,0G;AACA,qG;AACA,+C;AACA,mB;AACA,Q;AACA,0D;AACA,2B;AACA,2C;AACA,oD;AACA,+F;AACA,6B;AACA,0B;AACA,E;;AAEA,0D;AACA,mD;AACA,E","sourcesContent":["Accounts.oauth.registerService('instagram');\n\nif (Meteor.isClient) {\n    Meteor.loginWithInstagram = function(options, callback) {\n        // support a callback without options\n        if (! callback && typeof options === \"function\") {\n            callback = options;\n            options = null;\n        }\n\n        var credentialRequestCompleteCallback = Accounts.oauth.credentialRequestCompleteHandler(callback);\n        Instagram.requestCredential(options, credentialRequestCompleteCallback);\n    };\n} else {\n    Accounts.addAutopublishFields({\n        forLoggedInUser: ['services.instagram'],\n        forOtherUsers: [\n            'services.instagram.id',\n            'services.instagram.firstName',\n            'services.instagram.lastName'\n        ]\n    });\n}\n","Instagram = {};\nOauth.registerService('instagram', 2, null, function(query) {\n\n    var response    = getTokenResponse(query);\n    var accessToken = response.access_token;\n                \n                \n    var serviceData = {\n            id: response.user.id,\n            accessToken: response.access_token,\n            username: response.user.username\n        };\n\n    var whiteListed = ['first_name', 'last_name'];\n\n    var fields = _.pick(whiteListed);\n    _.extend(serviceData, fields);\n\n\n\n    return {\n        serviceData: serviceData,\n        options: {\n            profile: {\n                name: response.user.full_name,\n                picture: response.user.profile_picture,\n                username: response.user.username\n            }\n        }\n    };\n});\n\n// returns an object containing:\n// - accessToken\n// - expiresIn: lifetime of token in seconds\nvar getTokenResponse = function (query) {\n    var config = ServiceConfiguration.configurations.findOne({service: 'instagram'});\n    if (!config)\n        throw new ServiceConfiguration.ConfigError(\"Service not configured\");\n\n    var result = null;\n\n    // if(DebugFace){\n        result = Meteor.http.post(\n        \"https://api.instagram.com/oauth/access_token\", {params: {\n            code: query.code,\n            client_id: Meteor.settings.public.clientid,\n            client_secret: Meteor.settings.public.secret,\n            redirect_uri: Meteor.settings.public.redirectServer,\n            //apparently instagram won't send a callback with just ?close, this is why close=close\n            grant_type: 'authorization_code'\n        }});\n    // }\n    // else{\n    //     // result = Meteor.http.post(\n    //     // \"https://api.instagram.com/oauth/access_token\", {params: {\n    //     //     code: query.code,\n    //     //     client_id: \"6d5802dccf124f559cf44f0cb03f2b76\",\n    //     //     client_secret: \"0c899fa82df747eaa385d9389f31c98c\",\n    //     //     redirect_uri: \"http://meteor.nicolsondsouza.com/_oauth/instagram?close=close\",\n    //     //     //apparently instagram won't send a callback with just ?close, this is why close=close\n    //     //     grant_type: 'authorization_code'\n    //     // }});\n    //     result = Meteor.http.post(\n    //     \"https://api.instagram.com/oauth/access_token\", {params: {\n    //         code: query.code,\n    //         client_id: config.clientId,\n    //         client_secret: config.secret,\n    //         redirect_uri: Meteor.absoluteUrl(\"_oauth/instagram?close=close\", {replaceLocalhost: true}),\n    //         //apparently instagram won't send a callback with just ?close, this is why close=close\n    //         grant_type: 'authorization_code'\n    //     }});    \n    // }\n    if (result.error) // if the http response was an error\n        throw result.error;\n    if (typeof result.content === \"string\")\n        result.content = JSON.parse(result.content);\n    if (result.content.error) // if the http response was a json object with an error attribute\n        throw result.content;\n    return result.content;\n};\n\nInstagram.retrieveCredential = function(credentialToken) {\n  return Oauth.retrieveCredential(credentialToken);\n};\n"]}