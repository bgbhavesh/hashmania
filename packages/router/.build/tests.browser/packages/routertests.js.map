{"version":3,"file":"/packages/router:tests.js","sources":["router/tests/router_client_tests.js","router/tests/router_common_tests.js"],"names":[],"mappings":";;;;;;;;AAAA,4C;AACA,+B;AACA,qB;AACA,kB;AACA,8B;AACA,4B;AACA,mB;AACA,K;AACA,K;AACA,qD;AACA,kC;AACA,kB;AACA,K;AACA,E;AACA,yC;AACA,E;AACA,2B;AACA,0C;AACA,E;AACA,6B;AACA,0C;AACA,qC;AACA,E;AACA,8B;AACA,2C;AACA,yC;AACA,G;;AAEA,kD;AACA,yB;AACA,+B;AACA,qB;AACA,kB;AACA,kB;AACA,0B;AACA,+B;AACA,yC;AACA,mB;AACA,K;AACA,I;AACA,E;AACA,6B;AACA,yB;AACA,wB;AACA,K;AACA,E;AACA,gC;AACA,E;AACA,0B;AACA,gB;AACA,gC;AACA,E;AACA,0B;AACA,gB;AACA,gC;AACA,E;AACA,kD;AACA,4B;AACA,gB;AACA,gC;AACA,G;;AAEA,iD;AACA,+B;AACA,qB;AACA,kB;AACA,kB;AACA,iB;AACA,I;AACA,E;AACA,yB;AACA,8D;AACA,kD;AACA,I;AACA,wD;AACA,qE;AACA,E;AACA,2B;AACA,qD;AACA,E;AACA,2B;AACA,oD;AACA,E;AACA,2B;AACA,0C;AACA,G;;AAEA,iE;AACA,+B;AACA,mC;AACA,E;AACA,yB;AACA,sC;AACA,0C;AACA,gC;AACA,c;AACA,oB;AACA,O;AACA,K;AACA,K;AACA,yC;AACA,E;AACA,sC;AACA,iB;AACA,2B;AACA,0C;AACA,E;AACA,sC;AACA,iB;AACA,qD;AACA,G;;AAEA,2D;AACA,+B;AACA,4C;AACA,E;AACA,4D;AACA,uE;AACA,E;AACA,sC;AACA,iB;AACA,4C;AACA,G;;AAEA,kE;AACA,+B;AACA,qB;AACA,uB;AACA,8C;AACA,+E;AACA,2C;AACA,K;AACA,E;AACA,e;AACA,4B;AACA,iB;AACA,4C;AACA,E;AACA,0B;AACA,0B;AACA,8B;AACA,I;AACA,E;AACA,0B;AACA,4B;AACA,iB;AACA,4C;AACA,0C;AACA,E;AACA,0B;AACA,8B;AACA,K;AACA,oD;AACA,6B;AACA,iB;AACA,4C;AACA,G;;AAEA,sD;AACA,2B;AACA,E;AACA,+B;AACA,yC;AACA,4C;AACA,wB;AACA,G;AACA,E;AACA,kC;AACA,8B;AACA,iC;AACA,G;;AAEA,gE;AACA,2B;AACA,E;AACA,+B;AACA,E;AACA,4C;AACA,mE;AACA,G;;AAEA,8B;AACA,iB;AACA,4C;AACA,E;AACA,4C;AACA,oD;AACA,c;AACA,G;;AAEA,8B;AACA,4C;AACA,G;;;;;;;;;;;;;;;;;;AChMA,6C;AACA,qD;AACA,E;AACA,kB;AACA,0D;AACA,8B;AACA,E;AACA,c;AACA,0D;AACA,yB;AACA,E;AACA,4D;AACA,qD;AACA,G","sourcesContent":["Tinytest.add(\"Router page\", function(test) {\n  Meteor.Router.resetFilters();\n  Meteor.Router.add({\n    '/foo': 'foo',\n    '/bar/:id': function(id) {\n      Session.set('id', id);\n      return 'bar';\n    }\n  });\n  Meteor.Router.add(/page\\/(\\d+)/, function(number) {\n    Session.set('pageNo', number);\n    return 'page';\n  });\n  \n  test.equal(Meteor.Router.page(), null);\n  \n  Meteor.Router.to('/foo');\n  test.equal(Meteor.Router.page(), 'foo');\n  \n  Meteor.Router.to('/bar/1');\n  test.equal(Meteor.Router.page(), 'bar');\n  test.equal(Session.get('id'), '1');\n  \n  Meteor.Router.to('/page/7');\n  test.equal(Meteor.Router.page(), 'page');\n  test.equal(Session.get('pageNo'), '7');\n});\n\nTinytest.add(\"Router reactivity\", function(test) {\n  var context_called = 0;\n  Meteor.Router.resetFilters();\n  Meteor.Router.add({\n    '/foo': 'foo',\n    '/bar': 'bar',\n    '/bar/2': function() {\n      // do something unrelated\n      Session.set('router-test-page', 2);\n      return 'bar';\n    }\n  })\n  \n  Meteor.autorun(function() {\n    Meteor.Router.page();\n    context_called += 1;\n  });\n  \n  test.equal(context_called, 1);\n  \n  Meteor.Router.to('/foo')\n  Meteor.flush()\n  test.equal(context_called, 2);\n  \n  Meteor.Router.to('/bar')\n  Meteor.flush()\n  test.equal(context_called, 3);\n  \n  // returns 'bar' to shouldn't trigger reactivity\n  Meteor.Router.to('/bar/2')\n  Meteor.flush()\n  test.equal(context_called, 3);\n});\n\nTinytest.add(\"Router filtering\", function(test) {\n  Meteor.Router.resetFilters();\n  Meteor.Router.add({\n    '/foo': 'foo',\n    '/bar': 'bar',\n    '/baz': 'baz'\n  })\n  \n  Meteor.Router.filters({\n    'something_else': function() { return 'something_else'; },\n    'third': function() { return 'a third thing' }\n  })\n  Meteor.Router.filter('something_else', {only: 'foo'});\n  Meteor.Router.filter('third', {except: ['something_else', 'baz']});\n  \n  Meteor.Router.to('/foo');\n  test.equal(Meteor.Router.page(), 'something_else');\n  \n  Meteor.Router.to('/bar');\n  test.equal(Meteor.Router.page(), 'a third thing');\n  \n  Meteor.Router.to('/baz');\n  test.equal(Meteor.Router.page(), 'baz');\n});\n\nTinytest.add(\"FilteredRouter filter reactivity\", function(test) {\n  Meteor.Router.resetFilters();\n  Meteor.Router.add('/foo', 'foo');\n  \n  Meteor.Router.filters({\n    'something_else': function(page) {\n      if (Session.get('something_else')) {\n        return 'something_else';\n      } else {\n        return page;\n      }\n    }\n  });\n  Meteor.Router.filter('something_else');\n  \n  Session.set('something_else', null);\n  Meteor.flush();\n  Meteor.Router.to('/foo');\n  test.equal(Meteor.Router.page(), 'foo');\n  \n  Session.set('something_else', true);\n  Meteor.flush();\n  test.equal(Meteor.Router.page(), 'something_else');\n});\n\nTinytest.add(\"Router named route helpers\", function(test) {\n  Meteor.Router.resetFilters();\n  Meteor.Router.add('/named/:arg', 'named');\n  \n  test.equal(Meteor.Router.namedPath({arg: 7}), '/named/7');\n  test.equal(Meteor.Router.namedUrl(7), Meteor.absoluteUrl('named/7'));\n  \n  Meteor.Router.to('named', {arg: 7});\n  Meteor.flush();\n  test.equal(Meteor.Router.page(), 'named');\n});\n\nTinytest.add(\"Router different argument formats\", function(test) {\n  Meteor.Router.resetFilters();\n  Meteor.Router.add({\n    '/route1': 'page1',\n    '/route2': function() { return 'page2'; },\n    '/route3': {to: 'page3', and: function() { Session.set('foo', 'page3'); }},\n    '/route4': {to: 'page4', as: 'route4'},\n  });\n  \n  // simple one\n  Meteor.Router.to('page1');\n  Meteor.flush();\n  test.equal(Meteor.Router.page(), 'page1');\n  \n  // no named route exists\n  test.throws(function() {\n    Meteor.Router.to('page2');\n  })\n  \n  // slightly more complex\n  Meteor.Router.to('page3');\n  Meteor.flush();\n  test.equal(Meteor.Router.page(), 'page3');\n  test.equal(Session.get('foo'), 'page3');\n  \n  test.throws(function() {\n    Meteor.Router.to('page4');\n  });\n  test.equal(Meteor.Router.route4Path(), '/route4');\n  Meteor.Router.to('route4');\n  Meteor.flush();\n  test.equal(Meteor.Router.page(), 'page4');\n});\n\nTinytest.add(\"Router before routing\", function(test) {\n  var beforeCalled = false;\n  \n  Meteor.Router.resetFilters();\n  Meteor.Router.add('/before', 'before');\n  Meteor.Router.beforeRouting = function() {\n    beforeCalled = true;\n  }\n  \n  test.equal(beforeCalled, false);\n  Meteor.Router.to('/before');\n  test.equal(beforeCalled, true);\n});\n\nTinytest.add(\"Router before routing interrupt\", function(test) {\n  var beforeCalled = false;\n  \n  Meteor.Router.resetFilters();\n  \n  Meteor.Router.beforeRouting = function() {\n\t// a method (i.e. returns undefined) should not interrupt routing \n  }\n\n  Meteor.Router.to('/route1');\n  Meteor.flush();\n  test.equal(Meteor.Router.page(), 'page1');\n  \n  Meteor.Router.beforeRouting = function() {\n\t// returning false should interrupt (block) routing\n\treturn false;\n  }\n\n  Meteor.Router.to('/route2');\n  test.equal(Meteor.Router.page(), 'page1');\n});","Tinytest.add(\"Route basics\", function(test) {\n  var route = new Meteor.Router.Route('/posts/:_id');\n  \n  var params = {};\n  test.equal(route.match('/posts/7', null, params), true);\n  test.equal(params._id, '7');\n  \n  params = {};\n  test.equal(route.match('/posts/', null, params), false);\n  test.equal(params, {});\n  \n  test.equal(route.pathWithContext({_id: 10}), '/posts/10');\n  test.equal(route.pathWithContext(10), '/posts/10');\n});"]}