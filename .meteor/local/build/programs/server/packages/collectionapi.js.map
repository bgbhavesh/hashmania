{"version":3,"file":"/packages/collectionapi.js","sources":["collectionapi/collectionapi.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA,mC;AACA,kB;;AAEA,0B;AACA,iC;AACA,iD;AACA,sC;AACA,yB;AACA,kB;AACA,6B;AACA,sB;AACA,sB;AACA,qB;AACA,0B;AACA,yB;AACA,qC;AACA,sC;AACA,I;AACA,wC;AACA,E;;AAEA,6E;AACA,kB;;AAEA,6B;AACA,6B;AACA,2B;AACA,0B;AACA,I;AACA,iD;AACA,E;;AAEA,4C;AACA,kB;AACA,sC;;AAEA,yD;;AAEA,yC;AACA,2C;AACA,0B;AACA,wC;AACA,iC;;AAEA,qB;AACA,0D;AACA,2D;AACA,Q;AACA,Y;AACA,yB;AACA,uC;AACA,K;;AAEA,4D;AACA,0I;AACA,8E;AACA,mM;AACA,U;;AAEA,qE;;AAEA,yD;AACA,2D;AACA,e;AACA,e;AACA,O;AACA,+B;AACA,2D;AACA,e;AACA,O;;AAEA,yE;AACA,G;AACA,E;;AAEA,oE;AACA,kB;AACA,2H;AACA,E;;AAEA,uE;AACA,kB;;AAEA,wB;AACA,0B;AACA,4B;;AAEA,gE;;AAEA,wE;AACA,iL;;AAEA,kB;AACA,mF;AACA,kE;AACA,U;AACA,kE;AACA,G;;AAEA,uB;AACA,mC;AACA,gC;AACA,I;;AAEA,6K;;AAEA,8B;AACA,oE;AACA,G;;AAEA,iC;AACA,iE;AACA,G;;AAEA,+B;AACA,E;;AAEA,qE;AACA,kB;AACA,6E;;AAEA,sC;AACA,yD;AACA,kE;AACA,G;;AAEA,gC;AACA,uC;AACA,qE;AACA,G;;AAEA,c;AACA,E;;AAEA,sE;AACA,kB;;AAEA,0D;AACA,wC;AACA,G;;AAEA,iC;AACA,e;AACA,gC;AACA,gB;AACA,iC;AACA,e;AACA,gC;AACA,kB;AACA,mC;AACA,Y;AACA,0C;AACA,G;AACA,E;;AAEA,oF;AACA,kB;AACA,6E;;AAEA,uD;AACA,6D;AACA,G;;AAEA,c;AACA,E;;AAEA,8E;AACA,kB;AACA,6E;AACA,E;AACA,6I;AACA,2E;AACA,G;AACA,E;AACA,c;AACA,C;;AAEA,iF;AACA,kB;;AAEA,kC;;AAEA,S;AACA,uC;AACA,2K;;AAEA,uB;AACA,kD;AACA,6B;AACA,S;AACA,M;AACA,kF;AACA,6B;AACA,2G;AACA,S;AACA,+E;AACA,O;AACA,M;AACA,mC;;AAEA,iC;AACA,4D;AACA,O;;AAEA,uD;;AAEA,iB;AACA,kD;AACA,K;;AAEA,W;;AAEA,E;;AAEA,mE;AACA,kB;;AAEA,yC;AACA,iD;AACA,G;;AAEA,uB;;AAEA,4C;AACA,oC;AACA,K;;AAEA,sC;AACA,oC;AACA,W;AACA,0C;AACA,Q;AACA,gJ;AACA,sE;AACA,S;AACA,4E;AACA,mB;AACA,oD;AACA,O;AACA,gD;AACA,a;AACA,K;;AAEA,E;;AAEA,sE;AACA,kB;;AAEA,yC;AACA,iD;AACA,G;;AAEA,kC;AACA,e;AACA,4I;AACA,uE;AACA,O;AACA,qE;AACA,iB;AACA,kD;AACA,K;AACA,gC;AACA,W;AACA,E;;AAEA,oE;AACA,kB;AACA,uB;;AAEA,4C;AACA,oC;AACA,K;;AAEA,sC;AACA,oC;AACA,W;AACA,0C;AACA,Q;AACA,gD;AACA,uE;AACA,S;AACA,6E;AACA,mB;AACA,oD;AACA,O;AACA,0F;AACA,a;AACA,K;AACA,E;;AAEA,uE;AACA,kB;AACA,gC;AACA,E;;AAEA,4E;AACA,kB;AACA,gC;AACA,E;;AAEA,0E;AACA,kB;AACA,8B;AACA,E;;AAEA,6E;AACA,kB;AACA,8B;AACA,E;;AAEA,iF;AACA,kB;AACA,sE;AACA,E;;AAEA,6E;AACA,kB;AACA,sE;AACA,E;;AAEA,4E;AACA,kB;AACA,sE;AACA,E;;AAEA,wF;AACA,kB;AACA,oE;AACA,E;;AAEA,qF;AACA,kB;AACA,yC;AACA,8E;AACA,+D;AACA,6B;AACA,uB;AACA,E","sourcesContent":["CollectionAPI = function(options) {\n  var self = this;\n\n  self.version = '0.1.15';\n  self._url = Npm.require('url');\n  self._querystring = Npm.require('querystring');\n  self._fiber = Npm.require('fibers');\n  self._collections = {};\n  self.options = {\n    apiPath: 'collectionapi',\n    standAlone: false,\n    sslEnabled: false,\n    listenPort: 3005,\n    listenHost: undefined,\n    authToken: undefined,\n    privateKeyFile: 'privatekey.pem',\n    certificateFile: 'certificate.pem'\n  };\n  _.extend(self.options, options || {});\n};\n\nCollectionAPI.prototype.addCollection = function(collection, path, options) {\n  var self = this;\n\n  var collectionOptions = {};\n  collectionOptions[path] = {\n    collection: collection,\n    options: options || {}\n  };\n  _.extend(self._collections, collectionOptions);\n};\n\nCollectionAPI.prototype.start = function() {\n  var self = this;\n  var httpServer, httpOptions, scheme;\n\n  var startupMessage = 'Collection API v' + self.version;\n\n  if (self.options.standAlone === true) {\n    if (self.options.sslEnabled === true) {\n      scheme = 'https://';\n      httpServer = Npm.require('https');\n      var fs = Npm.require('fs');\n\n      httpOptions = {\n        key: fs.readFileSync(self.options.privateKeyFile),\n        cert: fs.readFileSync(self.options.certificateFile)\n      };\n    } else {\n      scheme = 'http://';\n      httpServer = Npm.require('http');\n    }\n\n    self._httpServer = httpServer.createServer(httpOptions);\n    self._httpServer.addListener('request', function(request, response) { new CollectionAPI._requestListener(self, request, response); });\n    self._httpServer.listen(self.options.listenPort, self.options.listenHost);\n    console.log(startupMessage + ' running as a stand-alone server on ' +  scheme + (self.options.listenHost || 'localhost') + ':' + self.options.listenPort + '/' + (self.options.apiPath || ''));\n  } else {\n\n    RoutePolicy.declare('/' + this.options.apiPath + '/', 'network');\n\n    WebApp.connectHandlers.use(function(req, res, next) {\n      if (req.url.split('/')[1] !== self.options.apiPath) {\n        next();\n        return;\n      }\n      self._fiber(function () {\n        new CollectionAPI._requestListener(self, req, res);\n      }).run();\n    });\n\n    console.log(startupMessage + ' running at /' + this.options.apiPath);\n  }\n};\n\nCollectionAPI.prototype._collectionOptions = function(requestPath) {\n  var self = this;\n  return self._collections[requestPath.collectionPath] ? self._collections[requestPath.collectionPath].options : undefined;\n};\n\nCollectionAPI._requestListener = function (server, request, response) {\n  var self = this;\n\n  self._server = server;\n  self._request = request;\n  self._response = response;\n\n  self._requestUrl = self._server._url.parse(self._request.url);\n\n  // Check for the X-Auth-Token header or auth-token in the query string\n  self._requestAuthToken = self._request.headers['x-auth-token'] ? self._request.headers['x-auth-token'] : self._server._querystring.parse(self._requestUrl.query)['auth-token'];\n\n  var requestPath;\n  if (self._server.options.standAlone === true && ! self._server.options.apiPath) {\n    requestPath = self._requestUrl.pathname.split('/').slice(1,3);\n  } else {\n    requestPath = self._requestUrl.pathname.split('/').slice(2,4);\n  }\n\n  self._requestPath = {\n    collectionPath: requestPath[0],\n    collectionId: requestPath[1]\n  };\n\n  self._requestCollection = self._server._collections[self._requestPath.collectionPath] ? self._server._collections[self._requestPath.collectionPath].collection : undefined;\n\n  if (!self._authenticate()) {\n    return self._unauthorizedResponse('Invalid/Missing Auth Token');\n  }\n\n  if (!self._requestCollection) {\n    return self._notFoundResponse('Collection Object Not Found');\n  }\n\n  return self._handleRequest();\n};\n\nCollectionAPI._requestListener.prototype._authenticate = function() {\n  var self = this;\n  var collectionOptions = self._server._collectionOptions(self._requestPath);\n\n  // Check the collection's auth token\n  if (collectionOptions && collectionOptions.authToken) {\n    return self._requestAuthToken === collectionOptions.authToken;\n  }\n\n  // Check the global auth token\n  if (self._server.options.authToken) {\n    return self._requestAuthToken === self._server.options.authToken;\n  }\n\n  return true;\n};\n\nCollectionAPI._requestListener.prototype._handleRequest = function() {\n  var self = this;\n\n  if (!self._requestMethodAllowed(self._request.method)) {\n    return self._notSupportedResponse();\n  }\n\n  switch (self._request.method) {\n    case 'GET':\n      return self._getRequest();\n    case 'POST':\n      return self._postRequest();\n    case 'PUT':\n      return self._putRequest();\n    case 'DELETE':\n      return self._deleteRequest();\n    default:\n      return self._notSupportedResponse();\n  }\n};\n\nCollectionAPI._requestListener.prototype._requestMethodAllowed = function (method) {\n  var self = this;\n  var collectionOptions = self._server._collectionOptions(self._requestPath);\n\n  if (collectionOptions && collectionOptions.methods) {\n    return _.indexOf(collectionOptions.methods, method) >= 0;\n  }\n\n  return true;\n};\n\nCollectionAPI._requestListener.prototype._beforeHandling = function (method) {\n  var self = this;\n  var collectionOptions = self._server._collectionOptions(self._requestPath);\n  \n  if (collectionOptions && collectionOptions.before && collectionOptions.before[method] &&  _.isFunction(collectionOptions.before[method])) {\n    return collectionOptions.before[method].apply(self, _.rest(arguments));\n  }\n  \n  return true;\n}\n\nCollectionAPI._requestListener.prototype._getRequest = function(fromPutRequest) {\n  var self = this;\n\n  self._server._fiber(function() {\n\n    try {\n      // TODO: A better way to do this?\n      var collection_result = self._requestPath.collectionId !== undefined ? self._requestCollection.find(self._requestPath.collectionId) : self._requestCollection.find();\n\n      var records = [];\n      collection_result.forEach(function(record) {\n        records.push(record);\n      });\n      \n      if(!self._beforeHandling('GET',  self._requestPath.collectionId, records)) {\n        if (fromPutRequest) {\n          return records.length ? self._noContentResponse() : self._notFoundResponse('No Record(s) Found');\n        }\n        return self._rejectedResponse(\"Could not get that collection/object.\");\n      }\n      \n      records = _.compact(records);\n\n      if (records.length === 0) {\n        return self._notFoundResponse('No Record(s) Found');\n      }\n\n      return self._okResponse(JSON.stringify(records));\n\n    } catch (e) {\n      return self._internalServerErrorResponse(e);\n    }\n\n  }).run();\n\n};\n\nCollectionAPI._requestListener.prototype._putRequest = function() {\n  var self = this;\n\n  if (! self._requestPath.collectionId) {\n    return self._notFoundResponse('Missing _id');\n  }\n\n  var requestData = '';\n\n  self._request.on('data', function(chunk) {\n    requestData += chunk.toString();\n  });\n\n  self._request.on('end', function() {\n    self._server._fiber(function() {\n      try {\n        var obj = JSON.parse(requestData);\n        \n        if(!self._beforeHandling('PUT', self._requestPath.collectionId, self._requestCollection.findOne(self._requestPath.collectionId), obj)) {\n          return self._rejectedResponse(\"Could not put that object.\");\n        }\n        self._requestCollection.update(self._requestPath.collectionId, obj);\n      } catch (e) {\n        return self._internalServerErrorResponse(e);\n      }\n      return self._getRequest('fromPutRequest');\n    }).run();\n  });\n\n};\n\nCollectionAPI._requestListener.prototype._deleteRequest = function() {\n  var self = this;\n\n  if (! self._requestPath.collectionId) {\n    return self._notFoundResponse('Missing _id');\n  }\n\n  self._server._fiber(function() {\n    try {      \n      if(!self._beforeHandling('DELETE', self._requestPath.collectionId, self._requestCollection.findOne(self._requestPath.collectionId))) {\n        return self._rejectedResponse(\"Could not delete that object.\");\n      }\n      self._requestCollection.remove(self._requestPath.collectionId);\n    } catch (e) {\n      return self._internalServerErrorResponse(e);\n    }\n    return self._okResponse('');\n  }).run();\n};\n\nCollectionAPI._requestListener.prototype._postRequest = function() {\n  var self = this;\n  var requestData = '';\n\n  self._request.on('data', function(chunk) {\n    requestData += chunk.toString();\n  });\n\n  self._request.on('end', function() {\n    self._server._fiber(function() {\n      try {\n        var obj = JSON.parse(requestData);\n        \n        if(!self._beforeHandling('POST', obj)) {\n          return self._rejectedResponse(\"Could not post that object.\");\n        }\n        self._requestPath.collectionId = self._requestCollection.insert(obj);\n      } catch (e) {\n        return self._internalServerErrorResponse(e);\n      }\n      return self._createdResponse(JSON.stringify({_id: self._requestPath.collectionId}));\n    }).run();\n  });\n};\n\nCollectionAPI._requestListener.prototype._okResponse = function(body) {\n  var self = this;\n  self._sendResponse(200, body);\n};\n\nCollectionAPI._requestListener.prototype._createdResponse = function(body) {\n  var self = this;\n  self._sendResponse(201, body);\n};\n\nCollectionAPI._requestListener.prototype._noContentResponse = function() {\n  var self = this;\n  self._sendResponse(204, '');\n};\n\nCollectionAPI._requestListener.prototype._notSupportedResponse = function() {\n  var self = this;\n  self._sendResponse(501, '');\n};\n\nCollectionAPI._requestListener.prototype._unauthorizedResponse = function(body) {\n  var self = this;\n  self._sendResponse(401, JSON.stringify({message: body.toString()}));\n};\n\nCollectionAPI._requestListener.prototype._notFoundResponse = function(body) {\n  var self = this;\n  self._sendResponse(404, JSON.stringify({message: body.toString()}));\n};\n\nCollectionAPI._requestListener.prototype._rejectedResponse= function(body) {\n  var self = this;\n  self._sendResponse(409, JSON.stringify({message: body.toString()}));\n};\n\nCollectionAPI._requestListener.prototype._internalServerErrorResponse = function(body) {\n  var self = this;\n  self._sendResponse(500, JSON.stringify({error: body.toString()}));\n};\n\nCollectionAPI._requestListener.prototype._sendResponse = function(statusCode, body) {\n  var self = this;\n  self._response.statusCode = statusCode;\n  self._response.setHeader('Content-Length', Buffer.byteLength(body, 'utf8'));\n  self._response.setHeader('Content-Type', 'application/json');\n  self._response.write(body);\n  self._response.end();\n};\n"]}