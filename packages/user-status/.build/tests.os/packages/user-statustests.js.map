{"version":3,"file":"/packages/user-status:tests.js","sources":["user-status/tests/insecure_login.js","user-status/tests/status_tests.coffee"],"names":[],"mappings":"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","sourcesContent":["/*\n * Created by https://github.com/matb33 for testing packages that make user of userIds\n * Original file https://github.com/matb33/meteor-collection-hooks/blob/master/tests/insecure_login.js\n */\n\nInsecureLogin = {\n  queue: [],\n  ran: false,\n  ready: function (callback) {\n    this.queue.push(callback);\n    if (this.ran) this.unwind();\n  },\n  run: function () {\n    this.ran = true;\n    this.unwind();\n  },\n  unwind: function () {\n    _.each(this.queue, function (callback) {\n      callback();\n    });\n    this.queue = [];\n  }\n};\n\nif (Meteor.isClient) {\n  Accounts.callLoginMethod({\n    methodArguments: [{username: \"test\"}],\n    userCallback: function (err) {\n      if (err) throw err;\n      console.info(\"Insecure login successful!\");\n      InsecureLogin.run();\n    }\n  });\n} else {\n  InsecureLogin.run();\n}\n\nif (Meteor.isServer) {\n  if (!Meteor.users.find({\"profile.name\": \"Test\"}).count()) {\n    Accounts.createUser({\n      username: \"test\",\n      email: \"test@test.com\",\n      password: \"password\",\n      profile: {name: \"Test\"}\n    });\n  }\n\n  Accounts.registerLoginHandler(function (options) {\n    if (!options.username) return;\n\n    var user = Meteor.users.findOne({\"username\": options.username});\n    if (!user) return;\n\n    var stampedLoginToken = Accounts._generateStampedLoginToken();\n\n    Meteor._ensure(user, \"services\", \"resume\");\n\n    if (_.has(user.services.resume, \"loginTokens\")) {\n      user.services.resume.loginTokens.push(stampedLoginToken);\n    } else {\n      user.services.resume.loginTokens = [stampedLoginToken];\n    }\n\n    Meteor.users.update({_id: user._id}, {$set: {services: user.services}});\n\n    return {\n      id: user._id,\n      token: stampedLoginToken.token\n    };\n  });\n}\n","if Meteor.isServer\n  # Publish status to client\n  Meteor.publish null, -> Meteor.users.find {},\n    fields: { status: 1 }\n\n  Meteor.methods\n    \"grabStatus\": -> Meteor.users.find({}, fields: { status: 1 }).fetch()\n    \"grabSessions\": -> UserSessions.find().fetch()\n\nif Meteor.isClient\n  Tinytest.addAsync \"status - login\", (test, next) ->\n    InsecureLogin.ready ->\n      test.ok()\n      next()\n\n  # Check that initialization is empty\n  Tinytest.addAsync \"status - online recorded on server\", (test, next) ->\n    Meteor.call \"grabStatus\", (err, res) ->\n      test.isUndefined err\n      test.length res, 1\n\n      user = res[0]\n      test.equal user._id, Meteor.userId()\n      test.equal user.status.online, true\n      test.isFalse(user.status.lastLogin is undefined)\n      next()\n\n  Tinytest.addAsync \"status - session recorded on server\", (test, next) ->\n    Meteor.call \"grabSessions\", (err, res) ->\n      test.isUndefined err\n      test.length res, 1\n\n      doc = res[0]\n      test.equal doc.userId, Meteor.userId()\n      test.isFalse(doc.ipAddr is undefined)\n      test.isFalse(doc.loginTime is undefined)\n      next()\n\n  Tinytest.addAsync \"status - online recorded on client\", (test, next) ->\n    test.equal Meteor.user().status.online, true\n    next()\n\n  Tinytest.addAsync \"status - logout\", (test, next) ->\n    Meteor.logout (err) ->\n      test.isUndefined err\n      next()\n\n  Tinytest.addAsync \"status - offline recorded on server\", (test, next) ->\n    Meteor.call \"grabStatus\", (err, res) ->\n      test.isUndefined err\n      test.length res, 1\n\n      user = res[0]\n      test.isFalse(user._id is undefined)\n      test.equal user.status.online, false\n      # logintime is still maintained\n      test.isFalse(user.status.lastLogin is undefined)\n      next()\n\n  Tinytest.addAsync \"status - session deleted on server\", (test, next) ->\n    Meteor.call \"grabSessions\", (err, res) ->\n      test.isUndefined err\n      test.length res, 0\n      next()\n"]}