{"version":3,"file":"/packages/roles:tests.js","sources":["roles/tests/server.js"],"names":[],"mappings":";;;;;;;;AAAA,e;;AAEA,iB;AACA,uC;;AAEA,gC;AACA,gC;AACA,iC;;AAEA,2B;AACA,kD;AACA,G;;AAEA,qB;AACA,2B;AACA,2B;;AAEA,a;AACA,4B;AACA,4B;AACA,2B;AACA,K;AACA,G;;;AAGA,4D;AACA,iC;AACA,qD;AACA,Q;AACA,4C;AACA,4D;;AAEA,wC;AACA,6D;AACA,G;;AAEA,yE;AACA,+D;AACA,mC;AACA,qD;AACA,wF;AACA,gF;;AAEA,qB;AACA,oE;AACA,c;AACA,sE;AACA,O;AACA,M;AACA,G;;;AAGA,e;AACA,2C;AACA,qB;AACA,a;;AAEA,+B;AACA,sD;;AAEA,+B;AACA,sE;;AAEA,gD;;AAEA,+B;AACA,4E;;AAEA,+B;AACA,4D;AACA,M;;AAEA,e;AACA,6C;AACA,qB;AACA,a;;AAEA,+B;AACA,0D;AACA,M;;AAEA,e;AACA,mD;AACA,qB;AACA,c;;AAEA,0B;AACA,4B;;AAEA,gD;;AAEA,2B;AACA,gD;AACA,M;;AAEA,e;AACA,4C;AACA,qB;AACA,a;;AAEA,0B;AACA,2B;AACA,6D;AACA,O;AACA,8C;AACA,M;;AAEA,e;AACA,qD;AACA,qB;AACA,a;;AAEA,0B;AACA,2B;AACA,uE;AACA,0B;AACA,2B;AACA,gE;;AAEA,wD;AACA,iD;AACA,M;;AAEA,e;AACA,yD;AACA,qB;AACA,a;;AAEA,oD;AACA,M;;AAEA,e;AACA,iD;AACA,qB;AACA,qB;AACA,a;AACA,M;AACA,qD;AACA,M;;AAEA,e;AACA,4D;AACA,qB;AACA,e;AACA,a;;AAEA,yD;AACA,kD;;AAEA,+D;AACA,M;;AAEA,e;AACA,oD;AACA,qB;AACA,a;;AAEA,6C;AACA,4D;AACA,M;;AAEA,e;AACA,iD;AACA,qB;AACA,c;;AAEA,yD;;AAEA,8C;AACA,+B;AACA,+B;;AAEA,0D;;AAEA,8C;AACA,+B;AACA,+C;AACA,M;;AAEA,e;AACA,0D;AACA,qB;AACA,c;;AAEA,mE;;AAEA,wD;AACA,yC;AACA,yC;;AAEA,yC;AACA,yC;AACA,yC;;AAEA,oE;AACA,oE;;AAEA,wD;AACA,yC;AACA,yD;;AAEA,yC;AACA,yD;AACA,yC;AACA,M;;AAEA,e;AACA,qD;AACA,qB;AACA,c;;AAEA,uD;AACA,sD;;AAEA,mD;;AAEA,8C;AACA,+B;AACA,+B;;AAEA,4C;;AAEA,8C;AACA,uC;AACA,+B;AACA,M;;AAEA,e;AACA,oD;AACA,qB;AACA,c;;AAEA,yD;AACA,yD;;AAEA,8C;AACA,+B;AACA,+B;;AAEA,iD;AACA,kD;;AAEA,8C;AACA,gD;AACA,+B;AACA,M;;AAEA,e;AACA,6D;AACA,qB;AACA,c;;AAEA,mE;AACA,mE;;AAEA,wD;AACA,yC;AACA,yC;;AAEA,2D;AACA,4D;;AAEA,wD;AACA,0D;AACA,yC;AACA,M;;AAEA,e;AACA,+C;AACA,qB;AACA,c;;AAEA,sE;;AAEA,8C;AACA,8C;AACA,+B;;AAEA,uE;;AAEA,8C;AACA,wD;AACA,+C;AACA,M;;AAEA,e;AACA,wD;AACA,qB;AACA,c;;AAEA,gF;;AAEA,wD;AACA,wD;AACA,yC;;AAEA,yC;AACA,yC;AACA,yC;;AAEA,iF;AACA,iF;;AAEA,wD;AACA,kE;AACA,yD;;AAEA,yC;AACA,yD;AACA,yD;AACA,M;;AAEA,e;AACA,sD;AACA,qB;AACA,c;;AAEA,oC;AACA,uE;AACA,+C;AACA,+C;AACA,qD;AACA,uC;AACA,+C;AACA,M;AACA,e;AACA,wD;AACA,qB;AACA,c;;AAEA,oC;AACA,uE;AACA,+C;AACA,+C;AACA,qD;AACA,uC;AACA,+C;;AAEA,yB;AACA,qD;AACA,uC;AACA,M;;AAEA,e;AACA,2D;AACA,qB;AACA,c;;AAEA,uD;AACA,sD;AACA,I;AACA,oC;AACA,2D;AACA,+C;AACA,+C;AACA,+C;AACA,uC;AACA,+C;AACA,M;;;AAGA,e;AACA,+D;AACA,qB;AACA,c;;AAEA,oC;AACA,iF;AACA,wE;AACA,yD;AACA,yD;AACA,yC;AACA,yC;AACA,gD;AACA,gD;;AAEA,+D;AACA,iD;AACA,yD;AACA,yC;AACA,yC;AACA,gD;AACA,gD;AACA,M;;AAEA,e;AACA,oD;AACA,qB;AACA,c;;AAEA,qC;AACA,uE;AACA,+C;AACA,+C;;AAEA,0D;AACA,sE;AACA,wD;AACA,8C;AACA,mE;AACA,+C;AACA,qC;AACA,M;;AAEA,e;AACA,6D;AACA,qB;AACA,c;;AAEA,oC;AACA,iF;AACA,wE;AACA,yD;AACA,yD;AACA,yC;AACA,yC;AACA,gD;AACA,gD;;AAEA,4E;AACA,iD;AACA,iD;AACA,yC;AACA,yC;AACA,gD;AACA,gD;;AAEA,6E;AACA,yC;AACA,yC;AACA,yC;AACA,M;;AAEA,e;AACA,kC;AACA,qB;AACA,c;;AAEA,uD;AACA,uD;AACA,sD;AACA,I;AACA,8D;AACA,+C;AACA,+C;AACA,+B;;AAEA,2C;AACA,wD;AACA,+C;AACA,wD;AACA,sC;;AAEA,8C;AACA,qC;AACA,qC;AACA,sC;;AAEA,uC;AACA,qC;AACA,uC;AACA,sC;;AAEA,oD;AACA,qC;AACA,+B;AACA,+B;AACA,M;;AAEA,e;AACA,2C;AACA,qB;AACA,c;;AAEA,uD;AACA,uD;AACA,sD;AACA,I;AACA,8E;AACA,qE;AACA,yD;AACA,yD;AACA,yC;AACA,yC;AACA,gD;AACA,gD;;AAEA,2C;AACA,wE;AACA,yE;AACA,kE;AACA,kE;AACA,yC;AACA,yC;AACA,yD;AACA,yD;;AAEA,wD;AACA,0D;AACA,+C;AACA,+C;AACA,yC;AACA,iD;AACA,yD;AACA,iD;;AAEA,iD;AACA,+C;AACA,iD;AACA,yC;AACA,iD;AACA,yD;AACA,iD;;AAEA,wD;AACA,+C;AACA,yC;AACA,yC;AACA,iD;AACA,yD;AACA,iD;AACA,M;;AAEA,e;AACA,kE;AACA,qB;AACA,c;;AAEA,uD;AACA,uD;AACA,sD;AACA,I;AACA,6D;AACA,gD;AACA,sC;;AAEA,2D;AACA,iD;AACA,uC;AACA,M;;;AAGA,e;AACA,iC;AACA,qB;AACA,a;AACA,qC;AACA,8B;AACA,Q;;AAEA,6C;AACA,2B;AACA,+D;;AAEA,kC;AACA,M;;AAEA,e;AACA,sD;AACA,qB;AACA,a;AACA,gD;AACA,0D;AACA,M;;AAEA,e;AACA,0C;AACA,qB;AACA,a;;AAEA,6B;AACA,iB;;AAEA,kB;AACA,mD;;AAEA,uB;AACA,mD;AACA,oD;;;AAGA,sD;;AAEA,kB;AACA,kE;;AAEA,uB;AACA,mD;AACA,mE;AACA,M;;AAEA,e;AACA,mD;AACA,qB;AACA,a;;AAEA,6B;AACA,iB;;AAEA,kB;AACA,6D;;AAEA,uB;AACA,mD;AACA,8D;;;AAGA,kB;AACA,gE;;AAEA,kB;AACA,4E;AACA,mD;;AAEA,uB;AACA,mD;AACA,6E;AACA,oD;AACA,M;;AAEA,e;AACA,gF;AACA,qB;AACA,a;;AAEA,6B;AACA,iB;;AAEA,wE;AACA,qE;;AAEA,kB;AACA,sF;AACA,2D;;AAEA,uB;AACA,mD;AACA,uF;AACA,4D;AACA,M;;;AAGA,e;AACA,6F;AACA,qB;AACA,a;;AAEA,6B;AACA,iB;;AAEA,kB;AACA,6D;AACA,mD;;AAEA,uB;AACA,mD;AACA,8D;AACA,oD;;;AAGA,wE;;AAEA,kB;AACA,qE;AACA,2D;;AAEA,uB;AACA,mD;AACA,sE;AACA,4D;AACA,M;;;AAGA,e;AACA,yC;AACA,qB;AACA,a;AACA,qC;AACA,8B;AACA,Q;;AAEA,sE;AACA,+D;;AAEA,4C;AACA,wE;;AAEA,uE;AACA,uE;AACA,oD;AACA,oD;AACA,M;;AAEA,e;AACA,kD;AACA,qB;AACA,a;AACA,gF;AACA,wE;;AAEA,4C;AACA,iF;;AAEA,uE;AACA,uE;AACA,oD;AACA,oD;AACA,M;AACA,E;AACA,e;AACA,+E;AACA,qB;AACA,a;AACA,+E;AACA,wE;;AAEA,iC;AACA,iF;;AAEA,uE;AACA,uE;AACA,oD;AACA,oD;;AAEA,kD;AACA,6E;;AAEA,uE;AACA,oD;AACA,oD;;;AAGA,4B;AACA,oE;;AAEA,uE;AACA,oD;AACA,oD;AACA,M;;;AAGA,e;AACA,uE;AACA,qB;AACA,a;;AAEA,kF;;AAEA,yC;AACA,gD;AACA,gD;AACA,gD;AACA,gD;;AAEA,0E;;AAEA,yC;AACA,yC;AACA,yC;AACA,gD;AACA,gD;AACA,M;;AAEA,e;AACA,gE;AACA,qB;AACA,a;;AAEA,wE;AACA,kF;;AAEA,yC;AACA,gD;AACA,gD;AACA,gD;AACA,gD;AACA,gD;AACA,gD;;AAEA,0E;;AAEA,yC;AACA,gD;AACA,yC;AACA,yC;AACA,gD;AACA,gD;AACA,gD;AACA,M;AACA,E;AACA,e;AACA,uE;AACA,qB;AACA,a;;AAEA,mE;;AAEA,sC;;AAEA,wE;;AAEA,+B;AACA,M;;AAEA,e;AACA,oE;AACA,qB;AACA,iG;;AAEA,c;AACA,oE;AACA,W;AACA,mD;AACA,gE;AACA,Q;AACA,kB;AACA,+D;AACA,O;;AAEA,c;AACA,0D;AACA,W;AACA,6D;AACA,gE;AACA,O;AACA,kB;AACA,+D;AACA,O;;AAEA,c;AACA,oE;AACA,W;AACA,uD;AACA,gE;AACA,O;AACA,kB;AACA,+D;AACA,O;;AAEA,c;AACA,0D;AACA,W;AACA,yD;AACA,gE;AACA,O;AACA,kB;AACA,+D;AACA,O;;AAEA,c;AACA,0D;AACA,yC;AACA,+D;;AAEA,c;AACA,oE;AACA,gE;AACA,6C;AACA,M;;AAEA,e;AACA,wC;AACA,qB;AACA,c;;AAEA,gE;AACA,qD;AACA,M;;AAEA,e;AACA,2D;AACA,qB;AACA,yE;;AAEA,c;AACA,W;AACA,8D;AACA,gE;AACA,Q;AACA,kB;AACA,+D;AACA,O;;AAEA,c;AACA,+B;AACA,qE;AACA,M;;AAEA,gC;AACA,gB;AACA,yB;AACA,2B;AACA,0B;AACA,O;AACA,K;AACA,qC;AACA,G;;AAEA,K","sourcesContent":[";(function () {\n\n  var users = {},\n      roles = ['admin','editor','user']\n\n  // use to run individual tests\n  //Tinytest.oadd = Tinytest.add\n  //Tinytest.add = function () {}\n\n  function addUser (name) {\n    return Accounts.createUser({'username': name})\n  }\n\n  function reset () {\n    Meteor.roles.remove({})\n    Meteor.users.remove({})\n\n    users = {\n      'eve': addUser('eve'),\n      'bob': addUser('bob'),\n      'joe': addUser('joe')\n    }\n  }\n\n\n  function testUser (test, username, expectedRoles, group) {\n    var userId = users[username],\n        userObj = Meteor.users.findOne({_id: userId})\n        \n    // check using user ids (makes db calls)\n    _innerTest(test, userId, username, expectedRoles, group)\n\n    // check using passed-in user object\n    _innerTest(test, userObj, username, expectedRoles, group)\n  }\n\n  function _innerTest (test, userParam, username, expectedRoles, group) {\n    // test that user has only the roles expected and no others\n    _.each(roles, function (role) {\n      var expected = _.contains(expectedRoles, role),\n          msg = username + ' expected to have \\'' + role + '\\' permission but does not',\n          nmsg = username + ' had the following un-expected permission: ' + role\n\n      if (expected) {\n        test.isTrue(Roles.userIsInRole(userParam, role, group), msg)\n      } else {\n        test.isFalse(Roles.userIsInRole(userParam, role, group), nmsg)\n      }\n    })\n  }\n\n\n  Tinytest.add(\n    'roles - can create and delete roles', \n    function (test) {\n      reset()\n\n      Roles.createRole('test1')\n      test.equal(Meteor.roles.findOne().name, 'test1')\n\n      Roles.createRole('test2')\n      test.equal(Meteor.roles.findOne({'name':'test2'}).name, 'test2')\n\n      test.equal(Meteor.roles.find().count(), 2)\n\n      Roles.deleteRole('test1')\n      test.equal(typeof Meteor.roles.findOne({'name':'test1'}), 'undefined')\n\n      Roles.deleteRole('test2')\n      test.equal(typeof Meteor.roles.findOne(), 'undefined')\n    })\n\n  Tinytest.add(\n    'roles - can\\'t create duplicate roles', \n    function (test) {\n      reset()\n\n      Roles.createRole('test1')\n      test.throws(function () {Roles.createRole('test1')})\n    })\n\n  Tinytest.add(\n    'roles - can\\'t create role with empty names', \n    function (test) {\n      reset() \n\n      Roles.createRole('')\n      Roles.createRole(null)\n\n      test.equal(Meteor.roles.find().count(), 0)\n\n      Roles.createRole(' ')\n      test.equal(Meteor.roles.find().count(), 0)\n    })\n\n  Tinytest.add(\n    'roles - can check if user is in role', \n    function (test) {\n      reset()\n\n      Meteor.users.update(\n        {\"_id\":users.eve}, \n        {$addToSet: { roles: { $each: ['admin', 'user'] } } }\n      )\n      testUser(test, 'eve', ['admin', 'user'])\n    })\n\n  Tinytest.add(\n    'roles - can check if user is in role by group', \n    function (test) {\n      reset()\n\n      Meteor.users.update(\n        {\"_id\":users.eve}, \n        {$addToSet: { 'roles.group1': { $each: ['admin', 'user'] } } })\n      Meteor.users.update(\n        {\"_id\":users.eve}, \n        {$addToSet: { 'roles.group2': { $each: ['editor'] } } })\n\n      testUser(test, 'eve', ['admin', 'user'], 'group1')\n      testUser(test, 'eve', ['editor'], 'group2')\n    })\n\n  Tinytest.add(\n    'roles - can check if non-existant user is in role', \n    function (test) {\n      reset()\n\n      test.isFalse(Roles.userIsInRole('1', 'admin'))\n    })\n\n  Tinytest.add(\n    'roles - can check if null user is in role', \n    function (test) {\n      var user = null\n      reset()\n      \n      test.isFalse(Roles.userIsInRole(user, 'admin'))\n    })\n\n  Tinytest.add(\n    'roles - can check user against several roles at once', \n    function (test) {\n      var user \n      reset()\n\n      Roles.addUsersToRoles(users.eve, ['admin', 'user'])\n      user = Meteor.users.findOne({_id:users.eve})\n\n      test.isTrue(Roles.userIsInRole(user, ['editor','admin']))\n    })\n\n  Tinytest.add(\n    'roles - can\\'t add non-existent user to role', \n    function (test) {\n      reset()\n\n      Roles.addUsersToRoles(['1'], ['admin'])\n      test.equal(Meteor.users.findOne({_id:'1'}), undefined)\n    })\n\n  Tinytest.add(\n    'roles - can add individual users to roles', \n    function (test) {\n      reset() \n\n      Roles.addUsersToRoles(users.eve, ['admin', 'user'])\n\n      testUser(test, 'eve', ['admin', 'user'])\n      testUser(test, 'bob', [])\n      testUser(test, 'joe', [])\n\n      Roles.addUsersToRoles(users.joe, ['editor', 'user'])\n\n      testUser(test, 'eve', ['admin', 'user'])\n      testUser(test, 'bob', [])\n      testUser(test, 'joe', ['editor', 'user'])\n    })\n\n  Tinytest.add(\n    'roles - can add individual users to roles by group', \n    function (test) {\n      reset() \n\n      Roles.addUsersToRoles(users.eve, ['admin', 'user'], 'group1')\n\n      testUser(test, 'eve', ['admin', 'user'], 'group1')\n      testUser(test, 'bob', [], 'group1')\n      testUser(test, 'joe', [], 'group1')\n\n      testUser(test, 'eve', [], 'group2')\n      testUser(test, 'bob', [], 'group2')\n      testUser(test, 'joe', [], 'group2')\n\n      Roles.addUsersToRoles(users.joe, ['editor', 'user'], 'group1')\n      Roles.addUsersToRoles(users.bob, ['editor', 'user'], 'group2')\n\n      testUser(test, 'eve', ['admin', 'user'], 'group1')\n      testUser(test, 'bob', [], 'group1')\n      testUser(test, 'joe', ['editor', 'user'], 'group1')\n\n      testUser(test, 'eve', [], 'group2')\n      testUser(test, 'bob', ['editor', 'user'], 'group2')\n      testUser(test, 'joe', [], 'group2')\n    })\n\n  Tinytest.add(\n    'roles - can add user to roles via user object', \n    function (test) {\n      reset() \n\n      var eve = Meteor.users.findOne({_id: users.eve}),\n          bob = Meteor.users.findOne({_id: users.bob})\n\n      Roles.addUsersToRoles(eve, ['admin', 'user'])\n\n      testUser(test, 'eve', ['admin', 'user'])\n      testUser(test, 'bob', [])\n      testUser(test, 'joe', [])\n\n      Roles.addUsersToRoles(bob, ['editor'])\n\n      testUser(test, 'eve', ['admin', 'user'])\n      testUser(test, 'bob', ['editor'])\n      testUser(test, 'joe', [])\n    })\n\n  Tinytest.add(\n    'roles - can add user to roles multiple times', \n    function (test) {\n      reset() \n\n      Roles.addUsersToRoles(users.eve, ['admin', 'user'])\n      Roles.addUsersToRoles(users.eve, ['admin', 'user'])\n\n      testUser(test, 'eve', ['admin', 'user'])\n      testUser(test, 'bob', [])\n      testUser(test, 'joe', [])\n\n      Roles.addUsersToRoles(users.bob, ['admin'])\n      Roles.addUsersToRoles(users.bob, ['editor'])\n\n      testUser(test, 'eve', ['admin', 'user'])\n      testUser(test, 'bob', ['admin', 'editor'])\n      testUser(test, 'joe', [])\n    })\n\n  Tinytest.add(\n    'roles - can add user to roles multiple times by group', \n    function (test) {\n      reset() \n\n      Roles.addUsersToRoles(users.eve, ['admin', 'user'], 'group1')\n      Roles.addUsersToRoles(users.eve, ['admin', 'user'], 'group1')\n\n      testUser(test, 'eve', ['admin', 'user'], 'group1')\n      testUser(test, 'bob', [], 'group1')\n      testUser(test, 'joe', [], 'group1')\n\n      Roles.addUsersToRoles(users.bob, ['admin'], 'group1')\n      Roles.addUsersToRoles(users.bob, ['editor'], 'group1')\n\n      testUser(test, 'eve', ['admin', 'user'], 'group1')\n      testUser(test, 'bob', ['admin', 'editor'], 'group1')\n      testUser(test, 'joe', [], 'group1')\n    })\n\n  Tinytest.add(\n    'roles - can add multiple users to roles', \n    function (test) {\n      reset() \n\n      Roles.addUsersToRoles([users.eve, users.bob], ['admin', 'user'])\n\n      testUser(test, 'eve', ['admin', 'user'])\n      testUser(test, 'bob', ['admin', 'user'])\n      testUser(test, 'joe', [])\n\n      Roles.addUsersToRoles([users.bob, users.joe], ['editor', 'user'])\n\n      testUser(test, 'eve', ['admin', 'user'])\n      testUser(test, 'bob', ['admin', 'editor', 'user'])\n      testUser(test, 'joe', ['editor', 'user'])\n    })\n\n  Tinytest.add(\n    'roles - can add multiple users to roles by group', \n    function (test) {\n      reset() \n\n      Roles.addUsersToRoles([users.eve, users.bob], ['admin', 'user'], 'group1')\n\n      testUser(test, 'eve', ['admin', 'user'], 'group1')\n      testUser(test, 'bob', ['admin', 'user'], 'group1')\n      testUser(test, 'joe', [], 'group1')\n\n      testUser(test, 'eve', [], 'group2')\n      testUser(test, 'bob', [], 'group2')\n      testUser(test, 'joe', [], 'group2')\n\n      Roles.addUsersToRoles([users.bob, users.joe], ['editor', 'user'], 'group1')\n      Roles.addUsersToRoles([users.bob, users.joe], ['editor', 'user'], 'group2')\n\n      testUser(test, 'eve', ['admin', 'user'], 'group1')\n      testUser(test, 'bob', ['admin', 'editor', 'user'], 'group1')\n      testUser(test, 'joe', ['editor', 'user'], 'group1')\n\n      testUser(test, 'eve', [], 'group2')\n      testUser(test, 'bob', ['editor', 'user'], 'group2')\n      testUser(test, 'joe', ['editor', 'user'], 'group2')\n    })\n\n  Tinytest.add(\n    'roles - can remove individual users from roles', \n    function (test) {\n      reset() \n\n      // remove user role - one user\n      Roles.addUsersToRoles([users.eve, users.bob], ['editor', 'user'])\n      testUser(test, 'eve', ['editor', 'user'])\n      testUser(test, 'bob', ['editor', 'user'])\n      Roles.removeUsersFromRoles(users.eve, ['user'])\n      testUser(test, 'eve', ['editor'])\n      testUser(test, 'bob', ['editor', 'user'])\n    })\n  Tinytest.add(\n    'roles - can remove user from roles multiple times',\n    function (test) {\n      reset() \n\n      // remove user role - one user\n      Roles.addUsersToRoles([users.eve, users.bob], ['editor', 'user'])\n      testUser(test, 'eve', ['editor', 'user'])\n      testUser(test, 'bob', ['editor', 'user'])\n      Roles.removeUsersFromRoles(users.eve, ['user'])\n      testUser(test, 'eve', ['editor'])\n      testUser(test, 'bob', ['editor', 'user'])\n\n      // try remove again\n      Roles.removeUsersFromRoles(users.eve, ['user'])\n      testUser(test, 'eve', ['editor'])\n    })\n\n  Tinytest.add(\n    'roles - can remove users from roles via user object', \n    function (test) {\n      reset() \n\n      var eve = Meteor.users.findOne({_id: users.eve}),\n          bob = Meteor.users.findOne({_id: users.bob})\n    \n      // remove user role - one user\n      Roles.addUsersToRoles([eve, bob], ['editor', 'user'])\n      testUser(test, 'eve', ['editor', 'user'])\n      testUser(test, 'bob', ['editor', 'user'])\n      Roles.removeUsersFromRoles(eve, ['user'])\n      testUser(test, 'eve', ['editor'])\n      testUser(test, 'bob', ['editor', 'user'])\n    })\n\n\n  Tinytest.add(\n    'roles - can remove individual users from roles by group', \n    function (test) {\n      reset() \n\n      // remove user role - one user\n      Roles.addUsersToRoles([users.eve, users.bob], ['editor', 'user'], 'group1')\n      Roles.addUsersToRoles([users.joe, users.bob], ['admin'], 'group2')\n      testUser(test, 'eve', ['editor', 'user'], 'group1')\n      testUser(test, 'bob', ['editor', 'user'], 'group1')\n      testUser(test, 'joe', [], 'group1')\n      testUser(test, 'eve', [], 'group2')\n      testUser(test, 'bob', ['admin'], 'group2')\n      testUser(test, 'joe', ['admin'], 'group2')\n\n      Roles.removeUsersFromRoles(users.eve, ['user'], 'group1')\n      testUser(test, 'eve', ['editor'], 'group1')\n      testUser(test, 'bob', ['editor', 'user'], 'group1')\n      testUser(test, 'joe', [], 'group1')\n      testUser(test, 'eve', [], 'group2')\n      testUser(test, 'bob', ['admin'], 'group2')\n      testUser(test, 'joe', ['admin'], 'group2')\n    })\n\n  Tinytest.add(\n    'roles - can remove multiple users from roles', \n    function (test) {\n      reset() \n\n      // remove user role - two users\n      Roles.addUsersToRoles([users.eve, users.bob], ['editor', 'user'])\n      testUser(test, 'eve', ['editor', 'user'])\n      testUser(test, 'bob', ['editor', 'user'])\n\n      test.isFalse(Roles.userIsInRole(users.joe, 'admin'))\n      Roles.addUsersToRoles([users.bob, users.joe], ['admin', 'user'])\n      testUser(test, 'bob', ['admin', 'user', 'editor'])\n      testUser(test, 'joe', ['admin', 'user'])\n      Roles.removeUsersFromRoles([users.bob, users.joe], ['admin'])\n      testUser(test, 'bob', ['user', 'editor'])\n      testUser(test, 'joe', ['user'])\n    })\n\n  Tinytest.add(\n    'roles - can remove multiple users from roles by group', \n    function (test) {\n      reset() \n\n      // remove user role - one user\n      Roles.addUsersToRoles([users.eve, users.bob], ['editor', 'user'], 'group1')\n      Roles.addUsersToRoles([users.joe, users.bob], ['admin'], 'group2')\n      testUser(test, 'eve', ['editor', 'user'], 'group1')\n      testUser(test, 'bob', ['editor', 'user'], 'group1')\n      testUser(test, 'joe', [], 'group1')\n      testUser(test, 'eve', [], 'group2')\n      testUser(test, 'bob', ['admin'], 'group2')\n      testUser(test, 'joe', ['admin'], 'group2')\n\n      Roles.removeUsersFromRoles([users.eve, users.bob], ['user'], 'group1')\n      testUser(test, 'eve', ['editor'], 'group1')\n      testUser(test, 'bob', ['editor'], 'group1')\n      testUser(test, 'joe', [], 'group1')\n      testUser(test, 'eve', [], 'group2')\n      testUser(test, 'bob', ['admin'], 'group2')\n      testUser(test, 'joe', ['admin'], 'group2')\n\n      Roles.removeUsersFromRoles([users.joe, users.bob], ['admin'], 'group2')\n      testUser(test, 'eve', [], 'group2')\n      testUser(test, 'bob', [], 'group2')\n      testUser(test, 'joe', [], 'group2')\n    })\n\n  Tinytest.add(\n    'roles - can set user roles', \n    function (test) {\n      reset() \n\n      var eve = Meteor.users.findOne({_id: users.eve}),\n          bob = Meteor.users.findOne({_id: users.bob}),\n          joe = Meteor.users.findOne({_id: users.joe})\n    \n      Roles.setUserRoles([users.eve, bob], ['editor', 'user'])\n      testUser(test, 'eve', ['editor', 'user'])\n      testUser(test, 'bob', ['editor', 'user'])\n      testUser(test, 'joe', [])\n\n      // use addUsersToRoles add some roles\n      Roles.addUsersToRoles([bob, users.joe], ['admin'])\n      testUser(test, 'eve', ['editor', 'user'])\n      testUser(test, 'bob', ['admin', 'editor', 'user'])\n      testUser(test, 'joe', ['admin'])\n\n      Roles.setUserRoles([eve, bob], ['user'])\n      testUser(test, 'eve', ['user'])\n      testUser(test, 'bob', ['user'])\n      testUser(test, 'joe', ['admin'])\n\n      Roles.setUserRoles(bob, 'editor')\n      testUser(test, 'eve', ['user'])\n      testUser(test, 'bob', ['editor'])\n      testUser(test, 'joe', ['admin'])\n\n      Roles.setUserRoles([users.joe, users.bob], [])\n      testUser(test, 'eve', ['user'])\n      testUser(test, 'bob', [])\n      testUser(test, 'joe', [])\n    })\n\n  Tinytest.add(\n    'roles - can set user roles by group', \n    function (test) {\n      reset() \n\n      var eve = Meteor.users.findOne({_id: users.eve}),\n          bob = Meteor.users.findOne({_id: users.bob}),\n          joe = Meteor.users.findOne({_id: users.joe})\n    \n      Roles.setUserRoles([users.eve, users.bob], ['editor', 'user'], 'group1')\n      Roles.setUserRoles([users.bob, users.joe], ['admin'], 'group2')\n      testUser(test, 'eve', ['editor', 'user'], 'group1')\n      testUser(test, 'bob', ['editor', 'user'], 'group1')\n      testUser(test, 'joe', [], 'group1')\n      testUser(test, 'eve', [], 'group2')\n      testUser(test, 'bob', ['admin'], 'group2')\n      testUser(test, 'joe', ['admin'], 'group2')\n\n      // use addUsersToRoles add some roles\n      Roles.addUsersToRoles([users.eve, users.bob], ['admin'], 'group1')\n      Roles.addUsersToRoles([users.bob, users.joe], ['editor'], 'group2')\n      testUser(test, 'eve', ['admin', 'editor', 'user'], 'group1')\n      testUser(test, 'bob', ['admin', 'editor', 'user'], 'group1')\n      testUser(test, 'joe', [], 'group1')\n      testUser(test, 'eve', [], 'group2')\n      testUser(test, 'bob', ['admin','editor'], 'group2')\n      testUser(test, 'joe', ['admin','editor'], 'group2')\n\n      Roles.setUserRoles([eve, bob], ['user'], 'group1')\n      Roles.setUserRoles([eve, joe], ['editor'], 'group2')\n      testUser(test, 'eve', ['user'], 'group1')\n      testUser(test, 'bob', ['user'], 'group1')\n      testUser(test, 'joe', [], 'group1')\n      testUser(test, 'eve', ['editor'], 'group2')\n      testUser(test, 'bob', ['admin','editor'], 'group2')\n      testUser(test, 'joe', ['editor'], 'group2')\n\n      Roles.setUserRoles(bob, 'editor', 'group1')\n      testUser(test, 'eve', ['user'], 'group1')\n      testUser(test, 'bob', ['editor'], 'group1')\n      testUser(test, 'joe', [], 'group1')\n      testUser(test, 'eve', ['editor'], 'group2')\n      testUser(test, 'bob', ['admin','editor'], 'group2')\n      testUser(test, 'joe', ['editor'], 'group2')\n\n      Roles.setUserRoles([bob, users.joe], [], 'group1')\n      testUser(test, 'eve', ['user'], 'group1')\n      testUser(test, 'bob', [], 'group1')\n      testUser(test, 'joe', [], 'group1')\n      testUser(test, 'eve', ['editor'], 'group2')\n      testUser(test, 'bob', ['admin','editor'], 'group2')\n      testUser(test, 'joe', ['editor'], 'group2')\n    })\n\n  Tinytest.add(\n    'roles - can set user roles by group including GLOBAL_GROUP', \n    function (test) {\n      reset() \n\n      var eve = Meteor.users.findOne({_id: users.eve}),\n          bob = Meteor.users.findOne({_id: users.bob}),\n          joe = Meteor.users.findOne({_id: users.joe})\n    \n      Roles.addUsersToRoles(eve, 'admin', Roles.GLOBAL_GROUP)\n      testUser(test, 'eve', ['admin'], 'group1')\n      testUser(test, 'eve', ['admin'])\n\n      Roles.setUserRoles(eve, 'editor', Roles.GLOBAL_GROUP)\n      testUser(test, 'eve', ['editor'], 'group2')\n      testUser(test, 'eve', ['editor'])\n    })\n\n\n  Tinytest.add(\n    'roles - can get all roles', \n    function (test) {\n      reset()\n      _.each(roles, function (role) {\n        Roles.createRole(role)\n      })\n\n      // compare roles, sorted alphabetically\n      var expected = roles,\n          actual = _.pluck(Roles.getAllRoles().fetch(), 'name')\n\n      test.equal(actual, expected)\n    })\n\n  Tinytest.add(\n    'roles - can\\'t get roles for non-existant user', \n    function (test) {\n      reset()\n      test.equal(Roles.getRolesForUser('1'), [])\n      test.equal(Roles.getRolesForUser('1', 'group1'), [])\n    })\n\n  Tinytest.add(\n    'roles - can get all roles for user', \n    function (test) {\n      reset()\n\n      var userId = users.eve,\n          userObj\n\n      // by userId\n      test.equal(Roles.getRolesForUser(userId), [])\n\n      // by user object\n      userObj = Meteor.users.findOne({_id: userId})\n      test.equal(Roles.getRolesForUser(userObj), [])\n\n\n      Roles.addUsersToRoles(userId, ['admin', 'user'])\n\n      // by userId\n      test.equal(Roles.getRolesForUser(userId), ['admin', 'user'])\n\n      // by user object\n      userObj = Meteor.users.findOne({_id: userId})\n      test.equal(Roles.getRolesForUser(userObj), ['admin', 'user'])\n    })\n\n  Tinytest.add(\n    'roles - can get all roles for user by group', \n    function (test) {\n      reset()\n\n      var userId = users.eve,\n          userObj\n\n      // by userId\n      test.equal(Roles.getRolesForUser(userId, 'group1'), [])\n\n      // by user object\n      userObj = Meteor.users.findOne({_id: userId})\n      test.equal(Roles.getRolesForUser(userObj, 'group1'), [])\n\n\n      // add roles\n      Roles.addUsersToRoles(userId, ['admin', 'user'], 'group1')\n\n      // by userId\n      test.equal(Roles.getRolesForUser(userId, 'group1'), ['admin', 'user'])\n      test.equal(Roles.getRolesForUser(userId), [])\n\n      // by user object\n      userObj = Meteor.users.findOne({_id: userId})\n      test.equal(Roles.getRolesForUser(userObj, 'group1'), ['admin', 'user'])\n      test.equal(Roles.getRolesForUser(userObj), [])\n    })\n\n  Tinytest.add(\n    'roles - can get all roles for user by group including Roles.GLOBAL_GROUP', \n    function (test) {\n      reset()\n\n      var userId = users.eve,\n          userObj\n\n      Roles.addUsersToRoles([users.eve], ['editor'], Roles.GLOBAL_GROUP)\n      Roles.addUsersToRoles([users.eve], ['admin', 'user'], 'group1')\n\n      // by userId\n      test.equal(Roles.getRolesForUser(userId, 'group1'), ['admin', 'user', 'editor'])\n      test.equal(Roles.getRolesForUser(userId), ['editor'])\n\n      // by user object\n      userObj = Meteor.users.findOne({_id: userId})\n      test.equal(Roles.getRolesForUser(userObj, 'group1'), ['admin', 'user', 'editor'])\n      test.equal(Roles.getRolesForUser(userObj), ['editor'])\n    })\n\n\n  Tinytest.add(\n    'roles - getRolesForUser should not return null entries if user has no roles for group', \n    function (test) {\n      reset()\n\n      var userId = users.eve,\n          userObj\n\n      // by userId\n      test.equal(Roles.getRolesForUser(userId, 'group1'), [])\n      test.equal(Roles.getRolesForUser(userId), [])\n\n      // by user object\n      userObj = Meteor.users.findOne({_id: userId})\n      test.equal(Roles.getRolesForUser(userObj, 'group1'), [])\n      test.equal(Roles.getRolesForUser(userObj), [])\n\n\n      Roles.addUsersToRoles([users.eve], ['editor'], Roles.GLOBAL_GROUP)\n\n      // by userId\n      test.equal(Roles.getRolesForUser(userId, 'group1'), ['editor'])\n      test.equal(Roles.getRolesForUser(userId), ['editor'])\n\n      // by user object\n      userObj = Meteor.users.findOne({_id: userId})\n      test.equal(Roles.getRolesForUser(userObj, 'group1'), ['editor'])\n      test.equal(Roles.getRolesForUser(userObj), ['editor'])\n    })\n\n\n  Tinytest.add(\n    'roles - can get all users in role', \n    function (test) {\n      reset()\n      _.each(roles, function (role) {\n        Roles.createRole(role)\n      })\n\n      Roles.addUsersToRoles([users.eve, users.joe], ['admin', 'user'])\n      Roles.addUsersToRoles([users.bob, users.joe], ['editor'])\n\n      var expected = [users.eve, users.joe],\n          actual = _.pluck(Roles.getUsersInRole('admin').fetch(), '_id')\n\n      // order may be different so check difference instead of equality\n      // difference uses first array as base so have to check both ways\n      test.equal(_.difference(actual, expected), [])\n      test.equal(_.difference(expected, actual), [])\n    })\n\n  Tinytest.add(\n    'roles - can get all users in role by group', \n    function (test) {\n      reset()\n      Roles.addUsersToRoles([users.eve, users.joe], ['admin', 'user'], 'group1')\n      Roles.addUsersToRoles([users.bob, users.joe], ['admin'], 'group2')\n\n      var expected = [users.eve, users.joe],\n          actual = _.pluck(Roles.getUsersInRole('admin','group1').fetch(), '_id')\n\n      // order may be different so check difference instead of equality\n      // difference uses first array as base so have to check both ways\n      test.equal(_.difference(actual, expected), [])\n      test.equal(_.difference(expected, actual), [])\n    })\n  \n  Tinytest.add(\n    'roles - can get all users in role by group including Roles.GLOBAL_GROUP', \n    function (test) {\n      reset()\n      Roles.addUsersToRoles([users.eve], ['admin', 'user'], Roles.GLOBAL_GROUP)\n      Roles.addUsersToRoles([users.bob, users.joe], ['admin'], 'group2')\n\n      var expected = [users.eve],\n          actual = _.pluck(Roles.getUsersInRole('admin','group1').fetch(), '_id')\n\n      // order may be different so check difference instead of equality\n      // difference uses first array as base so have to check both ways\n      test.equal(_.difference(actual, expected), [])\n      test.equal(_.difference(expected, actual), [])\n\n      expected = [users.eve, users.bob, users.joe]\n      actual = _.pluck(Roles.getUsersInRole('admin','group2').fetch(), '_id')\n\n      // order may be different so check difference instead of equality\n      test.equal(_.difference(actual, expected), [])\n      test.equal(_.difference(expected, actual), [])\n\n\n      expected = [users.eve]\n      actual = _.pluck(Roles.getUsersInRole('admin').fetch(), '_id')\n\n      // order may be different so check difference instead of equality\n      test.equal(_.difference(actual, expected), [])\n      test.equal(_.difference(expected, actual), [])\n    })\n\n\n  Tinytest.add(\n    'roles - can use Roles.GLOBAL_GROUP to assign blanket permissions',\n    function (test) {\n      reset()\n\n      Roles.addUsersToRoles([users.joe, users.bob], ['admin'], Roles.GLOBAL_GROUP)\n\n      testUser(test, 'eve', [], 'group1')\n      testUser(test, 'joe', ['admin'], 'group2')\n      testUser(test, 'joe', ['admin'], 'group1')\n      testUser(test, 'bob', ['admin'], 'group2')\n      testUser(test, 'bob', ['admin'], 'group1')\n\n      Roles.removeUsersFromRoles(users.joe, ['admin'], Roles.GLOBAL_GROUP)\n\n      testUser(test, 'eve', [], 'group1')\n      testUser(test, 'joe', [], 'group2')\n      testUser(test, 'joe', [], 'group1')\n      testUser(test, 'bob', ['admin'], 'group2')\n      testUser(test, 'bob', ['admin'], 'group1')\n    })\n\n  Tinytest.add(\n    'roles - Roles.GLOBAL_GROUP is independent of other groups',\n    function (test) {\n      reset()\n\n      Roles.addUsersToRoles([users.joe, users.bob], ['admin'], 'group5')\n      Roles.addUsersToRoles([users.joe, users.bob], ['admin'], Roles.GLOBAL_GROUP)\n\n      testUser(test, 'eve', [], 'group1')\n      testUser(test, 'joe', ['admin'], 'group5')\n      testUser(test, 'joe', ['admin'], 'group2')\n      testUser(test, 'joe', ['admin'], 'group1')\n      testUser(test, 'bob', ['admin'], 'group5')\n      testUser(test, 'bob', ['admin'], 'group2')\n      testUser(test, 'bob', ['admin'], 'group1')\n\n      Roles.removeUsersFromRoles(users.joe, ['admin'], Roles.GLOBAL_GROUP)\n\n      testUser(test, 'eve', [], 'group1')\n      testUser(test, 'joe', ['admin'], 'group5')\n      testUser(test, 'joe', [], 'group2')\n      testUser(test, 'joe', [], 'group1')\n      testUser(test, 'bob', ['admin'], 'group5')\n      testUser(test, 'bob', ['admin'], 'group2')\n      testUser(test, 'bob', ['admin'], 'group1')\n    })\n  \n  Tinytest.add(\n    'roles - Roles.GLOBAL_GROUP also checked when group not specified',\n    function (test) {\n      reset()\n\n      Roles.addUsersToRoles(users.joe, 'admin', Roles.GLOBAL_GROUP)\n\n      testUser(test, 'joe', ['admin'])\n\n      Roles.removeUsersFromRoles(users.joe, 'admin', Roles.GLOBAL_GROUP)\n\n      testUser(test, 'joe', [])\n    })\n\n  Tinytest.add(\n    'roles - mixing group with non-group throws descriptive error', \n    function (test) {\n      var expectedErrorMsg = \"Roles error: Can't mix grouped and non-grouped roles for same user\"\n\n      reset() \n      Roles.addUsersToRoles(users.joe, ['editor', 'user'], 'group1')\n      try {\n        Roles.addUsersToRoles(users.joe, ['admin'])\n        throw new Error(\"expected exception but didn't get one\")\n      } \n      catch (ex) {\n        test.isTrue(ex.message == expectedErrorMsg, ex.message)\n      }\n\n      reset() \n      Roles.addUsersToRoles(users.bob, ['editor', 'user'])\n      try {\n        Roles.addUsersToRoles(users.bob, ['admin'], 'group2')\n        throw new Error(\"expected exception but didn't get one\")\n      }\n      catch (ex) {\n        test.isTrue(ex.message == expectedErrorMsg, ex.message)\n      }\n\n      reset() \n      Roles.addUsersToRoles(users.bob, ['editor', 'user'], 'group1')\n      try {\n        Roles.removeUsersFromRoles(users.bob, ['user'])\n        throw new Error(\"expected exception but didn't get one\")\n      }\n      catch (ex) {\n        test.isTrue(ex.message == expectedErrorMsg, ex.message)\n      }\n\n      reset() \n      Roles.addUsersToRoles(users.bob, ['editor', 'user'])\n      try {\n        Roles.setUserRoles(users.bob, ['user'], 'group1')\n        throw new Error(\"expected exception but didn't get one\")\n      }\n      catch (ex) {\n        test.isTrue(ex.message == expectedErrorMsg, ex.message)\n      }\n\n      reset() \n      Roles.addUsersToRoles(users.bob, ['editor', 'user'])\n      // don't expect this to throw error\n      Roles.removeUsersFromRoles(users.bob, ['user'], 'group1')\n\n      reset() \n      Roles.addUsersToRoles(users.bob, ['editor', 'user'], 'group1')\n      // this is probably not a good idea but shouldn't throw...\n      Roles.setUserRoles(users.bob, ['user'])\n    })\n\n  Tinytest.add(\n    \"roles - can use '.' in group name\",\n    function (test) {\n      reset() \n\n      Roles.addUsersToRoles(users.joe, ['admin'], 'example.com')\n      testUser(test, 'joe', ['admin'], 'example.com')\n    })\n\n  Tinytest.add(\n    'roles - invalid group name throws descriptive error', \n    function (test) {\n      var expectedErrorMsg = \"Roles error: groups can not start with '$'\"\n\n      reset() \n      try {\n        Roles.addUsersToRoles(users.joe, ['admin'], '$group1')\n        throw new Error(\"expected exception but didn't get one\")\n      } \n      catch (ex) {\n        test.isTrue(ex.message == expectedErrorMsg, ex.message)\n      }\n\n      reset() \n      // should not throw error\n      Roles.addUsersToRoles(users.bob, ['editor', 'user'], 'g$roup1')\n    })\n\n  function printException (ex) {\n    var tmp = {}\n    for (var key in ex) {\n      if (key != 'stack') {\n        tmp[key] = ex[key]\n      }\n    }\n    console.log(JSON.stringify(tmp));\n  }\n\n}());\n"]}