{"version":3,"file":"/packages/roles:tests.js","sources":["roles/tests/client.js"],"names":[],"mappings":";;;;;;;;AAAA,e;;AAEA,e;;AAEA,Y;AACA,uC;;AAEA,W;AACA,Y;AACA,iB;AACA,gC;AACA,M;AACA,Y;AACA,iB;AACA,c;AACA,2B;AACA,4B;AACA,O;AACA,M;AACA,Y;AACA,iB;AACA,c;AACA,sC;AACA,4B;AACA,O;AACA,K;AACA,G;;AAEA,4D;AACA,8B;;AAEA,iE;AACA,mC;AACA,qD;AACA,wF;AACA,iE;;AAEA,qB;AACA,+D;AACA,c;AACA,iE;AACA,O;AACA,M;AACA,G;;;AAGA,8D;AACA,6B;AACA,oB;AACA,G;;AAEA,e;AACA,iE;AACA,qB;AACA,uD;AACA,mB;AACA,gB;;AAEA,iF;;AAEA,qB;AACA,wC;AACA,kC;AACA,M;AACA,qB;AACA,gC;AACA,kC;;AAEA,sB;AACA,kC;AACA,kC;AACA,M;;AAEA,e;AACA,4C;AACA,qB;AACA,gD;AACA,M;;AAEA,e;AACA,qD;AACA,qB;AACA,+C;AACA,iD;AACA,M;;AAEA,e;AACA,oE;AACA,qB;AACA,sC;AACA,0D;AACA,0D;AACA,M;AACA,K","sourcesContent":[";(function () {\n\n  \"use strict\";\n\n  var users,\n      roles = ['admin','editor','user']\n\n  users = {\n    'eve': {\n      _id: 'eve',\n      roles: ['admin', 'editor']\n    },\n    'bob': {\n      _id: 'bob',\n      roles: {\n        'group1': ['user'],\n        'group2': ['editor']\n      }\n    },\n    'joe': {\n      _id: 'joe',\n      roles: {\n        '__global_roles__': ['admin'],\n        'group1': ['editor']\n      }\n    }\n  }\n\n  function testUser (test, username, expectedRoles, group) {\n    var user = users[username]\n\n    // test using user object rather than userId to avoid mocking\n    _.each(roles, function (role) {\n      var expected = _.contains(expectedRoles, role),\n          msg = username + ' expected to have \\'' + role + '\\' permission but does not',\n          nmsg = username + ' had un-expected permission ' + role\n\n      if (expected) {\n        test.isTrue(Roles.userIsInRole(user, role, group), msg)\n      } else {\n        test.isFalse(Roles.userIsInRole(user, role, group), nmsg)\n      }\n    })\n  }\n\n\n  // Mock Meteor.user() for isInRole handlebars helper testing\n  Meteor.user = function () {\n    return users.eve\n  }\n\n  Tinytest.add(\n    'roles - can check current users roles via template helper', \n    function (test) {\n      var isInRole = Roles._handlebarsHelpers.isInRole,\n          expected,\n          actual\n\n      test.equal(typeof isInRole, 'function', \"'isInRole' helper not registered\")\n\n      expected = true\n      actual = isInRole('admin, editor')\n      test.equal(actual, expected)\n      \n      expected = true\n      actual = isInRole('admin')\n      test.equal(actual, expected)\n\n      expected = false\n      actual = isInRole('unknown')\n      test.equal(actual, expected)\n    })\n\n  Tinytest.add(\n    'roles - can check if user is in role', \n    function (test) {\n      testUser(test, 'eve', ['admin', 'editor'])\n    })\n\n  Tinytest.add(\n    'roles - can check if user is in role by group', \n    function (test) {\n      testUser(test, 'bob', ['user'], 'group1')\n      testUser(test, 'bob', ['editor'], 'group2')\n    })\n\n  Tinytest.add(\n    'roles - can check if user is in role with Roles.GLOBAL_GROUP', \n    function (test) {\n      testUser(test, 'joe', ['admin'])\n      testUser(test, 'joe', ['admin'], Roles.GLOBAL_GROUP)\n      testUser(test, 'joe', ['admin', 'editor'], 'group1')\n    })\n}());\n"]}